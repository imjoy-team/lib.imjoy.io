(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("imjoyRPC", [], factory);
	else if(typeof exports === 'object')
		exports["imjoyRPC"] = factory();
	else
		root["imjoyRPC"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/worker-loader/dist/workers/InlineWorker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/workers/InlineWorker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzPzc3ODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMzQzOTEzL2hvdy10by1jcmVhdGUtYS13ZWItd29ya2VyLWZyb20tYS1zdHJpbmdcblxudmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgdXJsKSB7XG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW5kb3cuTW96QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1TQmxvYkJ1aWxkZXI7XG5cbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuXG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuXG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGhlIHByb3Bvc2VkIEFQSVxuICAgICAgICBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoJ2RhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCwnICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0lubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/workers/InlineWorker.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, module, scripts, repository, keywords, author, license, bugs, homepage, dependencies, devDependencies, eslintConfig, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"imjoy-rpc\\\",\\\"version\\\":\\\"0.2.13\\\",\\\"description\\\":\\\"Remote procedure calls for ImJoy.\\\",\\\"module\\\":\\\"index.js\\\",\\\"scripts\\\":{\\\"build\\\":\\\"rm -rf dist && npm run build-umd\\\",\\\"build-umd\\\":\\\"webpack --config webpack.config.js --mode development && NODE_ENV=production webpack --config webpack.config.js --mode production --devtool source-map \\\",\\\"watch\\\":\\\"NODE_ENV=production webpack --watch --progress --config webpack.config.js --mode production --devtool source-map\\\",\\\"publish\\\":\\\"npm install && npm run build && npm publish\\\",\\\"serve\\\":\\\"webpack-dev-server\\\",\\\"stats\\\":\\\"webpack --profile --json > stats.json\\\",\\\"stats-prod\\\":\\\"webpack --profile --json --mode production > stats-prod.json\\\",\\\"analyze\\\":\\\"webpack-bundle-analyzer -p 9999 stats.json\\\",\\\"analyze-prod\\\":\\\"webpack-bundle-analyzer -p 9999 stats-prod.json\\\",\\\"clean\\\":\\\"rimraf dist/*\\\",\\\"deploy\\\":\\\"npm run build && node deploy-site.js\\\",\\\"format\\\":\\\"prettier --write \\\\\\\"{src,tests}/**/**\\\\\\\"\\\",\\\"check-format\\\":\\\"prettier --check \\\\\\\"{src,tests}/**/**\\\\\\\"\\\",\\\"test\\\":\\\"karma start --single-run --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\\\",\\\"test-watch\\\":\\\"karma start --auto-watch --browsers Chrome,FirefoxHeadless karma.conf.js --debug\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/imjoy-team/imjoy-rpc.git\\\"},\\\"keywords\\\":[\\\"imjoy\\\",\\\"rpc\\\"],\\\"author\\\":\\\"imjoy-team <imjoy.team@gmail.com>\\\",\\\"license\\\":\\\"MIT\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/imjoy-team/imjoy-rpc/issues\\\"},\\\"homepage\\\":\\\"https://github.com/imjoy-team/imjoy-rpc\\\",\\\"dependencies\\\":{},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/plugin-syntax-dynamic-import\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/polyfill\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/preset-env\\\":\\\"^7.0.0-beta.39\\\",\\\"@types/requirejs\\\":\\\"^2.1.28\\\",\\\"babel-core\\\":\\\"^6.26.0\\\",\\\"babel-eslint\\\":\\\"^10.1.0\\\",\\\"babel-loader\\\":\\\"^8.1.0\\\",\\\"babel-runtime\\\":\\\"^6.26.0\\\",\\\"chai\\\":\\\"^4.2.0\\\",\\\"clean-webpack-plugin\\\":\\\"^0.1.19\\\",\\\"copy-webpack-plugin\\\":\\\"^5.0.5\\\",\\\"eslint\\\":\\\"^6.8.0\\\",\\\"eslint-config-prettier\\\":\\\"^4.2.0\\\",\\\"eslint-loader\\\":\\\"^4.0.2\\\",\\\"file-loader\\\":\\\"^0.11.2\\\",\\\"fs-extra\\\":\\\"^0.30.0\\\",\\\"gh-pages\\\":\\\"^2.0.1\\\",\\\"html-loader\\\":\\\"^0.5.5\\\",\\\"html-webpack-plugin\\\":\\\"^3.2.0\\\",\\\"json-loader\\\":\\\"^0.5.4\\\",\\\"karma\\\":\\\"^4.4.1\\\",\\\"karma-chrome-launcher\\\":\\\"^3.1.0\\\",\\\"karma-firefox-launcher\\\":\\\"^1.3.0\\\",\\\"karma-mocha\\\":\\\"^1.3.0\\\",\\\"karma-spec-reporter\\\":\\\"0.0.32\\\",\\\"karma-webpack\\\":\\\"^4.0.2\\\",\\\"lerna\\\":\\\"^3.8.0\\\",\\\"lodash.debounce\\\":\\\"^4.0.8\\\",\\\"mocha\\\":\\\"^7.1.2\\\",\\\"postcss\\\":\\\"^6.0.2\\\",\\\"prettier\\\":\\\"^1.6.1\\\",\\\"rimraf\\\":\\\"^2.6.2\\\",\\\"schema-utils\\\":\\\"^0.4.3\\\",\\\"socket.io-client\\\":\\\"^2.3.0\\\",\\\"style-loader\\\":\\\"^0.18.1\\\",\\\"url-loader\\\":\\\"^0.5.9\\\",\\\"webpack\\\":\\\"^4.0.0\\\",\\\"webpack-bundle-analyzer\\\":\\\"^3.3.2\\\",\\\"webpack-cli\\\":\\\"^3.1.2\\\",\\\"webpack-dev-server\\\":\\\"^3.1.1\\\",\\\"webpack-merge\\\":\\\"^4.1.1\\\",\\\"workbox-webpack-plugin\\\":\\\"^4.3.1\\\",\\\"worker-loader\\\":\\\"^2.0.0\\\",\\\"write-file-webpack-plugin\\\":\\\"^4.5.1\\\"},\\\"eslintConfig\\\":{\\\"globals\\\":{\\\"document\\\":true,\\\"window\\\":true}}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./package.json\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! exports provided: RPC, API_VERSION, VERSION, waitForInitialization, setupRPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"waitForInitialization\", function() { return waitForInitialization; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupRPC\", function() { return setupRPC; });\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugin.webworker.js */ \"./src/plugin.webworker.js\");\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pluginIframe.js */ \"./src/pluginIframe.js\");\n/* harmony import */ var _pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginWebPython.js */ \"./src/pluginWebPython.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__[\"RPC\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"API_VERSION\", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__[\"API_VERSION\"]; });\n\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ \"./package.json\", 1);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return _package_json__WEBPACK_IMPORTED_MODULE_5__[\"version\"]; });\n\n/**\n * Contains the code executed in the sandboxed frame under web-browser\n *\n * Tries to create a Web-Worker inside the frame and set up the\n * communication between the worker and the parent window. Some\n * browsers restrict creating a worker inside a sandboxed iframe - if\n * this happens, the plugin initialized right inside the frame (in the\n * same thread)\n */\n\n\n\n\n\n\n\nfunction _inIframe() {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\n/**\n * Initializes the plugin inside a web worker. May throw an exception\n * in case this was not permitted by the browser.\n */\n\n\nfunction setupWebWorker(config) {\n  if (!config.allow_execution) throw new Error(\"web-worker plugin can only work with allow_execution=true\");\n  const worker = new _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default.a(); // mixed content warning in Chrome silently skips worker\n  // initialization without exception, handling this with timeout\n\n  const fallbackTimeout = setTimeout(function () {\n    worker.terminate();\n    console.warn(`Plugin failed to start as a web-worker, running in an iframe instead.`);\n    Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n  }, 2000);\n  const peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])(); // forwarding messages between the worker and parent window\n\n  worker.addEventListener(\"message\", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.type === \"worker-ready\") {\n      // send config to the worker\n      worker.postMessage({\n        type: \"connectRPC\",\n        config: config\n      });\n      clearTimeout(fallbackTimeout);\n      return;\n    } else if (m.type === \"initialized\") {\n      // complete the missing fields\n      m.config = Object.assign({}, config, m.config);\n      m.origin = window.location.origin;\n      m.peer_id = peer_id;\n    } else if (m.type === \"imjoy_remote_api_ready\") {\n      // if it's a webworker, there will be no api object returned\n      window.dispatchEvent(new CustomEvent(\"imjoy_remote_api_ready\", {\n        detail: null\n      }));\n    } else if (m.type === \"cacheRequirements\" && typeof cache_requirements === \"function\") {\n      cache_requirements(m.requirements);\n    } else if (m.type === \"disconnect\") {\n      worker.terminate();\n    } else {\n      if (m.__transferables__) {\n        transferables = m.__transferables__;\n        delete m.__transferables__;\n      }\n    }\n\n    parent.postMessage(m, config.target_origin || \"*\", transferables);\n  });\n  window.addEventListener(\"message\", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.__transferables__) {\n      transferables = m.__transferables__;\n      delete m.__transferables__;\n    }\n\n    if (m.peer_id === peer_id) {\n      worker.postMessage(m, transferables);\n    } else if (config.debug) {\n      console.log(`connection peer id mismatch ${m.peer_id} !== ${peer_id}`);\n    }\n  });\n}\n\nfunction waitForInitialization(config) {\n  if (!_inIframe()) {\n    throw new Error(\"waitForInitialization (imjoy-rpc) should only run inside an iframe.\");\n  }\n\n  config = config || {};\n  const targetOrigin = config.target_origin || \"*\";\n\n  if (config.credential_required && typeof config.verify_credential !== \"function\") {\n    throw new Error(\"Please also provide the `verify_credential` function with `credential_required`.\");\n  }\n\n  if (config.credential_required && targetOrigin === \"*\") {\n    throw new Error(\"`target_origin` was set to `*` with `credential_required=true`, there is a security risk that you may leak the credential to website from other origin. Please specify the `target_origin` explicitly.\");\n  }\n\n  const done = () => {\n    window.removeEventListener(\"message\", handleEvent);\n  };\n\n  const peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])();\n\n  const handleEvent = e => {\n    if (e.type === \"message\" && (targetOrigin === \"*\" || e.origin === targetOrigin)) {\n      if (e.data.type === \"initialize\") {\n        done();\n\n        if (e.data.peer_id !== peer_id) {\n          // TODO: throw an error when we are sure all the peers will send the peer_id\n          console.warn(`${e.data.config && e.data.config.name}: connection peer id mismatch ${e.data.peer_id} !== ${peer_id}`);\n        }\n\n        const cfg = e.data.config; // override the target_origin setting if it's configured by the rpc client\n        // otherwise take the setting from the core\n\n        if (targetOrigin !== \"*\") {\n          cfg.target_origin = targetOrigin;\n        }\n\n        if (config.credential_required) {\n          config.verify_credential(cfg.credential).then(result => {\n            if (result && result.auth && !result.error) {\n              // pass the authentication information with tokens\n              cfg.auth = result.auth;\n              setupRPC(cfg).then(() => {\n                console.log(\"ImJoy RPC loaded successfully!\");\n              });\n            } else {\n              throw new Error(\"Failed to verify the credentail:\" + (result && result.error));\n            }\n          });\n        } else {\n          setupRPC(cfg).then(() => {\n            console.log(\"ImJoy RPC loaded successfully!\");\n          });\n        }\n      } else {\n        throw new Error(`unrecognized message: ${e.data}`);\n      }\n    }\n  };\n\n  window.addEventListener(\"message\", handleEvent);\n  parent.postMessage({\n    type: \"imjoyRPCReady\",\n    config: config,\n    peer_id: peer_id\n  }, \"*\");\n}\nfunction setupRPC(config) {\n  config = config || {};\n  if (!config.name) throw new Error(\"Please specify a name for your app.\");\n  config.version = config.version || \"0.1.0\";\n  config.description = config.description || `[TODO: add description for ${config.name} ]`;\n  config.type = config.type || \"rpc-window\";\n  config.id = config.id || Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])();\n  config.allow_execution = config.allow_execution || false;\n\n  if (config.enable_service_worker) {\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"setupServiceWorker\"])(config.base_url, config.target_origin, config.cache_requirements);\n  }\n\n  if (config.cache_requirements) {\n    delete config.cache_requirements;\n  } // remove functions\n\n\n  config = Object.keys(config).reduce((p, c) => {\n    if (typeof config[c] !== \"function\") p[c] = config[c];\n    return p;\n  }, {});\n  return new Promise((resolve, reject) => {\n    if (_inIframe()) {\n      if (config.type === \"web-worker\") {\n        try {\n          setupWebWorker(config);\n        } catch (e) {\n          // fallback to iframe\n          Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n        }\n      } else if (config.type === \"web-python\" || config.type === \"web-python-window\") {\n        Object(_pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(config);\n      } else if ([\"rpc-window\", \"rpc-worker\", \"iframe\", \"window\"].includes(config.type)) {\n        Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n      } else {\n        console.error(\"Unsupported plugin type: \" + config.type);\n        reject(\"Unsupported plugin type: \" + config.type);\n      }\n\n      try {\n        const handleEvent = e => {\n          const api = e.detail;\n\n          if (config.expose_api_globally) {\n            window.api = api;\n          } // imjoy plugin api\n\n\n          resolve(api);\n          window.removeEventListener(\"imjoy_remote_api_ready\", handleEvent);\n        };\n\n        window.addEventListener(\"imjoy_remote_api_ready\", handleEvent);\n      } catch (e) {\n        reject(e);\n      }\n    } else {\n      reject(new Error(\"imjoy-rpc should only run inside an iframe.\"));\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ }),

/***/ "./src/plugin.webworker.js":
/*!*********************************!*\
  !*** ./src/plugin.webworker.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = function() {\n  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ \"./node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\\"./src/plugin.webworker.js\\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\\"./src/plugin.webworker.js\\\":\\n/*!*********************************!*\\\\\\n  !*** ./src/plugin.webworker.js ***!\\n  \\\\*********************************/\\n/*! no exports provided */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \\\\\\\"./src/pluginCore.js\\\\\\\");\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \\\\\\\"./src/utils.js\\\\\\\");\\\\n/**\\\\n * Contains the routines loaded by the plugin Worker under web-browser.\\\\n *\\\\n * Initializes the web environment version of the platform-dependent\\\\n * connection object for the plugin site\\\\n */\\\\n\\\\n\\\\n\\\\n\\\\n(function() {\\\\n  // make sure this runs inside a webworker\\\\n  if (\\\\n    typeof WorkerGlobalScope === \\\\\\\"undefined\\\\\\\" ||\\\\n    !self ||\\\\n    !(self instanceof WorkerGlobalScope)\\\\n  ) {\\\\n    throw new Error(\\\\\\\"This script can only loaded in a webworker\\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Connection object provided to the RPC constructor,\\\\n   * plugin site implementation for the web-based environment.\\\\n   * Global will be then cleared to prevent exposure into the\\\\n   * Worker, so we put this local connection object into a closure\\\\n   */\\\\n  class Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"MessageEmitter\\\\\\\"] {\\\\n    constructor(config) {\\\\n      super(config && config.debug);\\\\n      this.config = config || {};\\\\n    }\\\\n    connect() {\\\\n      self.addEventListener(\\\\\\\"message\\\\\\\", e => {\\\\n        this._fire(e.data.type, e.data);\\\\n      });\\\\n      this.emit({\\\\n        type: \\\\\\\"initialized\\\\\\\",\\\\n        config: this.config\\\\n      });\\\\n    }\\\\n    disconnect() {\\\\n      this._fire(\\\\\\\"beforeDisconnect\\\\\\\");\\\\n      self.close();\\\\n      this._fire(\\\\\\\"disconnected\\\\\\\");\\\\n    }\\\\n    emit(data) {\\\\n      let transferables = undefined;\\\\n      if (data.__transferables__) {\\\\n        transferables = data.__transferables__;\\\\n        delete data.__transferables__;\\\\n      }\\\\n      self.postMessage(data, transferables);\\\\n    }\\\\n    async execute(code) {\\\\n      if (code.type === \\\\\\\"requirements\\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\\"string\\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (!Array.isArray(code.requirements)) {\\\\n                code.requirements = [code.requirements];\\\\n              }\\\\n              for (var i = 0; i < code.requirements.length; i++) {\\\\n                if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\\".css\\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\\"css:\\\\\\\")\\\\n                ) {\\\\n                  throw \\\\\\\"unable to import css in a webworker\\\\\\\";\\\\n                } else if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\\".js\\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")\\\\n                ) {\\\\n                  if (code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")) {\\\\n                    code.requirements[i] = code.requirements[i].slice(3);\\\\n                  }\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"http\\\\\\\")) {\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"cache:\\\\\\\")) {\\\\n                  //ignore cache\\\\n                } else {\\\\n                  console.log(\\\\n                    \\\\\\\"Unprocessed requirements url: \\\\\\\" + code.requirements[i]\\\\n                  );\\\\n                }\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\\"failed to import required scripts: \\\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n        } catch (e) {\\\\n          throw e;\\\\n        }\\\\n      } else if (code.type === \\\\\\\"script\\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\\"string\\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (Array.isArray(code.requirements)) {\\\\n                for (let i = 0; i < code.requirements.length; i++) {\\\\n                  importScripts(code.requirements[i]);\\\\n                }\\\\n              } else {\\\\n                importScripts(code.requirements);\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\\"failed to import required scripts: \\\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n          eval(code.content);\\\\n        } catch (e) {\\\\n          console.error(e.message, e.stack);\\\\n          throw e;\\\\n        }\\\\n      } else {\\\\n        throw \\\\\\\"unsupported code type.\\\\\\\";\\\\n      }\\\\n      if (code.type === \\\\\\\"requirements\\\\\\\") {\\\\n        self.postMessage({\\\\n          type: \\\\\\\"cacheRequirements\\\\\\\",\\\\n          requirements: code.requirements\\\\n        });\\\\n      }\\\\n    }\\\\n  }\\\\n  const config = {\\\\n    type: \\\\\\\"web-worker\\\\\\\",\\\\n    dedicated_thread: true,\\\\n    allow_execution: true,\\\\n    lang: \\\\\\\"javascript\\\\\\\",\\\\n    api_version: _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"API_VERSION\\\\\\\"]\\\\n  };\\\\n  const conn = new Connection(config);\\\\n  conn.on(\\\\\\\"connectRPC\\\\\\\", data => {\\\\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"connectRPC\\\\\\\"])(conn, Object.assign(data.config, config));\\\\n  });\\\\n  conn.connect();\\\\n  self.postMessage({\\\\n    type: \\\\\\\"worker-ready\\\\\\\"\\\\n  });\\\\n})();\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luLndlYndvcmtlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbi53ZWJ3b3JrZXIuanM/OGM1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnRhaW5zIHRoZSByb3V0aW5lcyBsb2FkZWQgYnkgdGhlIHBsdWdpbiBXb3JrZXIgdW5kZXIgd2ViLWJyb3dzZXIuXG4gKlxuICogSW5pdGlhbGl6ZXMgdGhlIHdlYiBlbnZpcm9ubWVudCB2ZXJzaW9uIG9mIHRoZSBwbGF0Zm9ybS1kZXBlbmRlbnRcbiAqIGNvbm5lY3Rpb24gb2JqZWN0IGZvciB0aGUgcGx1Z2luIHNpdGVcbiAqL1xuaW1wb3J0IHsgY29ubmVjdFJQQyB9IGZyb20gXCIuL3BsdWdpbkNvcmUuanNcIjtcbmltcG9ydCB7IEFQSV9WRVJTSU9OIH0gZnJvbSBcIi4vcnBjLmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlRW1pdHRlciwgcmFuZElkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuKGZ1bmN0aW9uKCkge1xuICAvLyBtYWtlIHN1cmUgdGhpcyBydW5zIGluc2lkZSBhIHdlYndvcmtlclxuICBpZiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgIXNlbGYgfHxcbiAgICAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSlcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBzY3JpcHQgY2FuIG9ubHkgbG9hZGVkIGluIGEgd2Vid29ya2VyXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDb25uZWN0aW9uIG9iamVjdCBwcm92aWRlZCB0byB0aGUgUlBDIGNvbnN0cnVjdG9yLFxuICAgKiBwbHVnaW4gc2l0ZSBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHdlYi1iYXNlZCBlbnZpcm9ubWVudC5cbiAgICogR2xvYmFsIHdpbGwgYmUgdGhlbiBjbGVhcmVkIHRvIHByZXZlbnQgZXhwb3N1cmUgaW50byB0aGVcbiAgICogV29ya2VyLCBzbyB3ZSBwdXQgdGhpcyBsb2NhbCBjb25uZWN0aW9uIG9iamVjdCBpbnRvIGEgY2xvc3VyZVxuICAgKi9cbiAgY2xhc3MgQ29ubmVjdGlvbiBleHRlbmRzIE1lc3NhZ2VFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgIHN1cGVyKGNvbmZpZyAmJiBjb25maWcuZGVidWcpO1xuICAgICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgfVxuICAgIGNvbm5lY3QoKSB7XG4gICAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGUgPT4ge1xuICAgICAgICB0aGlzLl9maXJlKGUuZGF0YS50eXBlLCBlLmRhdGEpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoe1xuICAgICAgICB0eXBlOiBcImluaXRpYWxpemVkXCIsXG4gICAgICAgIGNvbmZpZzogdGhpcy5jb25maWdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgdGhpcy5fZmlyZShcImJlZm9yZURpc2Nvbm5lY3RcIik7XG4gICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICB0aGlzLl9maXJlKFwiZGlzY29ubmVjdGVkXCIpO1xuICAgIH1cbiAgICBlbWl0KGRhdGEpIHtcbiAgICAgIGxldCB0cmFuc2ZlcmFibGVzID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGRhdGEuX190cmFuc2ZlcmFibGVzX18pIHtcbiAgICAgICAgdHJhbnNmZXJhYmxlcyA9IGRhdGEuX190cmFuc2ZlcmFibGVzX187XG4gICAgICAgIGRlbGV0ZSBkYXRhLl9fdHJhbnNmZXJhYmxlc19fO1xuICAgICAgfVxuICAgICAgc2VsZi5wb3N0TWVzc2FnZShkYXRhLCB0cmFuc2ZlcmFibGVzKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShjb2RlKSB7XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgPSBbY29kZS5yZXF1aXJlbWVudHNdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZS5yZXF1aXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLmNzc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNzczpcIilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IFwidW5hYmxlIHRvIGltcG9ydCBjc3MgaW4gYSB3ZWJ3b3JrZXJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcIi5qc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImpzOlwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNvZGUucmVxdWlyZW1lbnRzW2ldLnN0YXJ0c1dpdGgoXCJqczpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0gPSBjb2RlLnJlcXVpcmVtZW50c1tpXS5zbGljZSgzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNhY2hlOlwiKSkge1xuICAgICAgICAgICAgICAgICAgLy9pZ25vcmUgY2FjaGVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIFwiVW5wcm9jZXNzZWQgcmVxdWlyZW1lbnRzIHVybDogXCIgKyBjb2RlLnJlcXVpcmVtZW50c1tpXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFwiICtcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSBcInNjcmlwdFwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2RlLnJlcXVpcmVtZW50cykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvZGUucmVxdWlyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpbXBvcnRTY3JpcHRzKGNvZGUucmVxdWlyZW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFwiICtcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBldmFsKGNvZGUuY29udGVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSwgZS5zdGFjayk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJ1bnN1cHBvcnRlZCBjb2RlIHR5cGUuXCI7XG4gICAgICB9XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwiY2FjaGVSZXF1aXJlbWVudHNcIixcbiAgICAgICAgICByZXF1aXJlbWVudHM6IGNvZGUucmVxdWlyZW1lbnRzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBjb25maWcgPSB7XG4gICAgdHlwZTogXCJ3ZWItd29ya2VyXCIsXG4gICAgZGVkaWNhdGVkX3RocmVhZDogdHJ1ZSxcbiAgICBhbGxvd19leGVjdXRpb246IHRydWUsXG4gICAgbGFuZzogXCJqYXZhc2NyaXB0XCIsXG4gICAgYXBpX3ZlcnNpb246IEFQSV9WRVJTSU9OXG4gIH07XG4gIGNvbnN0IGNvbm4gPSBuZXcgQ29ubmVjdGlvbihjb25maWcpO1xuICBjb25uLm9uKFwiY29ubmVjdFJQQ1wiLCBkYXRhID0+IHtcbiAgICBjb25uZWN0UlBDKGNvbm4sIE9iamVjdC5hc3NpZ24oZGF0YS5jb25maWcsIGNvbmZpZykpO1xuICB9KTtcbiAgY29ubi5jb25uZWN0KCk7XG4gIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgIHR5cGU6IFwid29ya2VyLXJlYWR5XCJcbiAgfSk7XG59KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/pluginCore.js\\\":\\n/*!***************************!*\\\\\\n  !*** ./src/pluginCore.js ***!\\n  \\\\***************************/\\n/*! exports provided: connectRPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"connectRPC\\\\\\\", function() { return connectRPC; });\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/**\\\\n * Core plugin script loaded into the plugin process/thread.\\\\n *\\\\n * Initializes the plugin-site API global methods.\\\\n */\\\\n\\\\nfunction connectRPC(connection, config) {\\\\n  config = config || {};\\\\n  const codecs = {};\\\\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"RPC\\\\\\\"](connection, config, codecs);\\\\n  rpc.on(\\\\\\\"getInterface\\\\\\\", function () {\\\\n    launchConnected();\\\\n  });\\\\n  rpc.on(\\\\\\\"remoteReady\\\\\\\", function () {\\\\n    const api = rpc.getRemote() || {};\\\\n\\\\n    if (api.export) {\\\\n      throw new Error(\\\\\\\"`export` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    if (api.onload) {\\\\n      throw new Error(\\\\\\\"`onload` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    if (api.dispose) {\\\\n      throw new Error(\\\\\\\"`dispose` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    api.registerCodec = function (config) {\\\\n      if (!config[\\\\\\\"name\\\\\\\"] || !config[\\\\\\\"encoder\\\\\\\"] && !config[\\\\\\\"decoder\\\\\\\"]) {\\\\n        throw new Error(\\\\\\\"Invalid codec format, please make sure you provide a name, type, encoder and decoder.\\\\\\\");\\\\n      } else {\\\\n        if (config.type) {\\\\n          for (let k of Object.keys(codecs)) {\\\\n            if (codecs[k].type === config.type || k === config.name) {\\\\n              delete codecs[k];\\\\n              console.warn(\\\\\\\"Remove duplicated codec: \\\\\\\" + k);\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        codecs[config[\\\\\\\"name\\\\\\\"]] = config;\\\\n      }\\\\n    };\\\\n\\\\n    api.disposeObject = function (obj) {\\\\n      rpc.disposeObject(obj);\\\\n    };\\\\n\\\\n    api.export = function (_interface, config) {\\\\n      rpc.setInterface(_interface, config);\\\\n    };\\\\n\\\\n    api.onLoad = function (handler) {\\\\n      handler = checkHandler(handler);\\\\n\\\\n      if (connected) {\\\\n        handler();\\\\n      } else {\\\\n        connectedHandlers.push(handler);\\\\n      }\\\\n    };\\\\n\\\\n    api.dispose = function (_interface) {\\\\n      rpc.disconnect();\\\\n    };\\\\n\\\\n    if (typeof WorkerGlobalScope !== \\\\\\\"undefined\\\\\\\" && self instanceof WorkerGlobalScope) {\\\\n      self.api = api;\\\\n      self.postMessage({\\\\n        type: \\\\\\\"imjoy_remote_api_ready\\\\\\\"\\\\n      });\\\\n    } else if (typeof window) {\\\\n      window.dispatchEvent(new CustomEvent(\\\\\\\"imjoy_remote_api_ready\\\\\\\", {\\\\n        detail: api\\\\n      }));\\\\n    }\\\\n  });\\\\n  let connected = false;\\\\n  const connectedHandlers = [];\\\\n\\\\n  const launchConnected = function () {\\\\n    if (!connected) {\\\\n      connected = true;\\\\n      let handler;\\\\n\\\\n      while (handler = connectedHandlers.pop()) {\\\\n        handler();\\\\n      }\\\\n    }\\\\n  };\\\\n\\\\n  const checkHandler = function (handler) {\\\\n    const type = typeof handler;\\\\n\\\\n    if (type !== \\\\\\\"function\\\\\\\") {\\\\n      const msg = \\\\\\\"A function may only be subsribed to the event, \\\\\\\" + type + \\\\\\\" was provided instead\\\\\\\";\\\\n      throw new Error(msg);\\\\n    }\\\\n\\\\n    return handler;\\\\n  };\\\\n\\\\n  return rpc;\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbkNvcmUuanM/YTgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcmUgcGx1Z2luIHNjcmlwdCBsb2FkZWQgaW50byB0aGUgcGx1Z2luIHByb2Nlc3MvdGhyZWFkLlxuICpcbiAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4tc2l0ZSBBUEkgZ2xvYmFsIG1ldGhvZHMuXG4gKi9cbmltcG9ydCB7IFJQQyB9IGZyb20gXCIuL3JwYy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFJQQyhjb25uZWN0aW9uLCBjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25zdCBjb2RlY3MgPSB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZywgY29kZWNzKTtcbiAgcnBjLm9uKFwiZ2V0SW50ZXJmYWNlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGxhdW5jaENvbm5lY3RlZCgpO1xuICB9KTtcblxuICBycGMub24oXCJyZW1vdGVSZWFkeVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhcGkgPSBycGMuZ2V0UmVtb3RlKCkgfHwge307XG4gICAgaWYgKGFwaS5leHBvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBleHBvcnRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5vbmxvYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBvbmxvYWRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5kaXNwb3NlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGlzcG9zZWAgaXMgYSByZXNlcnZlZCBmdW5jdGlvbiBuYW1lXCIpO1xuICAgIH1cbiAgICBhcGkucmVnaXN0ZXJDb2RlYyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgaWYgKCFjb25maWdbXCJuYW1lXCJdIHx8ICghY29uZmlnW1wiZW5jb2RlclwiXSAmJiAhY29uZmlnW1wiZGVjb2RlclwiXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiSW52YWxpZCBjb2RlYyBmb3JtYXQsIHBsZWFzZSBtYWtlIHN1cmUgeW91IHByb3ZpZGUgYSBuYW1lLCB0eXBlLCBlbmNvZGVyIGFuZCBkZWNvZGVyLlwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKGNvZGVjcykpIHtcbiAgICAgICAgICAgIGlmIChjb2RlY3Nba10udHlwZSA9PT0gY29uZmlnLnR5cGUgfHwgayA9PT0gY29uZmlnLm5hbWUpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIGNvZGVjc1trXTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUmVtb3ZlIGR1cGxpY2F0ZWQgY29kZWM6IFwiICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvZGVjc1tjb25maWdbXCJuYW1lXCJdXSA9IGNvbmZpZztcbiAgICAgIH1cbiAgICB9O1xuICAgIGFwaS5kaXNwb3NlT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICBycGMuZGlzcG9zZU9iamVjdChvYmopO1xuICAgIH07XG4gICAgYXBpLmV4cG9ydCA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UsIGNvbmZpZykge1xuICAgICAgcnBjLnNldEludGVyZmFjZShfaW50ZXJmYWNlLCBjb25maWcpO1xuICAgIH07XG4gICAgYXBpLm9uTG9hZCA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIgPSBjaGVja0hhbmRsZXIoaGFuZGxlcik7XG4gICAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3RlZEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBhcGkuZGlzcG9zZSA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICAgIHJwYy5kaXNjb25uZWN0KCk7XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlXG4gICAgKSB7XG4gICAgICBzZWxmLmFwaSA9IGFwaTtcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImltam95X3JlbW90ZV9hcGlfcmVhZHlcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93KSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiLCB7IGRldGFpbDogYXBpIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xuICBjb25zdCBjb25uZWN0ZWRIYW5kbGVycyA9IFtdO1xuXG4gIGNvbnN0IGxhdW5jaENvbm5lY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBjb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICBsZXQgaGFuZGxlcjtcbiAgICAgIHdoaWxlICgoaGFuZGxlciA9IGNvbm5lY3RlZEhhbmRsZXJzLnBvcCgpKSkge1xuICAgICAgICBoYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGhhbmRsZXI7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgbXNnID1cbiAgICAgICAgXCJBIGZ1bmN0aW9uIG1heSBvbmx5IGJlIHN1YnNyaWJlZCB0byB0aGUgZXZlbnQsIFwiICtcbiAgICAgICAgdHlwZSArXG4gICAgICAgIFwiIHdhcyBwcm92aWRlZCBpbnN0ZWFkXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH07XG5cbiAgcmV0dXJuIHJwYztcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./src/pluginCore.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/rpc.js\\\":\\n/*!********************!*\\\\\\n  !*** ./src/rpc.js ***!\\n  \\\\********************/\\n/*! exports provided: API_VERSION, RPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"API_VERSION\\\\\\\", function() { return API_VERSION; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"RPC\\\\\\\", function() { return RPC; });\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \\\\\\\"./src/utils.js\\\\\\\");\\\\n/**\\\\n * Contains the RPC object used both by the application\\\\n * site, and by each plugin\\\\n */\\\\n\\\\nconst API_VERSION = \\\\\\\"0.2.3\\\\\\\";\\\\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\\\\n\\\\nfunction _appendBuffer(buffer1, buffer2) {\\\\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\\\\n  tmp.set(new Uint8Array(buffer1), 0);\\\\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\\\\n  return tmp.buffer;\\\\n}\\\\n\\\\nfunction getKeyByValue(object, value) {\\\\n  return Object.keys(object).find(key => object[key] === value);\\\\n}\\\\n\\\\nfunction indexObject(obj, is) {\\\\n  if (typeof is == \\\\\\\"string\\\\\\\") return indexObject(obj, is.split(\\\\\\\".\\\\\\\"));else if (is.length == 0) return obj;else return indexObject(obj[is[0]], is.slice(1));\\\\n}\\\\n/**\\\\n * RPC object represents a single site in the\\\\n * communication protocol between the application and the plugin\\\\n *\\\\n * @param {Object} connection a special object allowing to send\\\\n * and receive messages from the opposite site (basically it\\\\n * should only provide send() and onMessage() methods)\\\\n */\\\\n\\\\n\\\\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"MessageEmitter\\\\\\\"] {\\\\n  constructor(connection, config, codecs) {\\\\n    super(config && config.debug);\\\\n    this._connection = connection;\\\\n    this.config = config || {};\\\\n    this._codecs = codecs || {};\\\\n    this._object_store = {};\\\\n    this._method_weakmap = new WeakMap();\\\\n    this._object_weakmap = new WeakMap();\\\\n    this._local_api = null; // make sure there is an execute function\\\\n\\\\n    const name = this.config.name;\\\\n\\\\n    this._connection.execute = this._connection.execute || function () {\\\\n      throw new Error(`connection.execute not implemented (in \\\\\\\"${name}\\\\\\\")`);\\\\n    };\\\\n\\\\n    this._store = new ReferenceStore();\\\\n    this._method_refs = new ReferenceStore();\\\\n\\\\n    this._method_refs.onReady(() => {\\\\n      this._fire(\\\\\\\"remoteIdle\\\\\\\");\\\\n    });\\\\n\\\\n    this._method_refs.onBusy(() => {\\\\n      this._fire(\\\\\\\"remoteBusy\\\\\\\");\\\\n    });\\\\n\\\\n    this._setupMessageHanlders();\\\\n  }\\\\n\\\\n  init() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"initialized\\\\\\\",\\\\n      config: this.config,\\\\n      peer_id: this._connection.peer_id\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Set a handler to be called when received a responce from the\\\\n   * remote site reporting that the previously provided interface\\\\n   * has been successfully set as remote for that site\\\\n   *\\\\n   * @param {Function} handler\\\\n   */\\\\n\\\\n\\\\n  getRemoteCallStack() {\\\\n    return this._method_refs.getStack();\\\\n  }\\\\n  /**\\\\n   * @returns {Object} set of remote interface methods\\\\n   */\\\\n\\\\n\\\\n  getRemote() {\\\\n    return this._remote_interface;\\\\n  }\\\\n  /**\\\\n   * Sets the interface of this site making it available to the\\\\n   * remote site by sending a message with a set of methods names\\\\n   *\\\\n   * @param {Object} _interface to set\\\\n   */\\\\n\\\\n\\\\n  setInterface(_interface, config) {\\\\n    config = config || {};\\\\n    this.config.name = config.name || this.config.name;\\\\n    this.config.description = config.description || this.config.description;\\\\n\\\\n    if (this.config.forwarding_functions) {\\\\n      for (let func_name of this.config.forwarding_functions) {\\\\n        const _remote = this._remote_interface;\\\\n\\\\n        if (_remote[func_name]) {\\\\n          if (_interface.constructor === Object) {\\\\n            if (!_interface[func_name]) {\\\\n              _interface[func_name] = (...args) => {\\\\n                _remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          } else if (_interface.constructor.constructor === Function) {\\\\n            if (!_interface.constructor.prototype[func_name]) {\\\\n              _interface.constructor.prototype[func_name] = (...args) => {\\\\n                _remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          }\\\\n        }\\\\n      }\\\\n    }\\\\n\\\\n    this._local_api = _interface;\\\\n\\\\n    this._fire(\\\\\\\"interfaceAvailable\\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Sends the actual interface to the remote site upon it was\\\\n   * updated or by a special request of the remote site\\\\n   */\\\\n\\\\n\\\\n  sendInterface() {\\\\n    if (!this._local_api) {\\\\n      throw new Error(\\\\\\\"interface is not set.\\\\\\\");\\\\n    }\\\\n\\\\n    this._encode(this._local_api, true).then(api => {\\\\n      this._connection.emit({\\\\n        type: \\\\\\\"setInterface\\\\\\\",\\\\n        api: api\\\\n      });\\\\n    });\\\\n  }\\\\n\\\\n  _disposeObject(objectId) {\\\\n    if (this._object_store[objectId]) {\\\\n      delete this._object_store[objectId];\\\\n    } else {\\\\n      throw new Error(`Object (id=${objectId}) not found.`);\\\\n    }\\\\n  }\\\\n\\\\n  disposeObject(obj) {\\\\n    return new Promise((resolve, reject) => {\\\\n      if (this._object_weakmap.has(obj)) {\\\\n        const objectId = this._object_weakmap.get(obj);\\\\n\\\\n        this._connection.once(\\\\\\\"disposed\\\\\\\", data => {\\\\n          if (data.error) reject(new Error(data.error));else resolve();\\\\n        });\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"disposeObject\\\\\\\",\\\\n          object_id: objectId\\\\n        });\\\\n      } else {\\\\n        throw new Error(\\\\\\\"Invalid object\\\\\\\");\\\\n      }\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Handles a message from the remote site\\\\n   */\\\\n  // var callback_reg = new RegExp(\\\\\\\"onupdate|run$\\\\\\\")\\\\n\\\\n\\\\n  _setupMessageHanlders() {\\\\n    this._connection.on(\\\\\\\"init\\\\\\\", this.init);\\\\n\\\\n    this._connection.on(\\\\\\\"execute\\\\\\\", data => {\\\\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"executed\\\\\\\"\\\\n        });\\\\n      }).catch(e => {\\\\n        console.error(e);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"executed\\\\\\\",\\\\n          error: String(e)\\\\n        });\\\\n      });\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"method\\\\\\\", async data => {\\\\n      let resolve, reject, method, args, result;\\\\n\\\\n      try {\\\\n        if (data.promise) {\\\\n          [resolve, reject] = await this._unwrap(data.promise, false);\\\\n        }\\\\n\\\\n        const _interface = this._object_store[data.object_id];\\\\n        method = indexObject(_interface, data.name);\\\\n        args = await this._unwrap(data.args, true);\\\\n\\\\n        if (data.promise) {\\\\n          result = method.apply(_interface, args);\\\\n\\\\n          if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\\"AsyncFunction\\\\\\\") {\\\\n            result.then(resolve).catch(reject);\\\\n          } else {\\\\n            resolve(result);\\\\n          }\\\\n        } else {\\\\n          method.apply(_interface, args);\\\\n        }\\\\n      } catch (err) {\\\\n        console.error(this.config.name, err);\\\\n\\\\n        if (reject) {\\\\n          reject(err);\\\\n        }\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"callback\\\\\\\", async data => {\\\\n      let resolve, reject, method, args, result;\\\\n\\\\n      try {\\\\n        if (data.promise) {\\\\n          [resolve, reject] = await this._unwrap(data.promise, false);\\\\n        }\\\\n\\\\n        if (data.promise) {\\\\n          method = this._store.fetch(data.id);\\\\n          args = await this._unwrap(data.args, true);\\\\n\\\\n          if (!method) {\\\\n            throw new Error(\\\\\\\"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\\");\\\\n          }\\\\n\\\\n          result = method.apply(null, args);\\\\n\\\\n          if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\\"AsyncFunction\\\\\\\") {\\\\n            result.then(resolve).catch(reject);\\\\n          } else {\\\\n            resolve(result);\\\\n          }\\\\n        } else {\\\\n          method = this._store.fetch(data.id);\\\\n          args = await this._unwrap(data.args, true);\\\\n\\\\n          if (!method) {\\\\n            throw new Error(\\\\\\\"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\\");\\\\n          }\\\\n\\\\n          method.apply(null, args);\\\\n        }\\\\n      } catch (err) {\\\\n        console.error(this.config.name, err);\\\\n\\\\n        if (reject) {\\\\n          reject(err);\\\\n        }\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"disposeObject\\\\\\\", data => {\\\\n      try {\\\\n        this._disposeObject(data.object_id);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"disposed\\\\\\\"\\\\n        });\\\\n      } catch (e) {\\\\n        console.error(e);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"disposed\\\\\\\",\\\\n          error: String(e)\\\\n        });\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"setInterface\\\\\\\", data => {\\\\n      this._setRemoteInterface(data.api);\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"getInterface\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"getInterface\\\\\\\");\\\\n\\\\n      if (this._local_api) {\\\\n        this.sendInterface();\\\\n      } else {\\\\n        this.once(\\\\\\\"interfaceAvailable\\\\\\\", () => {\\\\n          this.sendInterface();\\\\n        });\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"interfaceSetAsRemote\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"interfaceSetAsRemote\\\\\\\");\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"disconnect\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"beforeDisconnect\\\\\\\");\\\\n\\\\n      this._connection.disconnect();\\\\n\\\\n      this._fire(\\\\\\\"disconnected\\\\\\\");\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Sends a requests to the remote site asking it to provide its\\\\n   * current interface\\\\n   */\\\\n\\\\n\\\\n  requestRemote() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"getInterface\\\\\\\"\\\\n    });\\\\n  }\\\\n\\\\n  _ndarray(typedArray, shape, dtype) {\\\\n    var _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][typedArray.constructor.name];\\\\n\\\\n    if (dtype && dtype !== _dtype) {\\\\n      throw \\\\\\\"dtype doesn't match the type of the array: \\\\\\\" + _dtype + \\\\\\\" != \\\\\\\" + dtype;\\\\n    }\\\\n\\\\n    shape = shape || [typedArray.length];\\\\n    return {\\\\n      _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n      _rvalue: typedArray.buffer,\\\\n      _rshape: shape,\\\\n      _rdtype: _dtype\\\\n    };\\\\n  }\\\\n  /**\\\\n   * Sets the new remote interface provided by the other site\\\\n   *\\\\n   * @param {Array} names list of function names\\\\n   */\\\\n\\\\n\\\\n  _setRemoteInterface(api) {\\\\n    this._decode(api).then(intf => {\\\\n      this._remote_interface = intf;\\\\n\\\\n      this._fire(\\\\\\\"remoteReady\\\\\\\");\\\\n\\\\n      this._reportRemoteSet();\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * method. When the generated function is called, it will send the\\\\n   * corresponding message to the remote site asking it to execute\\\\n   * the particular method of its interface\\\\n   *\\\\n   * @param {String} name of the remote method\\\\n   *\\\\n   * @returns {Function} wrapped remote method\\\\n   */\\\\n\\\\n\\\\n  _genRemoteMethod(targetId, name, objectId) {\\\\n    var me = this;\\\\n\\\\n    var remoteMethod = function () {\\\\n      return new Promise(async (resolve, reject) => {\\\\n        let id = null;\\\\n\\\\n        try {\\\\n          id = me._method_refs.put(objectId ? objectId + \\\\\\\"/\\\\\\\" + name : name);\\\\n\\\\n          var wrapped_resolve = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return resolve.apply(this, arguments);\\\\n          };\\\\n\\\\n          var wrapped_reject = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return reject.apply(this, arguments);\\\\n          };\\\\n\\\\n          wrapped_resolve.__rpc_pair = wrapped_reject;\\\\n          wrapped_reject.__rpc_pair = wrapped_resolve;\\\\n          var args = Array.prototype.slice.call(arguments);\\\\n\\\\n          if (name === \\\\\\\"register\\\\\\\" || name === \\\\\\\"export\\\\\\\" || name === \\\\\\\"on\\\\\\\") {\\\\n            args = await me._wrap(args, true);\\\\n          } else {\\\\n            args = await me._wrap(args);\\\\n          }\\\\n\\\\n          var transferables = args.__transferables__;\\\\n          if (transferables) delete args.__transferables__;\\\\n\\\\n          me._connection.emit({\\\\n            type: \\\\\\\"method\\\\\\\",\\\\n            target_id: targetId,\\\\n            name: name,\\\\n            object_id: objectId,\\\\n            args: args,\\\\n            promise: await me._wrap([wrapped_resolve, wrapped_reject])\\\\n          }, transferables);\\\\n        } catch (e) {\\\\n          if (id) me._method_refs.fetch(id);\\\\n          reject(`Failed to exectue remote method (interface: ${objectId || me.id}, method: ${name}), error: ${e}`);\\\\n        }\\\\n      });\\\\n    };\\\\n\\\\n    remoteMethod.__remote_method = true;\\\\n    return remoteMethod;\\\\n  }\\\\n  /**\\\\n   * Sends a responce reporting that interface just provided by the\\\\n   * remote site was successfully set by this site as remote\\\\n   */\\\\n\\\\n\\\\n  _reportRemoteSet() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"interfaceSetAsRemote\\\\\\\"\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Prepares the provided set of remote method arguments for\\\\n   * sending to the remote site, replaces all the callbacks with\\\\n   * identifiers\\\\n   *\\\\n   * @param {Array} args to wrap\\\\n   *\\\\n   * @returns {Array} wrapped arguments\\\\n   */\\\\n\\\\n\\\\n  async _encode(aObject, asInterface, objectId) {\\\\n    const aType = typeof aObject;\\\\n\\\\n    if (aType === \\\\\\\"number\\\\\\\" || aType === \\\\\\\"string\\\\\\\" || aType === \\\\\\\"boolean\\\\\\\" || aObject === null || aObject === undefined || aObject instanceof ArrayBuffer) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    let bObject;\\\\n\\\\n    if (typeof aObject === \\\\\\\"function\\\\\\\") {\\\\n      if (asInterface) {\\\\n        if (!objectId) throw new Error(\\\\\\\"objectId is not specified.\\\\\\\");\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"interface\\\\\\\",\\\\n          _rtarget_id: this._connection.peer_id,\\\\n          _rintf: objectId,\\\\n          _rvalue: asInterface\\\\n        };\\\\n\\\\n        this._method_weakmap.set(aObject, bObject);\\\\n      } else if (this._method_weakmap.has(aObject)) {\\\\n        bObject = this._method_weakmap.get(aObject);\\\\n      } else {\\\\n        const cid = this._store.put(aObject);\\\\n\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"callback\\\\\\\",\\\\n          _rtarget_id: this._connection.peer_id,\\\\n          _rname: aObject.constructor && aObject.constructor.name || cid,\\\\n          _rvalue: cid\\\\n        };\\\\n      }\\\\n\\\\n      return bObject;\\\\n    } // skip if already encoded\\\\n\\\\n\\\\n    if (aObject.constructor instanceof Object && aObject._rtype) {\\\\n      // make sure the interface functions are encoded\\\\n      if (aObject._rintf) {\\\\n        const temp = aObject._rtype;\\\\n        delete aObject._rtype;\\\\n        bObject = await this._encode(aObject, asInterface, objectId);\\\\n        bObject._rtype = temp;\\\\n      } else {\\\\n        bObject = aObject;\\\\n      }\\\\n\\\\n      return bObject;\\\\n    }\\\\n\\\\n    const transferables = [];\\\\n    const _transfer = aObject._transfer;\\\\n    const isarray = Array.isArray(aObject);\\\\n\\\\n    for (let tp of Object.keys(this._codecs)) {\\\\n      const codec = this._codecs[tp];\\\\n\\\\n      if (codec.encoder && aObject instanceof codec.type) {\\\\n        // TODO: what if multiple encoders found\\\\n        const encodedObj = await Promise.resolve(codec.encoder(aObject));\\\\n        if (encodedObj && !encodedObj._rtype) encodedObj._rtype = codec.name; // encode the functions in the interface object\\\\n\\\\n        if (encodedObj && encodedObj._rintf) {\\\\n          const temp = encodedObj._rtype;\\\\n          delete encodedObj._rtype;\\\\n          encodedObj = await this._encode(encodedObj, asInterface, objectId);\\\\n          encodedObj._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = encodedObj;\\\\n        return bObject;\\\\n      }\\\\n    }\\\\n\\\\n    if (\\\\n    /*global tf*/\\\\n    typeof tf !== \\\\\\\"undefined\\\\\\\" && tf.Tensor && aObject instanceof tf.Tensor) {\\\\n      const v_buffer = aObject.dataSync();\\\\n\\\\n      if (aObject._transfer || _transfer) {\\\\n        transferables.push(v_buffer.buffer);\\\\n        delete aObject._transfer;\\\\n      }\\\\n\\\\n      bObject = {\\\\n        _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n        _rvalue: v_buffer.buffer,\\\\n        _rshape: aObject.shape,\\\\n        _rdtype: aObject.dtype\\\\n      };\\\\n    } else if (\\\\n    /*global nj*/\\\\n    typeof nj !== \\\\\\\"undefined\\\\\\\" && nj.NdArray && aObject instanceof nj.NdArray) {\\\\n      var dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][aObject.selection.data.constructor.name];\\\\n\\\\n      if (aObject._transfer || _transfer) {\\\\n        transferables.push(aObject.selection.data.buffer);\\\\n        delete aObject._transfer;\\\\n      }\\\\n\\\\n      bObject = {\\\\n        _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n        _rvalue: aObject.selection.data.buffer,\\\\n        _rshape: aObject.shape,\\\\n        _rdtype: dtype\\\\n      };\\\\n    } else if (aObject instanceof Error) {\\\\n      console.error(aObject);\\\\n      bObject = {\\\\n        _rtype: \\\\\\\"error\\\\\\\",\\\\n        _rvalue: aObject.toString()\\\\n      };\\\\n    } else if (typeof File !== \\\\\\\"undefined\\\\\\\" && aObject instanceof File) {\\\\n      bObject = {\\\\n        _rtype: \\\\\\\"file\\\\\\\",\\\\n        _rvalue: aObject,\\\\n        _rpath: aObject._path || aObject.webkitRelativePath\\\\n      };\\\\n    } // send objects supported by structure clone algorithm\\\\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\\\\n    else if (aObject !== Object(aObject) || aObject instanceof Boolean || aObject instanceof String || aObject instanceof Date || aObject instanceof RegExp || aObject instanceof ImageData || typeof FileList !== \\\\\\\"undefined\\\\\\\" && aObject instanceof FileList) {\\\\n        bObject = aObject; // TODO: avoid object such as DynamicPlugin instance.\\\\n      } else if (typeof File !== \\\\\\\"undefined\\\\\\\" && aObject instanceof File) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"file\\\\\\\",\\\\n          _rname: aObject.name,\\\\n          _rmime: aObject.type,\\\\n          _rvalue: aObject,\\\\n          _rpath: aObject._path || aObject.webkitRelativePath\\\\n        };\\\\n      } else if (aObject instanceof Blob) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"blob\\\\\\\",\\\\n          _rvalue: aObject\\\\n        };\\\\n      } else if (aObject instanceof ArrayBufferView) {\\\\n        if (aObject._transfer || _transfer) {\\\\n          transferables.push(aObject.buffer);\\\\n          delete aObject._transfer;\\\\n        }\\\\n\\\\n        const dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][aObject.constructor.name];\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"typedarray\\\\\\\",\\\\n          _rvalue: aObject.buffer,\\\\n          _rdtype: dtype\\\\n        };\\\\n      } else if (aObject instanceof DataView) {\\\\n        if (aObject._transfer || _transfer) {\\\\n          transferables.push(aObject.buffer);\\\\n          delete aObject._transfer;\\\\n        }\\\\n\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"memoryview\\\\\\\",\\\\n          _rvalue: aObject.buffer\\\\n        };\\\\n      } else if (aObject instanceof Set) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"set\\\\\\\",\\\\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\\\\n        };\\\\n      } else if (aObject instanceof Map) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"orderedmap\\\\\\\",\\\\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\\\\n        };\\\\n      } else if (aObject.constructor instanceof Object || Array.isArray(aObject)) {\\\\n        bObject = isarray ? [] : {};\\\\n        let keys; // an object/array\\\\n\\\\n        if (aObject.constructor === Object || Array.isArray(aObject)) {\\\\n          keys = Object.keys(aObject);\\\\n        } // a class\\\\n        else if (aObject.constructor === Function) {\\\\n            throw new Error(\\\\\\\"Please instantiate the class before exportting it.\\\\\\\");\\\\n          } // instance of a class\\\\n          else if (aObject.constructor.constructor === Function) {\\\\n              keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject)); // TODO: use a proxy object to represent the actual object\\\\n              // always encode class instance as interface\\\\n\\\\n              asInterface = true;\\\\n            } else {\\\\n              throw Error(\\\\\\\"Unsupported interface type\\\\\\\");\\\\n            } // encode interfaces\\\\n\\\\n\\\\n        if (aObject._rintf || asInterface) {\\\\n          if (!objectId) {\\\\n            objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"randId\\\\\\\"])();\\\\n            this._object_store[objectId] = aObject;\\\\n          }\\\\n\\\\n          for (let k of keys) {\\\\n            if (k === \\\\\\\"constructor\\\\\\\") continue;\\\\n\\\\n            if (k.startsWith(\\\\\\\"_\\\\\\\")) {\\\\n              continue;\\\\n            }\\\\n\\\\n            bObject[k] = await this._encode(aObject[k], typeof asInterface === \\\\\\\"string\\\\\\\" ? asInterface + \\\\\\\".\\\\\\\" + k : k, objectId);\\\\n          } // object id for dispose the object remotely\\\\n\\\\n\\\\n          bObject._rintf = objectId; // remove interface when closed\\\\n\\\\n          if (aObject.on && typeof aObject.on === \\\\\\\"function\\\\\\\") {\\\\n            aObject.on(\\\\\\\"close\\\\\\\", () => {\\\\n              delete this._object_store[objectId];\\\\n            });\\\\n          }\\\\n        } else {\\\\n          for (let k of keys) {\\\\n            if ([\\\\\\\"hasOwnProperty\\\\\\\", \\\\\\\"constructor\\\\\\\"].includes(k)) continue;\\\\n            bObject[k] = await this._encode(aObject[k]);\\\\n          }\\\\n        } // for example, browserFS object\\\\n\\\\n      } else if (typeof aObject === \\\\\\\"object\\\\\\\") {\\\\n        const keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\\\\n        const objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"randId\\\\\\\"])();\\\\n\\\\n        for (let k of keys) {\\\\n          if ([\\\\\\\"hasOwnProperty\\\\\\\", \\\\\\\"constructor\\\\\\\"].includes(k)) continue; // encode as interface\\\\n\\\\n          bObject[k] = await this._encode(aObject[k], k, bObject);\\\\n        } // object id, used for dispose the object\\\\n\\\\n\\\\n        bObject._rintf = objectId;\\\\n      } else {\\\\n        throw \\\\\\\"imjoy-rpc: Unsupported data type:\\\\\\\" + aObject;\\\\n      }\\\\n\\\\n    if (transferables.length > 0) {\\\\n      bObject.__transferables__ = transferables;\\\\n    }\\\\n\\\\n    if (!bObject) {\\\\n      throw new Error(\\\\\\\"Failed to encode object\\\\\\\");\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  async _decode(aObject, withPromise) {\\\\n    if (!aObject) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    var bObject, v, k;\\\\n\\\\n    if (aObject[\\\\\\\"_rtype\\\\\\\"]) {\\\\n      if (this._codecs[aObject._rtype] && this._codecs[aObject._rtype].decoder) {\\\\n        if (aObject._rintf) {\\\\n          const temp = aObject._rtype;\\\\n          delete aObject._rtype;\\\\n          aObject = await this._decode(aObject, withPromise);\\\\n          aObject._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = await Promise.resolve(this._codecs[aObject._rtype].decoder(aObject));\\\\n      } else if (aObject._rtype === \\\\\\\"callback\\\\\\\") {\\\\n        bObject = this._genRemoteCallback(aObject._rtarget_id, aObject._rvalue, withPromise);\\\\n      } else if (aObject._rtype === \\\\\\\"interface\\\\\\\") {\\\\n        bObject = this._genRemoteMethod(aObject._rtarget_id, aObject._rvalue, aObject._rintf);\\\\n      } else if (aObject._rtype === \\\\\\\"ndarray\\\\\\\") {\\\\n        /*global nj tf*/\\\\n        //create build array/tensor if used in the plugin\\\\n        if (typeof nj !== \\\\\\\"undefined\\\\\\\" && nj.array) {\\\\n          if (Array.isArray(aObject._rvalue)) {\\\\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          bObject = nj.array(new Uint8(aObject._rvalue), aObject._rdtype).reshape(aObject._rshape);\\\\n        } else if (typeof tf !== \\\\\\\"undefined\\\\\\\" && tf.Tensor) {\\\\n          if (Array.isArray(aObject._rvalue)) {\\\\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"dtypeToTypedArray\\\\\\\"][aObject._rdtype]);\\\\n          bObject = tf.tensor(new arraytype(aObject._rvalue), aObject._rshape, aObject._rdtype);\\\\n        } else {\\\\n          //keep it as regular if transfered to the main app\\\\n          bObject = aObject;\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\\"error\\\\\\\") {\\\\n        bObject = new Error(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\\"file\\\\\\\") {\\\\n        if (aObject._rvalue instanceof File) {\\\\n          bObject = aObject._rvalue; //patch _path\\\\n\\\\n          bObject._path = aObject._rpath;\\\\n        } else {\\\\n          bObject = new File([aObject._rvalue], aObject._rname, {\\\\n            type: aObject._rmime\\\\n          });\\\\n          bObject._path = aObject._rpath;\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\\"typedarray\\\\\\\") {\\\\n        const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"dtypeToTypedArray\\\\\\\"][aObject._rdtype]);\\\\n        if (!arraytype) throw new Error(\\\\\\\"unsupported dtype: \\\\\\\" + aObject._rdtype);\\\\n        bObject = new arraytype(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\\"memoryview\\\\\\\") {\\\\n        bObject = new DataView(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\\"blob\\\\\\\") {\\\\n        if (aObject._rvalue instanceof Blob) {\\\\n          bObject = aObject._rvalue;\\\\n        } else {\\\\n          bObject = new Blob([aObject._rvalue], {\\\\n            type: aObject._rmime\\\\n          });\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\\"orderedmap\\\\\\\") {\\\\n        bObject = new Map((await this._decode(aObject._rvalue, withPromise)));\\\\n      } else if (aObject._rtype === \\\\\\\"set\\\\\\\") {\\\\n        bObject = new Set((await this._decode(aObject._rvalue, withPromise)));\\\\n      } else {\\\\n        // make sure all the interface functions are decoded\\\\n        if (aObject._rintf) {\\\\n          const temp = aObject._rtype;\\\\n          delete aObject._rtype;\\\\n          aObject = await this._decode(aObject, withPromise);\\\\n          aObject._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = aObject;\\\\n      }\\\\n    } else if (aObject.constructor === Object || Array.isArray(aObject)) {\\\\n      var isarray = Array.isArray(aObject);\\\\n      bObject = isarray ? [] : {};\\\\n\\\\n      for (k in aObject) {\\\\n        if (isarray || aObject.hasOwnProperty(k)) {\\\\n          v = aObject[k];\\\\n          bObject[k] = await this._decode(v, withPromise);\\\\n        }\\\\n      }\\\\n    } else {\\\\n      bObject = aObject;\\\\n    }\\\\n\\\\n    if (bObject === undefined) {\\\\n      throw new Error(\\\\\\\"Failed to decode object\\\\\\\");\\\\n    } // store the object id for dispose\\\\n\\\\n\\\\n    if (aObject._rintf) {\\\\n      this._object_weakmap.set(bObject, aObject._rintf);\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  async _wrap(args, asInterface) {\\\\n    var wrapped = await this._encode(args, asInterface);\\\\n    return wrapped;\\\\n  }\\\\n  /**\\\\n   * Unwraps the set of arguments delivered from the remote site,\\\\n   * replaces all callback identifiers with a function which will\\\\n   * initiate sending that callback identifier back to other site\\\\n   *\\\\n   * @param {Object} args to unwrap\\\\n   *\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Array} unwrapped args\\\\n   */\\\\n\\\\n\\\\n  async _unwrap(args, withPromise) {\\\\n    var result = await this._decode(args, withPromise);\\\\n    return result;\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * callback. When the generated function is called, it will send\\\\n   * the corresponding message to the remote site asking it to\\\\n   * execute the particular callback previously saved during a call\\\\n   * by the remote site a method from the interface of this site\\\\n   *\\\\n   * @param {Number} id of the remote callback to execute\\\\n   * @param {Number} argNum argument index of the callback\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Function} wrapped remote callback\\\\n   */\\\\n\\\\n\\\\n  _genRemoteCallback(targetId, cid, withPromise) {\\\\n    var me = this;\\\\n    var remoteCallback;\\\\n\\\\n    if (withPromise) {\\\\n      remoteCallback = function () {\\\\n        return new Promise(async (resolve, reject) => {\\\\n          var args = await me._wrap(Array.prototype.slice.call(arguments));\\\\n          var transferables = args.__transferables__;\\\\n          if (transferables) delete args.__transferables__;\\\\n          resolve.__rpc_pair = reject;\\\\n          reject.__rpc_pair = resolve;\\\\n\\\\n          try {\\\\n            me._connection.emit({\\\\n              type: \\\\\\\"callback\\\\\\\",\\\\n              target_id: targetId,\\\\n              id: cid,\\\\n              args: args,\\\\n              promise: await me._wrap([resolve, reject])\\\\n            }, transferables);\\\\n          } catch (e) {\\\\n            reject(`Failed to exectue remote callback ( id: ${cid}).`);\\\\n          }\\\\n        });\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    } else {\\\\n      remoteCallback = async function () {\\\\n        var args = await me._wrap(Array.prototype.slice.call(arguments));\\\\n        var transferables = args.__transferables__;\\\\n        if (transferables) delete args.__transferables__;\\\\n        return me._connection.emit({\\\\n          type: \\\\\\\"callback\\\\\\\",\\\\n          target_id: targetId,\\\\n          id: cid,\\\\n          args: args\\\\n        }, transferables);\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Sends the notification message and breaks the connection\\\\n   */\\\\n\\\\n\\\\n  disconnect() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"disconnect\\\\\\\"\\\\n    });\\\\n\\\\n    setTimeout(() => {\\\\n      this._connection.disconnect();\\\\n    }, 2000);\\\\n  }\\\\n\\\\n}\\\\n/**\\\\n * ReferenceStore is a special object which stores other objects\\\\n * and provides the references (number) instead. This reference\\\\n * may then be sent over a json-based communication channel (IPC\\\\n * to another Node.js process or a message to the Worker). Other\\\\n * site may then provide the reference in the responce message\\\\n * implying the given object should be activated.\\\\n *\\\\n * Primary usage for the ReferenceStore is a storage for the\\\\n * callbacks, which therefore makes it possible to initiate a\\\\n * callback execution by the opposite site (which normally cannot\\\\n * directly execute functions over the communication channel).\\\\n *\\\\n * Each stored object can only be fetched once and is not\\\\n * available for the second time. Each stored object must be\\\\n * fetched, since otherwise it will remain stored forever and\\\\n * consume memory.\\\\n *\\\\n * Stored object indeces are simply the numbers, which are however\\\\n * released along with the objects, and are later reused again (in\\\\n * order to postpone the overflow, which should not likely happen,\\\\n * but anyway).\\\\n */\\\\n\\\\nclass ReferenceStore {\\\\n  constructor() {\\\\n    this._store = {}; // stored object\\\\n\\\\n    this._indices = [0]; // smallest available indices\\\\n\\\\n    this._readyHandler = function () {};\\\\n\\\\n    this._busyHandler = function () {};\\\\n\\\\n    this._readyHandler();\\\\n  }\\\\n  /**\\\\n   * call handler when the store is empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onReady(readyHandler) {\\\\n    this._readyHandler = readyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * call handler when the store is not empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onBusy(busyHandler) {\\\\n    this._busyHandler = busyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * get the length of the store\\\\n   *\\\\n   */\\\\n\\\\n\\\\n  getStack() {\\\\n    return Object.keys(this._store).length;\\\\n  }\\\\n  /**\\\\n   * @function _genId() generates the new reference id\\\\n   *\\\\n   * @returns {Number} smallest available id and reserves it\\\\n   */\\\\n\\\\n\\\\n  _genId() {\\\\n    var id;\\\\n\\\\n    if (this._indices.length === 1) {\\\\n      id = this._indices[0]++;\\\\n    } else {\\\\n      id = this._indices.shift();\\\\n    }\\\\n\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Releases the given reference id so that it will be available by\\\\n   * another object stored\\\\n   *\\\\n   * @param {Number} id to release\\\\n   */\\\\n\\\\n\\\\n  _releaseId(id) {\\\\n    for (var i = 0; i < this._indices.length; i++) {\\\\n      if (id < this._indices[i]) {\\\\n        this._indices.splice(i, 0, id);\\\\n\\\\n        break;\\\\n      }\\\\n    } // cleaning-up the sequence tail\\\\n\\\\n\\\\n    for (i = this._indices.length - 1; i >= 0; i--) {\\\\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\\\\n        this._indices.pop();\\\\n      } else {\\\\n        break;\\\\n      }\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Stores the given object and returns the refernce id instead\\\\n   *\\\\n   * @param {Object} obj to store\\\\n   *\\\\n   * @returns {Number} reference id of the stored object\\\\n   */\\\\n\\\\n\\\\n  put(obj) {\\\\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\\\\n      this._busyHandler();\\\\n    }\\\\n\\\\n    var id = this._genId();\\\\n\\\\n    this._store[id] = obj;\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Retrieves previously stored object and releases its reference\\\\n   *\\\\n   * @param {Number} id of an object to retrieve\\\\n   */\\\\n\\\\n\\\\n  fetch(id) {\\\\n    var obj = this._store[id];\\\\n\\\\n    if (obj && !obj.__remote_method) {\\\\n      delete this._store[id];\\\\n\\\\n      this._releaseId(id);\\\\n\\\\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\\\\n        this._readyHandler();\\\\n      }\\\\n    }\\\\n\\\\n    if (obj && obj.__rpc_pair) {\\\\n      const _id = getKeyByValue(this._store, obj.__rpc_pair);\\\\n\\\\n      this.fetch(_id);\\\\n    }\\\\n\\\\n    return obj;\\\\n  }\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/rpc.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/utils.js\\\":\\n/*!**********************!*\\\\\\n  !*** ./src/utils.js ***!\\n  \\\\**********************/\\n/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin, MessageEmitter */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"randId\\\\\\\", function() { return randId; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"dtypeToTypedArray\\\\\\\", function() { return dtypeToTypedArray; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"typedArrayToDtype\\\\\\\", function() { return typedArrayToDtype; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"cacheRequirements\\\\\\\", function() { return cacheRequirements; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"setupServiceWorker\\\\\\\", function() { return setupServiceWorker; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"urlJoin\\\\\\\", function() { return urlJoin; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"MessageEmitter\\\\\\\", function() { return MessageEmitter; });\\\\nfunction randId() {\\\\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\\\\n}\\\\nconst dtypeToTypedArray = {\\\\n  int8: \\\\\\\"Int8Array\\\\\\\",\\\\n  int16: \\\\\\\"Int16Array\\\\\\\",\\\\n  int32: \\\\\\\"Int32Array\\\\\\\",\\\\n  uint8: \\\\\\\"Uint8Array\\\\\\\",\\\\n  uint16: \\\\\\\"Uint16Array\\\\\\\",\\\\n  uint32: \\\\\\\"Uint32Array\\\\\\\",\\\\n  float32: \\\\\\\"Float32Array\\\\\\\",\\\\n  float64: \\\\\\\"Float64Array\\\\\\\",\\\\n  array: \\\\\\\"Array\\\\\\\"\\\\n};\\\\nconst typedArrayToDtype = {\\\\n  Int8Array: \\\\\\\"int8\\\\\\\",\\\\n  Int16Array: \\\\\\\"int16\\\\\\\",\\\\n  Int32Array: \\\\\\\"int32\\\\\\\",\\\\n  Uint8Array: \\\\\\\"uint8\\\\\\\",\\\\n  Uint16Array: \\\\\\\"uint16\\\\\\\",\\\\n  Uint32Array: \\\\\\\"uint32\\\\\\\",\\\\n  Float32Array: \\\\\\\"float32\\\\\\\",\\\\n  Float64Array: \\\\\\\"float64\\\\\\\",\\\\n  Array: \\\\\\\"array\\\\\\\"\\\\n};\\\\n\\\\nfunction cacheUrlInServiceWorker(url) {\\\\n  return new Promise(function (resolve, reject) {\\\\n    const message = {\\\\n      command: \\\\\\\"add\\\\\\\",\\\\n      url: url\\\\n    };\\\\n\\\\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\\\\n      reject(\\\\\\\"Service worker is not supported.\\\\\\\");\\\\n      return;\\\\n    }\\\\n\\\\n    const messageChannel = new MessageChannel();\\\\n\\\\n    messageChannel.port1.onmessage = function (event) {\\\\n      if (event.data && event.data.error) {\\\\n        reject(event.data.error);\\\\n      } else {\\\\n        resolve(event.data && event.data.result);\\\\n      }\\\\n    };\\\\n\\\\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\\\\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\\\\n    } else {\\\\n      reject(\\\\\\\"Service worker controller is not available\\\\\\\");\\\\n    }\\\\n  });\\\\n}\\\\n\\\\nasync function cacheRequirements(requirements) {\\\\n  if (!Array.isArray(requirements)) {\\\\n    requirementsm.code.requirements = [requirements];\\\\n  }\\\\n\\\\n  if (requirements && requirements.length > 0) {\\\\n    for (let req of requirements) {\\\\n      //remove prefix\\\\n      if (req.startsWith(\\\\\\\"js:\\\\\\\")) req = req.slice(3);\\\\n      if (req.startsWith(\\\\\\\"css:\\\\\\\")) req = req.slice(4);\\\\n      if (req.startsWith(\\\\\\\"cache:\\\\\\\")) req = req.slice(6);\\\\n      if (!req.startsWith(\\\\\\\"http\\\\\\\")) continue;\\\\n      await cacheUrlInServiceWorker(req).catch(e => {\\\\n        console.error(e);\\\\n      });\\\\n    }\\\\n  }\\\\n}\\\\nfunction setupServiceWorker(baseUrl, targetOrigin, cacheCallback) {\\\\n  // register service worker for offline access\\\\n  if (\\\\\\\"serviceWorker\\\\\\\" in navigator) {\\\\n    baseUrl = baseUrl || \\\\\\\"/\\\\\\\";\\\\n    navigator.serviceWorker.register(baseUrl + \\\\\\\"plugin-service-worker.js\\\\\\\").then(function (registration) {\\\\n      // Registration was successful\\\\n      console.log(\\\\\\\"ServiceWorker registration successful with scope: \\\\\\\", registration.scope);\\\\n    }, function (err) {\\\\n      // registration failed :(\\\\n      console.log(\\\\\\\"ServiceWorker registration failed: \\\\\\\", err);\\\\n    });\\\\n    targetOrigin = targetOrigin || \\\\\\\"*\\\\\\\";\\\\n    cacheCallback = cacheCallback || cacheRequirements;\\\\n\\\\n    if (cacheCallback && typeof cacheCallback !== \\\\\\\"function\\\\\\\") {\\\\n      throw new Error(\\\\\\\"config.cache_requirements must be a function\\\\\\\");\\\\n    }\\\\n\\\\n    window.addEventListener(\\\\\\\"message\\\\\\\", function (e) {\\\\n      if (targetOrigin === \\\\\\\"*\\\\\\\" || e.origin === targetOrigin) {\\\\n        const m = e.data;\\\\n\\\\n        if (m.type === \\\\\\\"cacheRequirements\\\\\\\") {\\\\n          cacheCallback(m.requirements);\\\\n        }\\\\n      }\\\\n    });\\\\n  }\\\\n} //#Source https://bit.ly/2neWfJ2\\\\n\\\\nfunction urlJoin(...args) {\\\\n  return args.join(\\\\\\\"/\\\\\\\").replace(/[\\\\\\\\/]+/g, \\\\\\\"/\\\\\\\").replace(/^(.+):\\\\\\\\//, \\\\\\\"$1://\\\\\\\").replace(/^file:/, \\\\\\\"file:/\\\\\\\").replace(/\\\\\\\\/(\\\\\\\\?|&|#[^!])/g, \\\\\\\"$1\\\\\\\").replace(/\\\\\\\\?/g, \\\\\\\"&\\\\\\\").replace(\\\\\\\"&\\\\\\\", \\\\\\\"?\\\\\\\");\\\\n}\\\\nclass MessageEmitter {\\\\n  constructor(debug) {\\\\n    this._event_handlers = {};\\\\n    this._once_handlers = {};\\\\n    this._debug = debug;\\\\n  }\\\\n\\\\n  emit() {\\\\n    throw new Error(\\\\\\\"emit is not implemented\\\\\\\");\\\\n  }\\\\n\\\\n  on(event, handler) {\\\\n    if (!this._event_handlers[event]) {\\\\n      this._event_handlers[event] = [];\\\\n    }\\\\n\\\\n    this._event_handlers[event].push(handler);\\\\n  }\\\\n\\\\n  once(event, handler) {\\\\n    handler.___event_run_once = true;\\\\n    this.on(event, handler);\\\\n  }\\\\n\\\\n  off(event, handler) {\\\\n    if (!event && !handler) {\\\\n      // remove all events handlers\\\\n      this._event_handlers = {};\\\\n    } else if (event && !handler) {\\\\n      // remove all hanlders for the event\\\\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\\\\n    } else {\\\\n      // remove a specific handler\\\\n      if (this._event_handlers[event]) {\\\\n        const idx = this._event_handlers[event].indexOf(handler);\\\\n\\\\n        if (idx >= 0) {\\\\n          this._event_handlers[event].splice(idx, 1);\\\\n        }\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  _fire(event, data) {\\\\n    if (this._event_handlers[event]) {\\\\n      var i = this._event_handlers[event].length;\\\\n\\\\n      while (i--) {\\\\n        const handler = this._event_handlers[event][i];\\\\n\\\\n        try {\\\\n          handler(data);\\\\n        } catch (e) {\\\\n          console.error(e);\\\\n        } finally {\\\\n          if (handler.___event_run_once) {\\\\n            this._event_handlers[event].splice(i, 1);\\\\n          }\\\\n        }\\\\n      }\\\\n    } else {\\\\n      if (this._debug) {\\\\n        console.warn(\\\\\\\"unhandled event\\\\\\\", event, data);\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/utils.js\\\\n\\\");\\n\\n/***/ })\\n\\n/******/ });\", null);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luLndlYndvcmtlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbi53ZWJ3b3JrZXIuanM/ZTdlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcmVxdWlyZShcIiEhL1VzZXJzL3dlaS5vdXlhbmcvd29ya3NwYWNlL2ltam95LXJwYy9qYXZhc2NyaXB0L25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3Qvd29ya2Vycy9JbmxpbmVXb3JrZXIuanNcIikoXCIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXFxuLyoqKioqKi8gXFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxcbi8qKioqKiovIFxcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XFxuLyoqKioqKi9cXG4vKioqKioqLyBcXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxcbi8qKioqKiovIFxcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcXG4vKioqKioqL1xcbi8qKioqKiovIFxcdFxcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxcbi8qKioqKiovIFxcdFxcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XFxuLyoqKioqKi8gXFx0XFx0XFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XFxuLyoqKioqKi8gXFx0XFx0fVxcbi8qKioqKiovIFxcdFxcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXFxuLyoqKioqKi8gXFx0XFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xcbi8qKioqKiovIFxcdFxcdFxcdGk6IG1vZHVsZUlkLFxcbi8qKioqKiovIFxcdFxcdFxcdGw6IGZhbHNlLFxcbi8qKioqKiovIFxcdFxcdFxcdGV4cG9ydHM6IHt9XFxuLyoqKioqKi8gXFx0XFx0fTtcXG4vKioqKioqL1xcbi8qKioqKiovIFxcdFxcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxcbi8qKioqKiovIFxcdFxcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xcbi8qKioqKiovXFxuLyoqKioqKi8gXFx0XFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxcbi8qKioqKiovIFxcdFxcdG1vZHVsZS5sID0gdHJ1ZTtcXG4vKioqKioqL1xcbi8qKioqKiovIFxcdFxcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXFxuLyoqKioqKi8gXFx0XFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xcbi8qKioqKiovIFxcdH1cXG4vKioqKioqL1xcbi8qKioqKiovXFxuLyoqKioqKi8gXFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcXG4vKioqKioqLyBcXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xcbi8qKioqKiovXFxuLyoqKioqKi8gXFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcXG4vKioqKioqLyBcXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xcbi8qKioqKiovXFxuLyoqKioqKi8gXFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXFxuLyoqKioqKi8gXFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XFxuLyoqKioqKi8gXFx0XFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xcbi8qKioqKiovIFxcdFxcdFxcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xcbi8qKioqKiovIFxcdFxcdH1cXG4vKioqKioqLyBcXHR9O1xcbi8qKioqKiovXFxuLyoqKioqKi8gXFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xcbi8qKioqKiovIFxcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcXG4vKioqKioqLyBcXHRcXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcXG4vKioqKioqLyBcXHRcXHRcXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcXG4vKioqKioqLyBcXHRcXHR9XFxuLyoqKioqKi8gXFx0XFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcXG4vKioqKioqLyBcXHR9O1xcbi8qKioqKiovXFxuLyoqKioqKi8gXFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XFxuLyoqKioqKi8gXFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XFxuLyoqKioqKi8gXFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXFxuLyoqKioqKi8gXFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XFxuLyoqKioqKi8gXFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxcbi8qKioqKiovIFxcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XFxuLyoqKioqKi8gXFx0XFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XFxuLyoqKioqKi8gXFx0XFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcXG4vKioqKioqLyBcXHRcXHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xcbi8qKioqKiovIFxcdFxcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XFxuLyoqKioqKi8gXFx0XFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcXG4vKioqKioqLyBcXHRcXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XFxuLyoqKioqKi8gXFx0XFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xcbi8qKioqKiovIFxcdFxcdHJldHVybiBucztcXG4vKioqKioqLyBcXHR9O1xcbi8qKioqKiovXFxuLyoqKioqKi8gXFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcXG4vKioqKioqLyBcXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcXG4vKioqKioqLyBcXHRcXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cXG4vKioqKioqLyBcXHRcXHRcXHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxcbi8qKioqKiovIFxcdFxcdFxcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XFxuLyoqKioqKi8gXFx0XFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xcbi8qKioqKiovIFxcdFxcdHJldHVybiBnZXR0ZXI7XFxuLyoqKioqKi8gXFx0fTtcXG4vKioqKioqL1xcbi8qKioqKiovIFxcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxcbi8qKioqKiovIFxcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcXG4vKioqKioqL1xcbi8qKioqKiovIFxcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXFxuLyoqKioqKi8gXFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXFxcIlxcXCI7XFxuLyoqKioqKi9cXG4vKioqKioqL1xcbi8qKioqKiovIFxcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xcbi8qKioqKiovIFxcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFxcXCIuL3NyYy9wbHVnaW4ud2Vid29ya2VyLmpzXFxcIik7XFxuLyoqKioqKi8gfSlcXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi8qKioqKiovICh7XFxuXFxuLyoqKi8gXFxcIi4vc3JjL3BsdWdpbi53ZWJ3b3JrZXIuanNcXFwiOlxcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcXFxcbiAgISoqKiAuL3NyYy9wbHVnaW4ud2Vid29ya2VyLmpzICoqKiFcXG4gIFxcXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuLyohIG5vIGV4cG9ydHMgcHJvdmlkZWQgKi9cXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XFxuXFxuXFxcInVzZSBzdHJpY3RcXFwiO1xcbmV2YWwoXFxcIl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXFxcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcGx1Z2luQ29yZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wbHVnaW5Db3JlLmpzICovIFxcXFxcXFwiLi9zcmMvcGx1Z2luQ29yZS5qc1xcXFxcXFwiKTtcXFxcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcnBjX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JwYy5qcyAqLyBcXFxcXFxcIi4vc3JjL3JwYy5qc1xcXFxcXFwiKTtcXFxcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMuanMgKi8gXFxcXFxcXCIuL3NyYy91dGlscy5qc1xcXFxcXFwiKTtcXFxcbi8qKlxcXFxuICogQ29udGFpbnMgdGhlIHJvdXRpbmVzIGxvYWRlZCBieSB0aGUgcGx1Z2luIFdvcmtlciB1bmRlciB3ZWItYnJvd3Nlci5cXFxcbiAqXFxcXG4gKiBJbml0aWFsaXplcyB0aGUgd2ViIGVudmlyb25tZW50IHZlcnNpb24gb2YgdGhlIHBsYXRmb3JtLWRlcGVuZGVudFxcXFxuICogY29ubmVjdGlvbiBvYmplY3QgZm9yIHRoZSBwbHVnaW4gc2l0ZVxcXFxuICovXFxcXG5cXFxcblxcXFxuXFxcXG5cXFxcbihmdW5jdGlvbigpIHtcXFxcbiAgLy8gbWFrZSBzdXJlIHRoaXMgcnVucyBpbnNpZGUgYSB3ZWJ3b3JrZXJcXFxcbiAgaWYgKFxcXFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSA9PT0gXFxcXFxcXCJ1bmRlZmluZWRcXFxcXFxcIiB8fFxcXFxuICAgICFzZWxmIHx8XFxcXG4gICAgIShzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUpXFxcXG4gICkge1xcXFxuICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcIlRoaXMgc2NyaXB0IGNhbiBvbmx5IGxvYWRlZCBpbiBhIHdlYndvcmtlclxcXFxcXFwiKTtcXFxcbiAgfVxcXFxuICAvKipcXFxcbiAgICogQ29ubmVjdGlvbiBvYmplY3QgcHJvdmlkZWQgdG8gdGhlIFJQQyBjb25zdHJ1Y3RvcixcXFxcbiAgICogcGx1Z2luIHNpdGUgaW1wbGVtZW50YXRpb24gZm9yIHRoZSB3ZWItYmFzZWQgZW52aXJvbm1lbnQuXFxcXG4gICAqIEdsb2JhbCB3aWxsIGJlIHRoZW4gY2xlYXJlZCB0byBwcmV2ZW50IGV4cG9zdXJlIGludG8gdGhlXFxcXG4gICAqIFdvcmtlciwgc28gd2UgcHV0IHRoaXMgbG9jYWwgY29ubmVjdGlvbiBvYmplY3QgaW50byBhIGNsb3N1cmVcXFxcbiAgICovXFxcXG4gIGNsYXNzIENvbm5lY3Rpb24gZXh0ZW5kcyBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcXFxcXFxcIk1lc3NhZ2VFbWl0dGVyXFxcXFxcXCJdIHtcXFxcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcXFxcbiAgICAgIHN1cGVyKGNvbmZpZyAmJiBjb25maWcuZGVidWcpO1xcXFxuICAgICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XFxcXG4gICAgfVxcXFxuICAgIGNvbm5lY3QoKSB7XFxcXG4gICAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoXFxcXFxcXCJtZXNzYWdlXFxcXFxcXCIsIGUgPT4ge1xcXFxuICAgICAgICB0aGlzLl9maXJlKGUuZGF0YS50eXBlLCBlLmRhdGEpO1xcXFxuICAgICAgfSk7XFxcXG4gICAgICB0aGlzLmVtaXQoe1xcXFxuICAgICAgICB0eXBlOiBcXFxcXFxcImluaXRpYWxpemVkXFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbmZpZzogdGhpcy5jb25maWdcXFxcbiAgICAgIH0pO1xcXFxuICAgIH1cXFxcbiAgICBkaXNjb25uZWN0KCkge1xcXFxuICAgICAgdGhpcy5fZmlyZShcXFxcXFxcImJlZm9yZURpc2Nvbm5lY3RcXFxcXFxcIik7XFxcXG4gICAgICBzZWxmLmNsb3NlKCk7XFxcXG4gICAgICB0aGlzLl9maXJlKFxcXFxcXFwiZGlzY29ubmVjdGVkXFxcXFxcXCIpO1xcXFxuICAgIH1cXFxcbiAgICBlbWl0KGRhdGEpIHtcXFxcbiAgICAgIGxldCB0cmFuc2ZlcmFibGVzID0gdW5kZWZpbmVkO1xcXFxuICAgICAgaWYgKGRhdGEuX190cmFuc2ZlcmFibGVzX18pIHtcXFxcbiAgICAgICAgdHJhbnNmZXJhYmxlcyA9IGRhdGEuX190cmFuc2ZlcmFibGVzX187XFxcXG4gICAgICAgIGRlbGV0ZSBkYXRhLl9fdHJhbnNmZXJhYmxlc19fO1xcXFxuICAgICAgfVxcXFxuICAgICAgc2VsZi5wb3N0TWVzc2FnZShkYXRhLCB0cmFuc2ZlcmFibGVzKTtcXFxcbiAgICB9XFxcXG4gICAgYXN5bmMgZXhlY3V0ZShjb2RlKSB7XFxcXG4gICAgICBpZiAoY29kZS50eXBlID09PSBcXFxcXFxcInJlcXVpcmVtZW50c1xcXFxcXFwiKSB7XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgaWYgKFxcXFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcXFxcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxcXFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFxcXFxcXFwic3RyaW5nXFxcXFxcXCIpXFxcXG4gICAgICAgICAgKSB7XFxcXG4gICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpKSB7XFxcXG4gICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgPSBbY29kZS5yZXF1aXJlbWVudHNdO1xcXFxuICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZS5yZXF1aXJlbWVudHMubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBpZiAoXFxcXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFxcXFxcXFwiLmNzc1xcXFxcXFwiKSB8fFxcXFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcXFxcXFxcImNzczpcXFxcXFxcIilcXFxcbiAgICAgICAgICAgICAgICApIHtcXFxcbiAgICAgICAgICAgICAgICAgIHRocm93IFxcXFxcXFwidW5hYmxlIHRvIGltcG9ydCBjc3MgaW4gYSB3ZWJ3b3JrZXJcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxcXFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcXFxcXFxcIi5qc1xcXFxcXFwiKSB8fFxcXFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcXFxcXFxcImpzOlxcXFxcXFwiKVxcXFxuICAgICAgICAgICAgICAgICkge1xcXFxuICAgICAgICAgICAgICAgICAgaWYgKGNvZGUucmVxdWlyZW1lbnRzW2ldLnN0YXJ0c1dpdGgoXFxcXFxcXCJqczpcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0gPSBjb2RlLnJlcXVpcmVtZW50c1tpXS5zbGljZSgzKTtcXFxcbiAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcXFxcXFxcImh0dHBcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcXFxcXFxcImNhY2hlOlxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgICAgICAgLy9pZ25vcmUgY2FjaGVcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiVW5wcm9jZXNzZWQgcmVxdWlyZW1lbnRzIHVybDogXFxcXFxcXCIgKyBjb2RlLnJlcXVpcmVtZW50c1tpXVxcXFxuICAgICAgICAgICAgICAgICAgKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgICAgdGhyb3cgXFxcXFxcXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFxcXFxcXFwiICtcXFxcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgIHRocm93IGU7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSBcXFxcXFxcInNjcmlwdFxcXFxcXFwiKSB7XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgaWYgKFxcXFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcXFxcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxcXFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFxcXFxcXFwic3RyaW5nXFxcXFxcXCIpXFxcXG4gICAgICAgICAgKSB7XFxcXG4gICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2RlLnJlcXVpcmVtZW50cykpIHtcXFxcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvZGUucmVxdWlyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgICBpbXBvcnRTY3JpcHRzKGNvZGUucmVxdWlyZW1lbnRzW2ldKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50cyk7XFxcXG4gICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgICAgdGhyb3cgXFxcXFxcXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFxcXFxcXFwiICtcXFxcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgIH1cXFxcbiAgICAgICAgICBldmFsKGNvZGUuY29udGVudCk7XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSwgZS5zdGFjayk7XFxcXG4gICAgICAgICAgdGhyb3cgZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgdGhyb3cgXFxcXFxcXCJ1bnN1cHBvcnRlZCBjb2RlIHR5cGUuXFxcXFxcXCI7XFxcXG4gICAgICB9XFxcXG4gICAgICBpZiAoY29kZS50eXBlID09PSBcXFxcXFxcInJlcXVpcmVtZW50c1xcXFxcXFwiKSB7XFxcXG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xcXFxuICAgICAgICAgIHR5cGU6IFxcXFxcXFwiY2FjaGVSZXF1aXJlbWVudHNcXFxcXFxcIixcXFxcbiAgICAgICAgICByZXF1aXJlbWVudHM6IGNvZGUucmVxdWlyZW1lbnRzXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgfVxcXFxuICAgIH1cXFxcbiAgfVxcXFxuICBjb25zdCBjb25maWcgPSB7XFxcXG4gICAgdHlwZTogXFxcXFxcXCJ3ZWItd29ya2VyXFxcXFxcXCIsXFxcXG4gICAgZGVkaWNhdGVkX3RocmVhZDogdHJ1ZSxcXFxcbiAgICBhbGxvd19leGVjdXRpb246IHRydWUsXFxcXG4gICAgbGFuZzogXFxcXFxcXCJqYXZhc2NyaXB0XFxcXFxcXCIsXFxcXG4gICAgYXBpX3ZlcnNpb246IF9ycGNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1tcXFxcXFxcIkFQSV9WRVJTSU9OXFxcXFxcXCJdXFxcXG4gIH07XFxcXG4gIGNvbnN0IGNvbm4gPSBuZXcgQ29ubmVjdGlvbihjb25maWcpO1xcXFxuICBjb25uLm9uKFxcXFxcXFwiY29ubmVjdFJQQ1xcXFxcXFwiLCBkYXRhID0+IHtcXFxcbiAgICBPYmplY3QoX3BsdWdpbkNvcmVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcXFxcXFxcImNvbm5lY3RSUENcXFxcXFxcIl0pKGNvbm4sIE9iamVjdC5hc3NpZ24oZGF0YS5jb25maWcsIGNvbmZpZykpO1xcXFxuICB9KTtcXFxcbiAgY29ubi5jb25uZWN0KCk7XFxcXG4gIHNlbGYucG9zdE1lc3NhZ2Uoe1xcXFxuICAgIHR5cGU6IFxcXFxcXFwid29ya2VyLXJlYWR5XFxcXFxcXCJcXFxcbiAgfSk7XFxcXG59KSgpO1xcXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdmNHeDFaMmx1TG5kbFluZHZjbXRsY2k1cWN5NXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwybHRhbTk1VWxCREx5NHZjM0pqTDNCc2RXZHBiaTUzWldKM2IzSnJaWEl1YW5NL09HTTFOQ0pkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpcGNiaUFxSUVOdmJuUmhhVzV6SUhSb1pTQnliM1YwYVc1bGN5QnNiMkZrWldRZ1lua2dkR2hsSUhCc2RXZHBiaUJYYjNKclpYSWdkVzVrWlhJZ2QyVmlMV0p5YjNkelpYSXVYRzRnS2x4dUlDb2dTVzVwZEdsaGJHbDZaWE1nZEdobElIZGxZaUJsYm5acGNtOXViV1Z1ZENCMlpYSnphVzl1SUc5bUlIUm9aU0J3YkdGMFptOXliUzFrWlhCbGJtUmxiblJjYmlBcUlHTnZibTVsWTNScGIyNGdiMkpxWldOMElHWnZjaUIwYUdVZ2NHeDFaMmx1SUhOcGRHVmNiaUFxTDF4dWFXMXdiM0owSUhzZ1kyOXVibVZqZEZKUVF5QjlJR1p5YjIwZ1hDSXVMM0JzZFdkcGJrTnZjbVV1YW5OY0lqdGNibWx0Y0c5eWRDQjdJRUZRU1Y5V1JWSlRTVTlPSUgwZ1puSnZiU0JjSWk0dmNuQmpMbXB6WENJN1hHNXBiWEJ2Y25RZ2V5Qk5aWE56WVdkbFJXMXBkSFJsY2l3Z2NtRnVaRWxrSUgwZ1puSnZiU0JjSWk0dmRYUnBiSE11YW5OY0lqdGNibHh1S0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0F2THlCdFlXdGxJSE4xY21VZ2RHaHBjeUJ5ZFc1eklHbHVjMmxrWlNCaElIZGxZbmR2Y210bGNseHVJQ0JwWmlBb1hHNGdJQ0FnZEhsd1pXOW1JRmR2Y210bGNrZHNiMkpoYkZOamIzQmxJRDA5UFNCY0luVnVaR1ZtYVc1bFpGd2lJSHg4WEc0Z0lDQWdJWE5sYkdZZ2ZIeGNiaUFnSUNBaEtITmxiR1lnYVc1emRHRnVZMlZ2WmlCWGIzSnJaWEpIYkc5aVlXeFRZMjl3WlNsY2JpQWdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lWR2hwY3lCelkzSnBjSFFnWTJGdUlHOXViSGtnYkc5aFpHVmtJR2x1SUdFZ2QyVmlkMjl5YTJWeVhDSXBPMXh1SUNCOVhHNGdJQzhxS2x4dUlDQWdLaUJEYjI1dVpXTjBhVzl1SUc5aWFtVmpkQ0J3Y205MmFXUmxaQ0IwYnlCMGFHVWdVbEJESUdOdmJuTjBjblZqZEc5eUxGeHVJQ0FnS2lCd2JIVm5hVzRnYzJsMFpTQnBiWEJzWlcxbGJuUmhkR2x2YmlCbWIzSWdkR2hsSUhkbFlpMWlZWE5sWkNCbGJuWnBjbTl1YldWdWRDNWNiaUFnSUNvZ1IyeHZZbUZzSUhkcGJHd2dZbVVnZEdobGJpQmpiR1ZoY21Wa0lIUnZJSEJ5WlhabGJuUWdaWGh3YjNOMWNtVWdhVzUwYnlCMGFHVmNiaUFnSUNvZ1YyOXlhMlZ5TENCemJ5QjNaU0J3ZFhRZ2RHaHBjeUJzYjJOaGJDQmpiMjV1WldOMGFXOXVJRzlpYW1WamRDQnBiblJ2SUdFZ1kyeHZjM1Z5WlZ4dUlDQWdLaTljYmlBZ1kyeGhjM01nUTI5dWJtVmpkR2x2YmlCbGVIUmxibVJ6SUUxbGMzTmhaMlZGYldsMGRHVnlJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhqYjI1bWFXY3BJSHRjYmlBZ0lDQWdJSE4xY0dWeUtHTnZibVpwWnlBbUppQmpiMjVtYVdjdVpHVmlkV2NwTzF4dUlDQWdJQ0FnZEdocGN5NWpiMjVtYVdjZ1BTQmpiMjVtYVdjZ2ZId2dlMzA3WEc0Z0lDQWdmVnh1SUNBZ0lHTnZibTVsWTNRb0tTQjdYRzRnSUNBZ0lDQnpaV3htTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKdFpYTnpZV2RsWENJc0lHVWdQVDRnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDltYVhKbEtHVXVaR0YwWVM1MGVYQmxMQ0JsTG1SaGRHRXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0IwYUdsekxtVnRhWFFvZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUJjSW1sdWFYUnBZV3hwZW1Wa1hDSXNYRzRnSUNBZ0lDQWdJR052Ym1acFp6b2dkR2hwY3k1amIyNW1hV2RjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lDQmthWE5qYjI1dVpXTjBLQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZabWx5WlNoY0ltSmxabTl5WlVScGMyTnZibTVsWTNSY0lpazdYRzRnSUNBZ0lDQnpaV3htTG1Oc2IzTmxLQ2s3WEc0Z0lDQWdJQ0IwYUdsekxsOW1hWEpsS0Z3aVpHbHpZMjl1Ym1WamRHVmtYQ0lwTzF4dUlDQWdJSDFjYmlBZ0lDQmxiV2wwS0dSaGRHRXBJSHRjYmlBZ0lDQWdJR3hsZENCMGNtRnVjMlpsY21GaWJHVnpJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnYVdZZ0tHUmhkR0V1WDE5MGNtRnVjMlpsY21GaWJHVnpYMThwSUh0Y2JpQWdJQ0FnSUNBZ2RISmhibk5tWlhKaFlteGxjeUE5SUdSaGRHRXVYMTkwY21GdWMyWmxjbUZpYkdWelgxODdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQmtZWFJoTGw5ZmRISmhibk5tWlhKaFlteGxjMTlmTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYzJWc1ppNXdiM04wVFdWemMyRm5aU2hrWVhSaExDQjBjbUZ1YzJabGNtRmliR1Z6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdZWE41Ym1NZ1pYaGxZM1YwWlNoamIyUmxLU0I3WEc0Z0lDQWdJQ0JwWmlBb1kyOWtaUzUwZVhCbElEMDlQU0JjSW5KbGNYVnBjbVZ0Wlc1MGMxd2lLU0I3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5a1pTNXlaWEYxYVhKbGJXVnVkSE1nSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ2hCY25KaGVTNXBjMEZ5Y21GNUtHTnZaR1V1Y21WeGRXbHlaVzFsYm5SektTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ1kyOWtaUzV5WlhGMWFYSmxiV1Z1ZEhNZ1BUMDlJRndpYzNSeWFXNW5YQ0lwWEc0Z0lDQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa29ZMjlrWlM1eVpYRjFhWEpsYldWdWRITXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5a1pTNXlaWEYxYVhKbGJXVnVkSE1nUFNCYlkyOWtaUzV5WlhGMWFYSmxiV1Z1ZEhOZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1kyOWtaUzV5WlhGMWFYSmxiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMlJsTG5KbGNYVnBjbVZ0Wlc1MGMxdHBYUzUwYjB4dmQyVnlRMkZ6WlNncExtVnVaSE5YYVhSb0tGd2lMbU56YzF3aUtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5a1pTNXlaWEYxYVhKbGJXVnVkSE5iYVYwdWMzUmhjblJ6VjJsMGFDaGNJbU56Y3pwY0lpbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRndpZFc1aFlteGxJSFJ2SUdsdGNHOXlkQ0JqYzNNZ2FXNGdZU0IzWldKM2IzSnJaWEpjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlrWlM1eVpYRjFhWEpsYldWdWRITmJhVjB1ZEc5TWIzZGxja05oYzJVb0tTNWxibVJ6VjJsMGFDaGNJaTVxYzF3aUtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5a1pTNXlaWEYxYVhKbGJXVnVkSE5iYVYwdWMzUmhjblJ6VjJsMGFDaGNJbXB6T2x3aUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZaR1V1Y21WeGRXbHlaVzFsYm5SelcybGRMbk4wWVhKMGMxZHBkR2dvWENKcWN6cGNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlrWlM1eVpYRjFhWEpsYldWdWRITmJhVjBnUFNCamIyUmxMbkpsY1hWcGNtVnRaVzUwYzF0cFhTNXpiR2xqWlNnektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdGNHOXlkRk5qY21sd2RITW9ZMjlrWlM1eVpYRjFhWEpsYldWdWRITmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyOWtaUzV5WlhGMWFYSmxiV1Z1ZEhOYmFWMHVjM1JoY25SelYybDBhQ2hjSW1oMGRIQmNJaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHRjRzl5ZEZOamNtbHdkSE1vWTI5a1pTNXlaWEYxYVhKbGJXVnVkSE5iYVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjlrWlM1eVpYRjFhWEpsYldWdWRITmJhVjB1YzNSaGNuUnpWMmwwYUNoY0ltTmhZMmhsT2x3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5cFoyNXZjbVVnWTJGamFHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGd2lWVzV3Y205alpYTnpaV1FnY21WeGRXbHlaVzFsYm5SeklIVnliRG9nWENJZ0t5QmpiMlJsTG5KbGNYVnBjbVZ0Wlc1MGMxdHBYVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dYQ0ptWVdsc1pXUWdkRzhnYVcxd2IzSjBJSEpsY1hWcGNtVmtJSE5qY21sd2RITTZJRndpSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxMbkpsY1hWcGNtVnRaVzUwY3k1MGIxTjBjbWx1WnlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjlrWlM1MGVYQmxJRDA5UFNCY0luTmpjbWx3ZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMjlrWlM1eVpYRjFhWEpsYldWdWRITWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDaEJjbkpoZVM1cGMwRnljbUY1S0dOdlpHVXVjbVZ4ZFdseVpXMWxiblJ6S1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxiMllnWTI5a1pTNXlaWEYxYVhKbGJXVnVkSE1nUFQwOUlGd2ljM1J5YVc1blhDSXBYRzRnSUNBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoamIyUmxMbkpsY1hWcGNtVnRaVzUwY3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR052WkdVdWNtVnhkV2x5WlcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiWEJ2Y25SVFkzSnBjSFJ6S0dOdlpHVXVjbVZ4ZFdseVpXMWxiblJ6VzJsZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXMXdiM0owVTJOeWFYQjBjeWhqYjJSbExuSmxjWFZwY21WdFpXNTBjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1hDSm1ZV2xzWldRZ2RHOGdhVzF3YjNKMElISmxjWFZwY21Wa0lITmpjbWx3ZEhNNklGd2lJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJSbExuSmxjWFZwY21WdFpXNTBjeTUwYjFOMGNtbHVaeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQmxkbUZzS0dOdlpHVXVZMjl1ZEdWdWRDazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dVdWJXVnpjMkZuWlN3Z1pTNXpkR0ZqYXlrN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1pUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1hDSjFibk4xY0hCdmNuUmxaQ0JqYjJSbElIUjVjR1V1WENJN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9ZMjlrWlM1MGVYQmxJRDA5UFNCY0luSmxjWFZwY21WdFpXNTBjMXdpS1NCN1hHNGdJQ0FnSUNBZ0lITmxiR1l1Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklGd2lZMkZqYUdWU1pYRjFhWEpsYldWdWRITmNJaXhjYmlBZ0lDQWdJQ0FnSUNCeVpYRjFhWEpsYldWdWRITTZJR052WkdVdWNtVnhkV2x5WlcxbGJuUnpYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JqYjI1emRDQmpiMjVtYVdjZ1BTQjdYRzRnSUNBZ2RIbHdaVG9nWENKM1pXSXRkMjl5YTJWeVhDSXNYRzRnSUNBZ1pHVmthV05oZEdWa1gzUm9jbVZoWkRvZ2RISjFaU3hjYmlBZ0lDQmhiR3h2ZDE5bGVHVmpkWFJwYjI0NklIUnlkV1VzWEc0Z0lDQWdiR0Z1WnpvZ1hDSnFZWFpoYzJOeWFYQjBYQ0lzWEc0Z0lDQWdZWEJwWDNabGNuTnBiMjQ2SUVGUVNWOVdSVkpUU1U5T1hHNGdJSDA3WEc0Z0lHTnZibk4wSUdOdmJtNGdQU0J1WlhjZ1EyOXVibVZqZEdsdmJpaGpiMjVtYVdjcE8xeHVJQ0JqYjI1dUxtOXVLRndpWTI5dWJtVmpkRkpRUTF3aUxDQmtZWFJoSUQwK0lIdGNiaUFnSUNCamIyNXVaV04wVWxCREtHTnZibTRzSUU5aWFtVmpkQzVoYzNOcFoyNG9aR0YwWVM1amIyNW1hV2NzSUdOdmJtWnBaeWtwTzF4dUlDQjlLVHRjYmlBZ1kyOXViaTVqYjI1dVpXTjBLQ2s3WEc0Z0lITmxiR1l1Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUhSNWNHVTZJRndpZDI5eWEyVnlMWEpsWVdSNVhDSmNiaUFnZlNrN1hHNTlLU2dwTzF4dUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXFxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy9wbHVnaW4ud2Vid29ya2VyLmpzXFxcXG5cXFwiKTtcXG5cXG4vKioqLyB9KSxcXG5cXG4vKioqLyBcXFwiLi9zcmMvcGx1Z2luQ29yZS5qc1xcXCI6XFxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxcXFxuICAhKioqIC4vc3JjL3BsdWdpbkNvcmUuanMgKioqIVxcbiAgXFxcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogY29ubmVjdFJQQyAqL1xcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcXG5cXG5cXFwidXNlIHN0cmljdFxcXCI7XFxuZXZhbChcXFwiX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcXFxuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcXFxcXFxcImNvbm5lY3RSUENcXFxcXFxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBjb25uZWN0UlBDOyB9KTtcXFxcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcnBjX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JwYy5qcyAqLyBcXFxcXFxcIi4vc3JjL3JwYy5qc1xcXFxcXFwiKTtcXFxcbi8qKlxcXFxuICogQ29yZSBwbHVnaW4gc2NyaXB0IGxvYWRlZCBpbnRvIHRoZSBwbHVnaW4gcHJvY2Vzcy90aHJlYWQuXFxcXG4gKlxcXFxuICogSW5pdGlhbGl6ZXMgdGhlIHBsdWdpbi1zaXRlIEFQSSBnbG9iYWwgbWV0aG9kcy5cXFxcbiAqL1xcXFxuXFxcXG5mdW5jdGlvbiBjb25uZWN0UlBDKGNvbm5lY3Rpb24sIGNvbmZpZykge1xcXFxuICBjb25maWcgPSBjb25maWcgfHwge307XFxcXG4gIGNvbnN0IGNvZGVjcyA9IHt9O1xcXFxuICBjb25zdCBycGMgPSBuZXcgX3JwY19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1xcXFxcXFwiUlBDXFxcXFxcXCJdKGNvbm5lY3Rpb24sIGNvbmZpZywgY29kZWNzKTtcXFxcbiAgcnBjLm9uKFxcXFxcXFwiZ2V0SW50ZXJmYWNlXFxcXFxcXCIsIGZ1bmN0aW9uICgpIHtcXFxcbiAgICBsYXVuY2hDb25uZWN0ZWQoKTtcXFxcbiAgfSk7XFxcXG4gIHJwYy5vbihcXFxcXFxcInJlbW90ZVJlYWR5XFxcXFxcXCIsIGZ1bmN0aW9uICgpIHtcXFxcbiAgICBjb25zdCBhcGkgPSBycGMuZ2V0UmVtb3RlKCkgfHwge307XFxcXG5cXFxcbiAgICBpZiAoYXBpLmV4cG9ydCkge1xcXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwiYGV4cG9ydGAgaXMgYSByZXNlcnZlZCBmdW5jdGlvbiBuYW1lXFxcXFxcXCIpO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGlmIChhcGkub25sb2FkKSB7XFxcXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXFxcXFxcXCJgb25sb2FkYCBpcyBhIHJlc2VydmVkIGZ1bmN0aW9uIG5hbWVcXFxcXFxcIik7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgaWYgKGFwaS5kaXNwb3NlKSB7XFxcXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXFxcXFxcXCJgZGlzcG9zZWAgaXMgYSByZXNlcnZlZCBmdW5jdGlvbiBuYW1lXFxcXFxcXCIpO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGFwaS5yZWdpc3RlckNvZGVjID0gZnVuY3Rpb24gKGNvbmZpZykge1xcXFxuICAgICAgaWYgKCFjb25maWdbXFxcXFxcXCJuYW1lXFxcXFxcXCJdIHx8ICFjb25maWdbXFxcXFxcXCJlbmNvZGVyXFxcXFxcXCJdICYmICFjb25maWdbXFxcXFxcXCJkZWNvZGVyXFxcXFxcXCJdKSB7XFxcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcIkludmFsaWQgY29kZWMgZm9ybWF0LCBwbGVhc2UgbWFrZSBzdXJlIHlvdSBwcm92aWRlIGEgbmFtZSwgdHlwZSwgZW5jb2RlciBhbmQgZGVjb2Rlci5cXFxcXFxcIik7XFxcXG4gICAgICB9IGVsc2Uge1xcXFxuICAgICAgICBpZiAoY29uZmlnLnR5cGUpIHtcXFxcbiAgICAgICAgICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKGNvZGVjcykpIHtcXFxcbiAgICAgICAgICAgIGlmIChjb2RlY3Nba10udHlwZSA9PT0gY29uZmlnLnR5cGUgfHwgayA9PT0gY29uZmlnLm5hbWUpIHtcXFxcbiAgICAgICAgICAgICAgZGVsZXRlIGNvZGVjc1trXTtcXFxcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxcXFxcXFwiUmVtb3ZlIGR1cGxpY2F0ZWQgY29kZWM6IFxcXFxcXFwiICsgayk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgY29kZWNzW2NvbmZpZ1tcXFxcXFxcIm5hbWVcXFxcXFxcIl1dID0gY29uZmlnO1xcXFxuICAgICAgfVxcXFxuICAgIH07XFxcXG5cXFxcbiAgICBhcGkuZGlzcG9zZU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcXFxcbiAgICAgIHJwYy5kaXNwb3NlT2JqZWN0KG9iaik7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGFwaS5leHBvcnQgPSBmdW5jdGlvbiAoX2ludGVyZmFjZSwgY29uZmlnKSB7XFxcXG4gICAgICBycGMuc2V0SW50ZXJmYWNlKF9pbnRlcmZhY2UsIGNvbmZpZyk7XFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGFwaS5vbkxvYWQgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xcXFxuICAgICAgaGFuZGxlciA9IGNoZWNrSGFuZGxlcihoYW5kbGVyKTtcXFxcblxcXFxuICAgICAgaWYgKGNvbm5lY3RlZCkge1xcXFxuICAgICAgICBoYW5kbGVyKCk7XFxcXG4gICAgICB9IGVsc2Uge1xcXFxuICAgICAgICBjb25uZWN0ZWRIYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xcXFxuICAgICAgfVxcXFxuICAgIH07XFxcXG5cXFxcbiAgICBhcGkuZGlzcG9zZSA9IGZ1bmN0aW9uIChfaW50ZXJmYWNlKSB7XFxcXG4gICAgICBycGMuZGlzY29ubmVjdCgpO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICBpZiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSBcXFxcXFxcInVuZGVmaW5lZFxcXFxcXFwiICYmIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkge1xcXFxuICAgICAgc2VsZi5hcGkgPSBhcGk7XFxcXG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcXFxcbiAgICAgICAgdHlwZTogXFxcXFxcXCJpbWpveV9yZW1vdGVfYXBpX3JlYWR5XFxcXFxcXCJcXFxcbiAgICAgIH0pO1xcXFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdykge1xcXFxuICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFxcXFxcXFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVxcXFxcXFwiLCB7XFxcXG4gICAgICAgIGRldGFpbDogYXBpXFxcXG4gICAgICB9KSk7XFxcXG4gICAgfVxcXFxuICB9KTtcXFxcbiAgbGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xcXFxuICBjb25zdCBjb25uZWN0ZWRIYW5kbGVycyA9IFtdO1xcXFxuXFxcXG4gIGNvbnN0IGxhdW5jaENvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcXFxcbiAgICBpZiAoIWNvbm5lY3RlZCkge1xcXFxuICAgICAgY29ubmVjdGVkID0gdHJ1ZTtcXFxcbiAgICAgIGxldCBoYW5kbGVyO1xcXFxuXFxcXG4gICAgICB3aGlsZSAoaGFuZGxlciA9IGNvbm5lY3RlZEhhbmRsZXJzLnBvcCgpKSB7XFxcXG4gICAgICAgIGhhbmRsZXIoKTtcXFxcbiAgICAgIH1cXFxcbiAgICB9XFxcXG4gIH07XFxcXG5cXFxcbiAgY29uc3QgY2hlY2tIYW5kbGVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcXFxcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGhhbmRsZXI7XFxcXG5cXFxcbiAgICBpZiAodHlwZSAhPT0gXFxcXFxcXCJmdW5jdGlvblxcXFxcXFwiKSB7XFxcXG4gICAgICBjb25zdCBtc2cgPSBcXFxcXFxcIkEgZnVuY3Rpb24gbWF5IG9ubHkgYmUgc3Vic3JpYmVkIHRvIHRoZSBldmVudCwgXFxcXFxcXCIgKyB0eXBlICsgXFxcXFxcXCIgd2FzIHByb3ZpZGVkIGluc3RlYWRcXFxcXFxcIjtcXFxcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIHJldHVybiBoYW5kbGVyO1xcXFxuICB9O1xcXFxuXFxcXG4gIHJldHVybiBycGM7XFxcXG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdmNHeDFaMmx1UTI5eVpTNXFjeTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMmx0YW05NVVsQkRMeTR2YzNKakwzQnNkV2RwYmtOdmNtVXVhbk0vWVRneE5DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Y21VZ2NHeDFaMmx1SUhOamNtbHdkQ0JzYjJGa1pXUWdhVzUwYnlCMGFHVWdjR3gxWjJsdUlIQnliMk5sYzNNdmRHaHlaV0ZrTGx4dUlDcGNiaUFxSUVsdWFYUnBZV3hwZW1WeklIUm9aU0J3YkhWbmFXNHRjMmwwWlNCQlVFa2daMnh2WW1Gc0lHMWxkR2h2WkhNdVhHNGdLaTljYm1sdGNHOXlkQ0I3SUZKUVF5QjlJR1p5YjIwZ1hDSXVMM0p3WXk1cWMxd2lPMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTI5dWJtVmpkRkpRUXloamIyNXVaV04wYVc5dUxDQmpiMjVtYVdjcElIdGNiaUFnWTI5dVptbG5JRDBnWTI5dVptbG5JSHg4SUh0OU8xeHVJQ0JqYjI1emRDQmpiMlJsWTNNZ1BTQjdmVHRjYmx4dUlDQmpiMjV6ZENCeWNHTWdQU0J1WlhjZ1VsQkRLR052Ym01bFkzUnBiMjRzSUdOdmJtWnBaeXdnWTI5a1pXTnpLVHRjYmlBZ2NuQmpMbTl1S0Z3aVoyVjBTVzUwWlhKbVlXTmxYQ0lzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUd4aGRXNWphRU52Ym01bFkzUmxaQ2dwTzF4dUlDQjlLVHRjYmx4dUlDQnljR011YjI0b1hDSnlaVzF2ZEdWU1pXRmtlVndpTENCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCamIyNXpkQ0JoY0drZ1BTQnljR011WjJWMFVtVnRiM1JsS0NrZ2ZId2dlMzA3WEc0Z0lDQWdhV1lnS0dGd2FTNWxlSEJ2Y25RcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltQmxlSEJ2Y25SZ0lHbHpJR0VnY21WelpYSjJaV1FnWm5WdVkzUnBiMjRnYm1GdFpWd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR0Z3YVM1dmJteHZZV1FwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1CdmJteHZZV1JnSUdseklHRWdjbVZ6WlhKMlpXUWdablZ1WTNScGIyNGdibUZ0WlZ3aUtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHRndhUzVrYVhOd2IzTmxLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pnWkdsemNHOXpaV0FnYVhNZ1lTQnlaWE5sY25abFpDQm1kVzVqZEdsdmJpQnVZVzFsWENJcE8xeHVJQ0FnSUgxY2JpQWdJQ0JoY0drdWNtVm5hWE4wWlhKRGIyUmxZeUE5SUdaMWJtTjBhVzl1S0dOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnYVdZZ0tDRmpiMjVtYVdkYlhDSnVZVzFsWENKZElIeDhJQ2doWTI5dVptbG5XMXdpWlc1amIyUmxjbHdpWFNBbUppQWhZMjl1Wm1sblcxd2laR1ZqYjJSbGNsd2lYU2twSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lGd2lTVzUyWVd4cFpDQmpiMlJsWXlCbWIzSnRZWFFzSUhCc1pXRnpaU0J0WVd0bElITjFjbVVnZVc5MUlIQnliM1pwWkdVZ1lTQnVZVzFsTENCMGVYQmxMQ0JsYm1OdlpHVnlJR0Z1WkNCa1pXTnZaR1Z5TGx3aVhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dVptbG5MblI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JySUc5bUlFOWlhbVZqZEM1clpYbHpLR052WkdWamN5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqYjJSbFkzTmJhMTB1ZEhsd1pTQTlQVDBnWTI5dVptbG5MblI1Y0dVZ2ZId2dheUE5UFQwZ1kyOXVabWxuTG01aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHTnZaR1ZqYzF0clhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRndpVW1WdGIzWmxJR1IxY0d4cFkyRjBaV1FnWTI5a1pXTTZJRndpSUNzZ2F5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdlpHVmpjMXRqYjI1bWFXZGJYQ0p1WVcxbFhDSmRYU0E5SUdOdmJtWnBaenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNBZ0lHRndhUzVrYVhOd2IzTmxUMkpxWldOMElEMGdablZ1WTNScGIyNG9iMkpxS1NCN1hHNGdJQ0FnSUNCeWNHTXVaR2x6Y0c5elpVOWlhbVZqZENodlltb3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ1lYQnBMbVY0Y0c5eWRDQTlJR1oxYm1OMGFXOXVLRjlwYm5SbGNtWmhZMlVzSUdOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnY25CakxuTmxkRWx1ZEdWeVptRmpaU2hmYVc1MFpYSm1ZV05sTENCamIyNW1hV2NwTzF4dUlDQWdJSDA3WEc0Z0lDQWdZWEJwTG05dVRHOWhaQ0E5SUdaMWJtTjBhVzl1S0doaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUdoaGJtUnNaWElnUFNCamFHVmphMGhoYm1Sc1pYSW9hR0Z1Wkd4bGNpazdYRzRnSUNBZ0lDQnBaaUFvWTI5dWJtVmpkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lHaGhibVJzWlhJb0tUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHTnZibTVsWTNSbFpFaGhibVJzWlhKekxuQjFjMmdvYUdGdVpHeGxjaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ0lDQmhjR2t1WkdsemNHOXpaU0E5SUdaMWJtTjBhVzl1S0Y5cGJuUmxjbVpoWTJVcElIdGNiaUFnSUNBZ0lISndZeTVrYVhOamIyNXVaV04wS0NrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lIUjVjR1Z2WmlCWGIzSnJaWEpIYkc5aVlXeFRZMjl3WlNBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUpseHVJQ0FnSUNBZ2MyVnNaaUJwYm5OMFlXNWpaVzltSUZkdmNtdGxja2RzYjJKaGJGTmpiM0JsWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0J6Wld4bUxtRndhU0E5SUdGd2FUdGNiaUFnSUNBZ0lITmxiR1l1Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCY0ltbHRhbTk1WDNKbGJXOTBaVjloY0dsZmNtVmhaSGxjSWx4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnZDJsdVpHOTNLU0I3WEc0Z0lDQWdJQ0IzYVc1a2IzY3VaR2x6Y0dGMFkyaEZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ2JtVjNJRU4xYzNSdmJVVjJaVzUwS0Z3aWFXMXFiM2xmY21WdGIzUmxYMkZ3YVY5eVpXRmtlVndpTENCN0lHUmxkR0ZwYkRvZ1lYQnBJSDBwWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzVjYmlBZ2JHVjBJR052Ym01bFkzUmxaQ0E5SUdaaGJITmxPMXh1SUNCamIyNXpkQ0JqYjI1dVpXTjBaV1JJWVc1a2JHVnljeUE5SUZ0ZE8xeHVYRzRnSUdOdmJuTjBJR3hoZFc1amFFTnZibTVsWTNSbFpDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJR2xtSUNnaFkyOXVibVZqZEdWa0tTQjdYRzRnSUNBZ0lDQmpiMjV1WldOMFpXUWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQnNaWFFnYUdGdVpHeGxjanRjYmlBZ0lDQWdJSGRvYVd4bElDZ29hR0Z1Wkd4bGNpQTlJR052Ym01bFkzUmxaRWhoYm1Sc1pYSnpMbkJ2Y0NncEtTa2dlMXh1SUNBZ0lDQWdJQ0JvWVc1a2JHVnlLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR05vWldOclNHRnVaR3hsY2lBOUlHWjFibU4wYVc5dUtHaGhibVJzWlhJcElIdGNiaUFnSUNCamIyNXpkQ0IwZVhCbElEMGdkSGx3Wlc5bUlHaGhibVJzWlhJN1hHNGdJQ0FnYVdZZ0tIUjVjR1VnSVQwOUlGd2lablZ1WTNScGIyNWNJaWtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdiWE5uSUQxY2JpQWdJQ0FnSUNBZ1hDSkJJR1oxYm1OMGFXOXVJRzFoZVNCdmJteDVJR0psSUhOMVluTnlhV0psWkNCMGJ5QjBhR1VnWlhabGJuUXNJRndpSUN0Y2JpQWdJQ0FnSUNBZ2RIbHdaU0FyWEc0Z0lDQWdJQ0FnSUZ3aUlIZGhjeUJ3Y205MmFXUmxaQ0JwYm5OMFpXRmtYQ0k3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9iWE5uS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHaGhibVJzWlhJN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlISndZenRjYm4xY2JpSmRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN096czdPMEZCUzBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJSRUU3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVsQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxcXFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLy4vc3JjL3BsdWdpbkNvcmUuanNcXFxcblxcXCIpO1xcblxcbi8qKiovIH0pLFxcblxcbi8qKiovIFxcXCIuL3NyYy9ycGMuanNcXFwiOlxcbi8qISoqKioqKioqKioqKioqKioqKioqISpcXFxcXFxuICAhKioqIC4vc3JjL3JwYy5qcyAqKiohXFxuICBcXFxcKioqKioqKioqKioqKioqKioqKiovXFxuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IEFQSV9WRVJTSU9OLCBSUEMgKi9cXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XFxuXFxuXFxcInVzZSBzdHJpY3RcXFwiO1xcbmV2YWwoXFxcIl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcXFxcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXFxcXFxcXCJBUElfVkVSU0lPTlxcXFxcXFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEFQSV9WRVJTSU9OOyB9KTtcXFxcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXFxcXFxcXCJSUENcXFxcXFxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBSUEM7IH0pO1xcXFxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscy5qcyAqLyBcXFxcXFxcIi4vc3JjL3V0aWxzLmpzXFxcXFxcXCIpO1xcXFxuLyoqXFxcXG4gKiBDb250YWlucyB0aGUgUlBDIG9iamVjdCB1c2VkIGJvdGggYnkgdGhlIGFwcGxpY2F0aW9uXFxcXG4gKiBzaXRlLCBhbmQgYnkgZWFjaCBwbHVnaW5cXFxcbiAqL1xcXFxuXFxcXG5jb25zdCBBUElfVkVSU0lPTiA9IFxcXFxcXFwiMC4yLjNcXFxcXFxcIjtcXFxcbmNvbnN0IEFycmF5QnVmZmVyVmlldyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IFVpbnQ4QXJyYXkoKSkpLmNvbnN0cnVjdG9yO1xcXFxuXFxcXG5mdW5jdGlvbiBfYXBwZW5kQnVmZmVyKGJ1ZmZlcjEsIGJ1ZmZlcjIpIHtcXFxcbiAgY29uc3QgdG1wID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyMS5ieXRlTGVuZ3RoICsgYnVmZmVyMi5ieXRlTGVuZ3RoKTtcXFxcbiAgdG1wLnNldChuZXcgVWludDhBcnJheShidWZmZXIxKSwgMCk7XFxcXG4gIHRtcC5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyMiksIGJ1ZmZlcjEuYnl0ZUxlbmd0aCk7XFxcXG4gIHJldHVybiB0bXAuYnVmZmVyO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBnZXRLZXlCeVZhbHVlKG9iamVjdCwgdmFsdWUpIHtcXFxcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkuZmluZChrZXkgPT4gb2JqZWN0W2tleV0gPT09IHZhbHVlKTtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gaW5kZXhPYmplY3Qob2JqLCBpcykge1xcXFxuICBpZiAodHlwZW9mIGlzID09IFxcXFxcXFwic3RyaW5nXFxcXFxcXCIpIHJldHVybiBpbmRleE9iamVjdChvYmosIGlzLnNwbGl0KFxcXFxcXFwiLlxcXFxcXFwiKSk7ZWxzZSBpZiAoaXMubGVuZ3RoID09IDApIHJldHVybiBvYmo7ZWxzZSByZXR1cm4gaW5kZXhPYmplY3Qob2JqW2lzWzBdXSwgaXMuc2xpY2UoMSkpO1xcXFxufVxcXFxuLyoqXFxcXG4gKiBSUEMgb2JqZWN0IHJlcHJlc2VudHMgYSBzaW5nbGUgc2l0ZSBpbiB0aGVcXFxcbiAqIGNvbW11bmljYXRpb24gcHJvdG9jb2wgYmV0d2VlbiB0aGUgYXBwbGljYXRpb24gYW5kIHRoZSBwbHVnaW5cXFxcbiAqXFxcXG4gKiBAcGFyYW0ge09iamVjdH0gY29ubmVjdGlvbiBhIHNwZWNpYWwgb2JqZWN0IGFsbG93aW5nIHRvIHNlbmRcXFxcbiAqIGFuZCByZWNlaXZlIG1lc3NhZ2VzIGZyb20gdGhlIG9wcG9zaXRlIHNpdGUgKGJhc2ljYWxseSBpdFxcXFxuICogc2hvdWxkIG9ubHkgcHJvdmlkZSBzZW5kKCkgYW5kIG9uTWVzc2FnZSgpIG1ldGhvZHMpXFxcXG4gKi9cXFxcblxcXFxuXFxcXG5jbGFzcyBSUEMgZXh0ZW5kcyBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcXFxcXFxcIk1lc3NhZ2VFbWl0dGVyXFxcXFxcXCJdIHtcXFxcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbiwgY29uZmlnLCBjb2RlY3MpIHtcXFxcbiAgICBzdXBlcihjb25maWcgJiYgY29uZmlnLmRlYnVnKTtcXFxcbiAgICB0aGlzLl9jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcXFxcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcXFxcbiAgICB0aGlzLl9jb2RlY3MgPSBjb2RlY3MgfHwge307XFxcXG4gICAgdGhpcy5fb2JqZWN0X3N0b3JlID0ge307XFxcXG4gICAgdGhpcy5fbWV0aG9kX3dlYWttYXAgPSBuZXcgV2Vha01hcCgpO1xcXFxuICAgIHRoaXMuX29iamVjdF93ZWFrbWFwID0gbmV3IFdlYWtNYXAoKTtcXFxcbiAgICB0aGlzLl9sb2NhbF9hcGkgPSBudWxsOyAvLyBtYWtlIHN1cmUgdGhlcmUgaXMgYW4gZXhlY3V0ZSBmdW5jdGlvblxcXFxuXFxcXG4gICAgY29uc3QgbmFtZSA9IHRoaXMuY29uZmlnLm5hbWU7XFxcXG5cXFxcbiAgICB0aGlzLl9jb25uZWN0aW9uLmV4ZWN1dGUgPSB0aGlzLl9jb25uZWN0aW9uLmV4ZWN1dGUgfHwgZnVuY3Rpb24gKCkge1xcXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb25uZWN0aW9uLmV4ZWN1dGUgbm90IGltcGxlbWVudGVkIChpbiBcXFxcXFxcIiR7bmFtZX1cXFxcXFxcIilgKTtcXFxcbiAgICB9O1xcXFxuXFxcXG4gICAgdGhpcy5fc3RvcmUgPSBuZXcgUmVmZXJlbmNlU3RvcmUoKTtcXFxcbiAgICB0aGlzLl9tZXRob2RfcmVmcyA9IG5ldyBSZWZlcmVuY2VTdG9yZSgpO1xcXFxuXFxcXG4gICAgdGhpcy5fbWV0aG9kX3JlZnMub25SZWFkeSgoKSA9PiB7XFxcXG4gICAgICB0aGlzLl9maXJlKFxcXFxcXFwicmVtb3RlSWRsZVxcXFxcXFwiKTtcXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIHRoaXMuX21ldGhvZF9yZWZzLm9uQnVzeSgoKSA9PiB7XFxcXG4gICAgICB0aGlzLl9maXJlKFxcXFxcXFwicmVtb3RlQnVzeVxcXFxcXFwiKTtcXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIHRoaXMuX3NldHVwTWVzc2FnZUhhbmxkZXJzKCk7XFxcXG4gIH1cXFxcblxcXFxuICBpbml0KCkge1xcXFxuICAgIHRoaXMuX2Nvbm5lY3Rpb24uZW1pdCh7XFxcXG4gICAgICB0eXBlOiBcXFxcXFxcImluaXRpYWxpemVkXFxcXFxcXCIsXFxcXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxcXFxuICAgICAgcGVlcl9pZDogdGhpcy5fY29ubmVjdGlvbi5wZWVyX2lkXFxcXG4gICAgfSk7XFxcXG4gIH1cXFxcbiAgLyoqXFxcXG4gICAqIFNldCBhIGhhbmRsZXIgdG8gYmUgY2FsbGVkIHdoZW4gcmVjZWl2ZWQgYSByZXNwb25jZSBmcm9tIHRoZVxcXFxuICAgKiByZW1vdGUgc2l0ZSByZXBvcnRpbmcgdGhhdCB0aGUgcHJldmlvdXNseSBwcm92aWRlZCBpbnRlcmZhY2VcXFxcbiAgICogaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHNldCBhcyByZW1vdGUgZm9yIHRoYXQgc2l0ZVxcXFxuICAgKlxcXFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXFxcXG4gICAqL1xcXFxuXFxcXG5cXFxcbiAgZ2V0UmVtb3RlQ2FsbFN0YWNrKCkge1xcXFxuICAgIHJldHVybiB0aGlzLl9tZXRob2RfcmVmcy5nZXRTdGFjaygpO1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBzZXQgb2YgcmVtb3RlIGludGVyZmFjZSBtZXRob2RzXFxcXG4gICAqL1xcXFxuXFxcXG5cXFxcbiAgZ2V0UmVtb3RlKCkge1xcXFxuICAgIHJldHVybiB0aGlzLl9yZW1vdGVfaW50ZXJmYWNlO1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBTZXRzIHRoZSBpbnRlcmZhY2Ugb2YgdGhpcyBzaXRlIG1ha2luZyBpdCBhdmFpbGFibGUgdG8gdGhlXFxcXG4gICAqIHJlbW90ZSBzaXRlIGJ5IHNlbmRpbmcgYSBtZXNzYWdlIHdpdGggYSBzZXQgb2YgbWV0aG9kcyBuYW1lc1xcXFxuICAgKlxcXFxuICAgKiBAcGFyYW0ge09iamVjdH0gX2ludGVyZmFjZSB0byBzZXRcXFxcbiAgICovXFxcXG5cXFxcblxcXFxuICBzZXRJbnRlcmZhY2UoX2ludGVyZmFjZSwgY29uZmlnKSB7XFxcXG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xcXFxuICAgIHRoaXMuY29uZmlnLm5hbWUgPSBjb25maWcubmFtZSB8fCB0aGlzLmNvbmZpZy5uYW1lO1xcXFxuICAgIHRoaXMuY29uZmlnLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uIHx8IHRoaXMuY29uZmlnLmRlc2NyaXB0aW9uO1xcXFxuXFxcXG4gICAgaWYgKHRoaXMuY29uZmlnLmZvcndhcmRpbmdfZnVuY3Rpb25zKSB7XFxcXG4gICAgICBmb3IgKGxldCBmdW5jX25hbWUgb2YgdGhpcy5jb25maWcuZm9yd2FyZGluZ19mdW5jdGlvbnMpIHtcXFxcbiAgICAgICAgY29uc3QgX3JlbW90ZSA9IHRoaXMuX3JlbW90ZV9pbnRlcmZhY2U7XFxcXG5cXFxcbiAgICAgICAgaWYgKF9yZW1vdGVbZnVuY19uYW1lXSkge1xcXFxuICAgICAgICAgIGlmIChfaW50ZXJmYWNlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcXFxcbiAgICAgICAgICAgIGlmICghX2ludGVyZmFjZVtmdW5jX25hbWVdKSB7XFxcXG4gICAgICAgICAgICAgIF9pbnRlcmZhY2VbZnVuY19uYW1lXSA9ICguLi5hcmdzKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgX3JlbW90ZVtmdW5jX25hbWVdKC4uLmFyZ3MpO1xcXFxuICAgICAgICAgICAgICB9O1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgIH0gZWxzZSBpZiAoX2ludGVyZmFjZS5jb25zdHJ1Y3Rvci5jb25zdHJ1Y3RvciA9PT0gRnVuY3Rpb24pIHtcXFxcbiAgICAgICAgICAgIGlmICghX2ludGVyZmFjZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbZnVuY19uYW1lXSkge1xcXFxuICAgICAgICAgICAgICBfaW50ZXJmYWNlLmNvbnN0cnVjdG9yLnByb3RvdHlwZVtmdW5jX25hbWVdID0gKC4uLmFyZ3MpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBfcmVtb3RlW2Z1bmNfbmFtZV0oLi4uYXJncyk7XFxcXG4gICAgICAgICAgICAgIH07XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgICB9XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgdGhpcy5fbG9jYWxfYXBpID0gX2ludGVyZmFjZTtcXFxcblxcXFxuICAgIHRoaXMuX2ZpcmUoXFxcXFxcXCJpbnRlcmZhY2VBdmFpbGFibGVcXFxcXFxcIik7XFxcXG4gIH1cXFxcbiAgLyoqXFxcXG4gICAqIFNlbmRzIHRoZSBhY3R1YWwgaW50ZXJmYWNlIHRvIHRoZSByZW1vdGUgc2l0ZSB1cG9uIGl0IHdhc1xcXFxuICAgKiB1cGRhdGVkIG9yIGJ5IGEgc3BlY2lhbCByZXF1ZXN0IG9mIHRoZSByZW1vdGUgc2l0ZVxcXFxuICAgKi9cXFxcblxcXFxuXFxcXG4gIHNlbmRJbnRlcmZhY2UoKSB7XFxcXG4gICAgaWYgKCF0aGlzLl9sb2NhbF9hcGkpIHtcXFxcbiAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcImludGVyZmFjZSBpcyBub3Qgc2V0LlxcXFxcXFwiKTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICB0aGlzLl9lbmNvZGUodGhpcy5fbG9jYWxfYXBpLCB0cnVlKS50aGVuKGFwaSA9PiB7XFxcXG4gICAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoe1xcXFxuICAgICAgICB0eXBlOiBcXFxcXFxcInNldEludGVyZmFjZVxcXFxcXFwiLFxcXFxuICAgICAgICBhcGk6IGFwaVxcXFxuICAgICAgfSk7XFxcXG4gICAgfSk7XFxcXG4gIH1cXFxcblxcXFxuICBfZGlzcG9zZU9iamVjdChvYmplY3RJZCkge1xcXFxuICAgIGlmICh0aGlzLl9vYmplY3Rfc3RvcmVbb2JqZWN0SWRdKSB7XFxcXG4gICAgICBkZWxldGUgdGhpcy5fb2JqZWN0X3N0b3JlW29iamVjdElkXTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPYmplY3QgKGlkPSR7b2JqZWN0SWR9KSBub3QgZm91bmQuYCk7XFxcXG4gICAgfVxcXFxuICB9XFxcXG5cXFxcbiAgZGlzcG9zZU9iamVjdChvYmopIHtcXFxcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xcXFxuICAgICAgaWYgKHRoaXMuX29iamVjdF93ZWFrbWFwLmhhcyhvYmopKSB7XFxcXG4gICAgICAgIGNvbnN0IG9iamVjdElkID0gdGhpcy5fb2JqZWN0X3dlYWttYXAuZ2V0KG9iaik7XFxcXG5cXFxcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5vbmNlKFxcXFxcXFwiZGlzcG9zZWRcXFxcXFxcIiwgZGF0YSA9PiB7XFxcXG4gICAgICAgICAgaWYgKGRhdGEuZXJyb3IpIHJlamVjdChuZXcgRXJyb3IoZGF0YS5lcnJvcikpO2Vsc2UgcmVzb2x2ZSgpO1xcXFxuICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoe1xcXFxuICAgICAgICAgIHR5cGU6IFxcXFxcXFwiZGlzcG9zZU9iamVjdFxcXFxcXFwiLFxcXFxuICAgICAgICAgIG9iamVjdF9pZDogb2JqZWN0SWRcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICB9IGVsc2Uge1xcXFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXFxcXFxcXCJJbnZhbGlkIG9iamVjdFxcXFxcXFwiKTtcXFxcbiAgICAgIH1cXFxcbiAgICB9KTtcXFxcbiAgfVxcXFxuICAvKipcXFxcbiAgICogSGFuZGxlcyBhIG1lc3NhZ2UgZnJvbSB0aGUgcmVtb3RlIHNpdGVcXFxcbiAgICovXFxcXG4gIC8vIHZhciBjYWxsYmFja19yZWcgPSBuZXcgUmVnRXhwKFxcXFxcXFwib251cGRhdGV8cnVuJFxcXFxcXFwiKVxcXFxuXFxcXG5cXFxcbiAgX3NldHVwTWVzc2FnZUhhbmxkZXJzKCkge1xcXFxuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oXFxcXFxcXCJpbml0XFxcXFxcXCIsIHRoaXMuaW5pdCk7XFxcXG5cXFxcbiAgICB0aGlzLl9jb25uZWN0aW9uLm9uKFxcXFxcXFwiZXhlY3V0ZVxcXFxcXFwiLCBkYXRhID0+IHtcXFxcbiAgICAgIFByb21pc2UucmVzb2x2ZSh0aGlzLl9jb25uZWN0aW9uLmV4ZWN1dGUoZGF0YS5jb2RlKSkudGhlbigoKSA9PiB7XFxcXG4gICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24uZW1pdCh7XFxcXG4gICAgICAgICAgdHlwZTogXFxcXFxcXCJleGVjdXRlZFxcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgfSkuY2F0Y2goZSA9PiB7XFxcXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XFxcXG5cXFxcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5lbWl0KHtcXFxcbiAgICAgICAgICB0eXBlOiBcXFxcXFxcImV4ZWN1dGVkXFxcXFxcXCIsXFxcXG4gICAgICAgICAgZXJyb3I6IFN0cmluZyhlKVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgIH0pO1xcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgdGhpcy5fY29ubmVjdGlvbi5vbihcXFxcXFxcIm1ldGhvZFxcXFxcXFwiLCBhc3luYyBkYXRhID0+IHtcXFxcbiAgICAgIGxldCByZXNvbHZlLCByZWplY3QsIG1ldGhvZCwgYXJncywgcmVzdWx0O1xcXFxuXFxcXG4gICAgICB0cnkge1xcXFxuICAgICAgICBpZiAoZGF0YS5wcm9taXNlKSB7XFxcXG4gICAgICAgICAgW3Jlc29sdmUsIHJlamVjdF0gPSBhd2FpdCB0aGlzLl91bndyYXAoZGF0YS5wcm9taXNlLCBmYWxzZSk7XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgICAgICBjb25zdCBfaW50ZXJmYWNlID0gdGhpcy5fb2JqZWN0X3N0b3JlW2RhdGEub2JqZWN0X2lkXTtcXFxcbiAgICAgICAgbWV0aG9kID0gaW5kZXhPYmplY3QoX2ludGVyZmFjZSwgZGF0YS5uYW1lKTtcXFxcbiAgICAgICAgYXJncyA9IGF3YWl0IHRoaXMuX3Vud3JhcChkYXRhLmFyZ3MsIHRydWUpO1xcXFxuXFxcXG4gICAgICAgIGlmIChkYXRhLnByb21pc2UpIHtcXFxcbiAgICAgICAgICByZXN1bHQgPSBtZXRob2QuYXBwbHkoX2ludGVyZmFjZSwgYXJncyk7XFxcXG5cXFxcbiAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSB8fCBtZXRob2QuY29uc3RydWN0b3IgJiYgbWV0aG9kLmNvbnN0cnVjdG9yLm5hbWUgPT09IFxcXFxcXFwiQXN5bmNGdW5jdGlvblxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICByZXN1bHQudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpO1xcXFxuICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XFxcXG4gICAgICAgICAgfVxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgIG1ldGhvZC5hcHBseShfaW50ZXJmYWNlLCBhcmdzKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgfSBjYXRjaCAoZXJyKSB7XFxcXG4gICAgICAgIGNvbnNvbGUuZXJyb3IodGhpcy5jb25maWcubmFtZSwgZXJyKTtcXFxcblxcXFxuICAgICAgICBpZiAocmVqZWN0KSB7XFxcXG4gICAgICAgICAgcmVqZWN0KGVycik7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgIH1cXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oXFxcXFxcXCJjYWxsYmFja1xcXFxcXFwiLCBhc3luYyBkYXRhID0+IHtcXFxcbiAgICAgIGxldCByZXNvbHZlLCByZWplY3QsIG1ldGhvZCwgYXJncywgcmVzdWx0O1xcXFxuXFxcXG4gICAgICB0cnkge1xcXFxuICAgICAgICBpZiAoZGF0YS5wcm9taXNlKSB7XFxcXG4gICAgICAgICAgW3Jlc29sdmUsIHJlamVjdF0gPSBhd2FpdCB0aGlzLl91bndyYXAoZGF0YS5wcm9taXNlLCBmYWxzZSk7XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgICAgICBpZiAoZGF0YS5wcm9taXNlKSB7XFxcXG4gICAgICAgICAgbWV0aG9kID0gdGhpcy5fc3RvcmUuZmV0Y2goZGF0YS5pZCk7XFxcXG4gICAgICAgICAgYXJncyA9IGF3YWl0IHRoaXMuX3Vud3JhcChkYXRhLmFyZ3MsIHRydWUpO1xcXFxuXFxcXG4gICAgICAgICAgaWYgKCFtZXRob2QpIHtcXFxcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcIkNhbGxiYWNrIGZ1bmN0aW9uIGNhbiBvbmx5IGNhbGxlZCBvbmNlLCBpZiB5b3Ugd2FudCB0byBjYWxsIGEgZnVuY3Rpb24gZm9yIG11bHRpcGxlIHRpbWVzLCBwbGVhc2UgbWFrZSBpdCBhcyBhIHBsdWdpbiBhcGkgZnVuY3Rpb24uIFNlZSBodHRwczovL2ltam95LmlvL2RvY3MgZm9yIG1vcmUgZGV0YWlscy5cXFxcXFxcIik7XFxcXG4gICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgcmVzdWx0ID0gbWV0aG9kLmFwcGx5KG51bGwsIGFyZ3MpO1xcXFxuXFxcXG4gICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UgfHwgbWV0aG9kLmNvbnN0cnVjdG9yICYmIG1ldGhvZC5jb25zdHJ1Y3Rvci5uYW1lID09PSBcXFxcXFxcIkFzeW5jRnVuY3Rpb25cXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgcmVzdWx0LnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcXFxcbiAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xcXFxuICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICBtZXRob2QgPSB0aGlzLl9zdG9yZS5mZXRjaChkYXRhLmlkKTtcXFxcbiAgICAgICAgICBhcmdzID0gYXdhaXQgdGhpcy5fdW53cmFwKGRhdGEuYXJncywgdHJ1ZSk7XFxcXG5cXFxcbiAgICAgICAgICBpZiAoIW1ldGhvZCkge1xcXFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwiUGxlYXNlIG5vdGljZSB0aGF0IGNhbGxiYWNrIGZ1bmN0aW9uIGNhbiBvbmx5IGNhbGxlZCBvbmNlLCBpZiB5b3Ugd2FudCB0byBjYWxsIGEgZnVuY3Rpb24gZm9yIG11bHRpcGxlIHRpbWVzLCBwbGVhc2UgbWFrZSBpdCBhcyBhIHBsdWdpbiBhcGkgZnVuY3Rpb24uIFNlZSBodHRwczovL2ltam95LmlvL2RvY3MgZm9yIG1vcmUgZGV0YWlscy5cXFxcXFxcIik7XFxcXG4gICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgbWV0aG9kLmFwcGx5KG51bGwsIGFyZ3MpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICB9IGNhdGNoIChlcnIpIHtcXFxcbiAgICAgICAgY29uc29sZS5lcnJvcih0aGlzLmNvbmZpZy5uYW1lLCBlcnIpO1xcXFxuXFxcXG4gICAgICAgIGlmIChyZWplY3QpIHtcXFxcbiAgICAgICAgICByZWplY3QoZXJyKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgfVxcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgdGhpcy5fY29ubmVjdGlvbi5vbihcXFxcXFxcImRpc3Bvc2VPYmplY3RcXFxcXFxcIiwgZGF0YSA9PiB7XFxcXG4gICAgICB0cnkge1xcXFxuICAgICAgICB0aGlzLl9kaXNwb3NlT2JqZWN0KGRhdGEub2JqZWN0X2lkKTtcXFxcblxcXFxuICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoe1xcXFxuICAgICAgICAgIHR5cGU6IFxcXFxcXFwiZGlzcG9zZWRcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcXFxcblxcXFxuICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoe1xcXFxuICAgICAgICAgIHR5cGU6IFxcXFxcXFwiZGlzcG9zZWRcXFxcXFxcIixcXFxcbiAgICAgICAgICBlcnJvcjogU3RyaW5nKGUpXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgfVxcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgdGhpcy5fY29ubmVjdGlvbi5vbihcXFxcXFxcInNldEludGVyZmFjZVxcXFxcXFwiLCBkYXRhID0+IHtcXFxcbiAgICAgIHRoaXMuX3NldFJlbW90ZUludGVyZmFjZShkYXRhLmFwaSk7XFxcXG4gICAgfSk7XFxcXG5cXFxcbiAgICB0aGlzLl9jb25uZWN0aW9uLm9uKFxcXFxcXFwiZ2V0SW50ZXJmYWNlXFxcXFxcXCIsICgpID0+IHtcXFxcbiAgICAgIHRoaXMuX2ZpcmUoXFxcXFxcXCJnZXRJbnRlcmZhY2VcXFxcXFxcIik7XFxcXG5cXFxcbiAgICAgIGlmICh0aGlzLl9sb2NhbF9hcGkpIHtcXFxcbiAgICAgICAgdGhpcy5zZW5kSW50ZXJmYWNlKCk7XFxcXG4gICAgICB9IGVsc2Uge1xcXFxuICAgICAgICB0aGlzLm9uY2UoXFxcXFxcXCJpbnRlcmZhY2VBdmFpbGFibGVcXFxcXFxcIiwgKCkgPT4ge1xcXFxuICAgICAgICAgIHRoaXMuc2VuZEludGVyZmFjZSgpO1xcXFxuICAgICAgICB9KTtcXFxcbiAgICAgIH1cXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oXFxcXFxcXCJpbnRlcmZhY2VTZXRBc1JlbW90ZVxcXFxcXFwiLCAoKSA9PiB7XFxcXG4gICAgICB0aGlzLl9maXJlKFxcXFxcXFwiaW50ZXJmYWNlU2V0QXNSZW1vdGVcXFxcXFxcIik7XFxcXG4gICAgfSk7XFxcXG5cXFxcbiAgICB0aGlzLl9jb25uZWN0aW9uLm9uKFxcXFxcXFwiZGlzY29ubmVjdFxcXFxcXFwiLCAoKSA9PiB7XFxcXG4gICAgICB0aGlzLl9maXJlKFxcXFxcXFwiYmVmb3JlRGlzY29ubmVjdFxcXFxcXFwiKTtcXFxcblxcXFxuICAgICAgdGhpcy5fY29ubmVjdGlvbi5kaXNjb25uZWN0KCk7XFxcXG5cXFxcbiAgICAgIHRoaXMuX2ZpcmUoXFxcXFxcXCJkaXNjb25uZWN0ZWRcXFxcXFxcIik7XFxcXG4gICAgfSk7XFxcXG4gIH1cXFxcbiAgLyoqXFxcXG4gICAqIFNlbmRzIGEgcmVxdWVzdHMgdG8gdGhlIHJlbW90ZSBzaXRlIGFza2luZyBpdCB0byBwcm92aWRlIGl0c1xcXFxuICAgKiBjdXJyZW50IGludGVyZmFjZVxcXFxuICAgKi9cXFxcblxcXFxuXFxcXG4gIHJlcXVlc3RSZW1vdGUoKSB7XFxcXG4gICAgdGhpcy5fY29ubmVjdGlvbi5lbWl0KHtcXFxcbiAgICAgIHR5cGU6IFxcXFxcXFwiZ2V0SW50ZXJmYWNlXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgfVxcXFxuXFxcXG4gIF9uZGFycmF5KHR5cGVkQXJyYXksIHNoYXBlLCBkdHlwZSkge1xcXFxuICAgIHZhciBfZHR5cGUgPSBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcXFxcXFxcInR5cGVkQXJyYXlUb0R0eXBlXFxcXFxcXCJdW3R5cGVkQXJyYXkuY29uc3RydWN0b3IubmFtZV07XFxcXG5cXFxcbiAgICBpZiAoZHR5cGUgJiYgZHR5cGUgIT09IF9kdHlwZSkge1xcXFxuICAgICAgdGhyb3cgXFxcXFxcXCJkdHlwZSBkb2Vzbid0IG1hdGNoIHRoZSB0eXBlIG9mIHRoZSBhcnJheTogXFxcXFxcXCIgKyBfZHR5cGUgKyBcXFxcXFxcIiAhPSBcXFxcXFxcIiArIGR0eXBlO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIHNoYXBlID0gc2hhcGUgfHwgW3R5cGVkQXJyYXkubGVuZ3RoXTtcXFxcbiAgICByZXR1cm4ge1xcXFxuICAgICAgX3J0eXBlOiBcXFxcXFxcIm5kYXJyYXlcXFxcXFxcIixcXFxcbiAgICAgIF9ydmFsdWU6IHR5cGVkQXJyYXkuYnVmZmVyLFxcXFxuICAgICAgX3JzaGFwZTogc2hhcGUsXFxcXG4gICAgICBfcmR0eXBlOiBfZHR5cGVcXFxcbiAgICB9O1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBTZXRzIHRoZSBuZXcgcmVtb3RlIGludGVyZmFjZSBwcm92aWRlZCBieSB0aGUgb3RoZXIgc2l0ZVxcXFxuICAgKlxcXFxuICAgKiBAcGFyYW0ge0FycmF5fSBuYW1lcyBsaXN0IG9mIGZ1bmN0aW9uIG5hbWVzXFxcXG4gICAqL1xcXFxuXFxcXG5cXFxcbiAgX3NldFJlbW90ZUludGVyZmFjZShhcGkpIHtcXFxcbiAgICB0aGlzLl9kZWNvZGUoYXBpKS50aGVuKGludGYgPT4ge1xcXFxuICAgICAgdGhpcy5fcmVtb3RlX2ludGVyZmFjZSA9IGludGY7XFxcXG5cXFxcbiAgICAgIHRoaXMuX2ZpcmUoXFxcXFxcXCJyZW1vdGVSZWFkeVxcXFxcXFwiKTtcXFxcblxcXFxuICAgICAgdGhpcy5fcmVwb3J0UmVtb3RlU2V0KCk7XFxcXG4gICAgfSk7XFxcXG4gIH1cXFxcbiAgLyoqXFxcXG4gICAqIEdlbmVyYXRlcyB0aGUgd3JhcHBlZCBmdW5jdGlvbiBjb3JyZXNwb25kaW5nIHRvIGEgc2luZ2xlIHJlbW90ZVxcXFxuICAgKiBtZXRob2QuIFdoZW4gdGhlIGdlbmVyYXRlZCBmdW5jdGlvbiBpcyBjYWxsZWQsIGl0IHdpbGwgc2VuZCB0aGVcXFxcbiAgICogY29ycmVzcG9uZGluZyBtZXNzYWdlIHRvIHRoZSByZW1vdGUgc2l0ZSBhc2tpbmcgaXQgdG8gZXhlY3V0ZVxcXFxuICAgKiB0aGUgcGFydGljdWxhciBtZXRob2Qgb2YgaXRzIGludGVyZmFjZVxcXFxuICAgKlxcXFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiB0aGUgcmVtb3RlIG1ldGhvZFxcXFxuICAgKlxcXFxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IHdyYXBwZWQgcmVtb3RlIG1ldGhvZFxcXFxuICAgKi9cXFxcblxcXFxuXFxcXG4gIF9nZW5SZW1vdGVNZXRob2QodGFyZ2V0SWQsIG5hbWUsIG9iamVjdElkKSB7XFxcXG4gICAgdmFyIG1lID0gdGhpcztcXFxcblxcXFxuICAgIHZhciByZW1vdGVNZXRob2QgPSBmdW5jdGlvbiAoKSB7XFxcXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xcXFxuICAgICAgICBsZXQgaWQgPSBudWxsO1xcXFxuXFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgaWQgPSBtZS5fbWV0aG9kX3JlZnMucHV0KG9iamVjdElkID8gb2JqZWN0SWQgKyBcXFxcXFxcIi9cXFxcXFxcIiArIG5hbWUgOiBuYW1lKTtcXFxcblxcXFxuICAgICAgICAgIHZhciB3cmFwcGVkX3Jlc29sdmUgPSBmdW5jdGlvbiAoKSB7XFxcXG4gICAgICAgICAgICBpZiAoaWQgIT09IG51bGwpIG1lLl9tZXRob2RfcmVmcy5mZXRjaChpZCk7XFxcXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcXFxuICAgICAgICAgIH07XFxcXG5cXFxcbiAgICAgICAgICB2YXIgd3JhcHBlZF9yZWplY3QgPSBmdW5jdGlvbiAoKSB7XFxcXG4gICAgICAgICAgICBpZiAoaWQgIT09IG51bGwpIG1lLl9tZXRob2RfcmVmcy5mZXRjaChpZCk7XFxcXG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxcXG4gICAgICAgICAgfTtcXFxcblxcXFxuICAgICAgICAgIHdyYXBwZWRfcmVzb2x2ZS5fX3JwY19wYWlyID0gd3JhcHBlZF9yZWplY3Q7XFxcXG4gICAgICAgICAgd3JhcHBlZF9yZWplY3QuX19ycGNfcGFpciA9IHdyYXBwZWRfcmVzb2x2ZTtcXFxcbiAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XFxcXG5cXFxcbiAgICAgICAgICBpZiAobmFtZSA9PT0gXFxcXFxcXCJyZWdpc3RlclxcXFxcXFwiIHx8IG5hbWUgPT09IFxcXFxcXFwiZXhwb3J0XFxcXFxcXCIgfHwgbmFtZSA9PT0gXFxcXFxcXCJvblxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICBhcmdzID0gYXdhaXQgbWUuX3dyYXAoYXJncywgdHJ1ZSk7XFxcXG4gICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGFyZ3MgPSBhd2FpdCBtZS5fd3JhcChhcmdzKTtcXFxcbiAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICB2YXIgdHJhbnNmZXJhYmxlcyA9IGFyZ3MuX190cmFuc2ZlcmFibGVzX187XFxcXG4gICAgICAgICAgaWYgKHRyYW5zZmVyYWJsZXMpIGRlbGV0ZSBhcmdzLl9fdHJhbnNmZXJhYmxlc19fO1xcXFxuXFxcXG4gICAgICAgICAgbWUuX2Nvbm5lY3Rpb24uZW1pdCh7XFxcXG4gICAgICAgICAgICB0eXBlOiBcXFxcXFxcIm1ldGhvZFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdGFyZ2V0X2lkOiB0YXJnZXRJZCxcXFxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXFxcXG4gICAgICAgICAgICBvYmplY3RfaWQ6IG9iamVjdElkLFxcXFxuICAgICAgICAgICAgYXJnczogYXJncyxcXFxcbiAgICAgICAgICAgIHByb21pc2U6IGF3YWl0IG1lLl93cmFwKFt3cmFwcGVkX3Jlc29sdmUsIHdyYXBwZWRfcmVqZWN0XSlcXFxcbiAgICAgICAgICB9LCB0cmFuc2ZlcmFibGVzKTtcXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgIGlmIChpZCkgbWUuX21ldGhvZF9yZWZzLmZldGNoKGlkKTtcXFxcbiAgICAgICAgICByZWplY3QoYEZhaWxlZCB0byBleGVjdHVlIHJlbW90ZSBtZXRob2QgKGludGVyZmFjZTogJHtvYmplY3RJZCB8fCBtZS5pZH0sIG1ldGhvZDogJHtuYW1lfSksIGVycm9yOiAke2V9YCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgIH0pO1xcXFxuICAgIH07XFxcXG5cXFxcbiAgICByZW1vdGVNZXRob2QuX19yZW1vdGVfbWV0aG9kID0gdHJ1ZTtcXFxcbiAgICByZXR1cm4gcmVtb3RlTWV0aG9kO1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBTZW5kcyBhIHJlc3BvbmNlIHJlcG9ydGluZyB0aGF0IGludGVyZmFjZSBqdXN0IHByb3ZpZGVkIGJ5IHRoZVxcXFxuICAgKiByZW1vdGUgc2l0ZSB3YXMgc3VjY2Vzc2Z1bGx5IHNldCBieSB0aGlzIHNpdGUgYXMgcmVtb3RlXFxcXG4gICAqL1xcXFxuXFxcXG5cXFxcbiAgX3JlcG9ydFJlbW90ZVNldCgpIHtcXFxcbiAgICB0aGlzLl9jb25uZWN0aW9uLmVtaXQoe1xcXFxuICAgICAgdHlwZTogXFxcXFxcXCJpbnRlcmZhY2VTZXRBc1JlbW90ZVxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gIH1cXFxcbiAgLyoqXFxcXG4gICAqIFByZXBhcmVzIHRoZSBwcm92aWRlZCBzZXQgb2YgcmVtb3RlIG1ldGhvZCBhcmd1bWVudHMgZm9yXFxcXG4gICAqIHNlbmRpbmcgdG8gdGhlIHJlbW90ZSBzaXRlLCByZXBsYWNlcyBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoXFxcXG4gICAqIGlkZW50aWZpZXJzXFxcXG4gICAqXFxcXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgdG8gd3JhcFxcXFxuICAgKlxcXFxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHdyYXBwZWQgYXJndW1lbnRzXFxcXG4gICAqL1xcXFxuXFxcXG5cXFxcbiAgYXN5bmMgX2VuY29kZShhT2JqZWN0LCBhc0ludGVyZmFjZSwgb2JqZWN0SWQpIHtcXFxcbiAgICBjb25zdCBhVHlwZSA9IHR5cGVvZiBhT2JqZWN0O1xcXFxuXFxcXG4gICAgaWYgKGFUeXBlID09PSBcXFxcXFxcIm51bWJlclxcXFxcXFwiIHx8IGFUeXBlID09PSBcXFxcXFxcInN0cmluZ1xcXFxcXFwiIHx8IGFUeXBlID09PSBcXFxcXFxcImJvb2xlYW5cXFxcXFxcIiB8fCBhT2JqZWN0ID09PSBudWxsIHx8IGFPYmplY3QgPT09IHVuZGVmaW5lZCB8fCBhT2JqZWN0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcXFxcbiAgICAgIHJldHVybiBhT2JqZWN0O1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGxldCBiT2JqZWN0O1xcXFxuXFxcXG4gICAgaWYgKHR5cGVvZiBhT2JqZWN0ID09PSBcXFxcXFxcImZ1bmN0aW9uXFxcXFxcXCIpIHtcXFxcbiAgICAgIGlmIChhc0ludGVyZmFjZSkge1xcXFxuICAgICAgICBpZiAoIW9iamVjdElkKSB0aHJvdyBuZXcgRXJyb3IoXFxcXFxcXCJvYmplY3RJZCBpcyBub3Qgc3BlY2lmaWVkLlxcXFxcXFwiKTtcXFxcbiAgICAgICAgYk9iamVjdCA9IHtcXFxcbiAgICAgICAgICBfcnR5cGU6IFxcXFxcXFwiaW50ZXJmYWNlXFxcXFxcXCIsXFxcXG4gICAgICAgICAgX3J0YXJnZXRfaWQ6IHRoaXMuX2Nvbm5lY3Rpb24ucGVlcl9pZCxcXFxcbiAgICAgICAgICBfcmludGY6IG9iamVjdElkLFxcXFxuICAgICAgICAgIF9ydmFsdWU6IGFzSW50ZXJmYWNlXFxcXG4gICAgICAgIH07XFxcXG5cXFxcbiAgICAgICAgdGhpcy5fbWV0aG9kX3dlYWttYXAuc2V0KGFPYmplY3QsIGJPYmplY3QpO1xcXFxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9tZXRob2Rfd2Vha21hcC5oYXMoYU9iamVjdCkpIHtcXFxcbiAgICAgICAgYk9iamVjdCA9IHRoaXMuX21ldGhvZF93ZWFrbWFwLmdldChhT2JqZWN0KTtcXFxcbiAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIGNvbnN0IGNpZCA9IHRoaXMuX3N0b3JlLnB1dChhT2JqZWN0KTtcXFxcblxcXFxuICAgICAgICBiT2JqZWN0ID0ge1xcXFxuICAgICAgICAgIF9ydHlwZTogXFxcXFxcXCJjYWxsYmFja1xcXFxcXFwiLFxcXFxuICAgICAgICAgIF9ydGFyZ2V0X2lkOiB0aGlzLl9jb25uZWN0aW9uLnBlZXJfaWQsXFxcXG4gICAgICAgICAgX3JuYW1lOiBhT2JqZWN0LmNvbnN0cnVjdG9yICYmIGFPYmplY3QuY29uc3RydWN0b3IubmFtZSB8fCBjaWQsXFxcXG4gICAgICAgICAgX3J2YWx1ZTogY2lkXFxcXG4gICAgICAgIH07XFxcXG4gICAgICB9XFxcXG5cXFxcbiAgICAgIHJldHVybiBiT2JqZWN0O1xcXFxuICAgIH0gLy8gc2tpcCBpZiBhbHJlYWR5IGVuY29kZWRcXFxcblxcXFxuXFxcXG4gICAgaWYgKGFPYmplY3QuY29uc3RydWN0b3IgaW5zdGFuY2VvZiBPYmplY3QgJiYgYU9iamVjdC5fcnR5cGUpIHtcXFxcbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgaW50ZXJmYWNlIGZ1bmN0aW9ucyBhcmUgZW5jb2RlZFxcXFxuICAgICAgaWYgKGFPYmplY3QuX3JpbnRmKSB7XFxcXG4gICAgICAgIGNvbnN0IHRlbXAgPSBhT2JqZWN0Ll9ydHlwZTtcXFxcbiAgICAgICAgZGVsZXRlIGFPYmplY3QuX3J0eXBlO1xcXFxuICAgICAgICBiT2JqZWN0ID0gYXdhaXQgdGhpcy5fZW5jb2RlKGFPYmplY3QsIGFzSW50ZXJmYWNlLCBvYmplY3RJZCk7XFxcXG4gICAgICAgIGJPYmplY3QuX3J0eXBlID0gdGVtcDtcXFxcbiAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIGJPYmplY3QgPSBhT2JqZWN0O1xcXFxuICAgICAgfVxcXFxuXFxcXG4gICAgICByZXR1cm4gYk9iamVjdDtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCB0cmFuc2ZlcmFibGVzID0gW107XFxcXG4gICAgY29uc3QgX3RyYW5zZmVyID0gYU9iamVjdC5fdHJhbnNmZXI7XFxcXG4gICAgY29uc3QgaXNhcnJheSA9IEFycmF5LmlzQXJyYXkoYU9iamVjdCk7XFxcXG5cXFxcbiAgICBmb3IgKGxldCB0cCBvZiBPYmplY3Qua2V5cyh0aGlzLl9jb2RlY3MpKSB7XFxcXG4gICAgICBjb25zdCBjb2RlYyA9IHRoaXMuX2NvZGVjc1t0cF07XFxcXG5cXFxcbiAgICAgIGlmIChjb2RlYy5lbmNvZGVyICYmIGFPYmplY3QgaW5zdGFuY2VvZiBjb2RlYy50eXBlKSB7XFxcXG4gICAgICAgIC8vIFRPRE86IHdoYXQgaWYgbXVsdGlwbGUgZW5jb2RlcnMgZm91bmRcXFxcbiAgICAgICAgY29uc3QgZW5jb2RlZE9iaiA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShjb2RlYy5lbmNvZGVyKGFPYmplY3QpKTtcXFxcbiAgICAgICAgaWYgKGVuY29kZWRPYmogJiYgIWVuY29kZWRPYmouX3J0eXBlKSBlbmNvZGVkT2JqLl9ydHlwZSA9IGNvZGVjLm5hbWU7IC8vIGVuY29kZSB0aGUgZnVuY3Rpb25zIGluIHRoZSBpbnRlcmZhY2Ugb2JqZWN0XFxcXG5cXFxcbiAgICAgICAgaWYgKGVuY29kZWRPYmogJiYgZW5jb2RlZE9iai5fcmludGYpIHtcXFxcbiAgICAgICAgICBjb25zdCB0ZW1wID0gZW5jb2RlZE9iai5fcnR5cGU7XFxcXG4gICAgICAgICAgZGVsZXRlIGVuY29kZWRPYmouX3J0eXBlO1xcXFxuICAgICAgICAgIGVuY29kZWRPYmogPSBhd2FpdCB0aGlzLl9lbmNvZGUoZW5jb2RlZE9iaiwgYXNJbnRlcmZhY2UsIG9iamVjdElkKTtcXFxcbiAgICAgICAgICBlbmNvZGVkT2JqLl9ydHlwZSA9IHRlbXA7XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgICAgICBiT2JqZWN0ID0gZW5jb2RlZE9iajtcXFxcbiAgICAgICAgcmV0dXJuIGJPYmplY3Q7XFxcXG4gICAgICB9XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgaWYgKFxcXFxuICAgIC8qZ2xvYmFsIHRmKi9cXFxcbiAgICB0eXBlb2YgdGYgIT09IFxcXFxcXFwidW5kZWZpbmVkXFxcXFxcXCIgJiYgdGYuVGVuc29yICYmIGFPYmplY3QgaW5zdGFuY2VvZiB0Zi5UZW5zb3IpIHtcXFxcbiAgICAgIGNvbnN0IHZfYnVmZmVyID0gYU9iamVjdC5kYXRhU3luYygpO1xcXFxuXFxcXG4gICAgICBpZiAoYU9iamVjdC5fdHJhbnNmZXIgfHwgX3RyYW5zZmVyKSB7XFxcXG4gICAgICAgIHRyYW5zZmVyYWJsZXMucHVzaCh2X2J1ZmZlci5idWZmZXIpO1xcXFxuICAgICAgICBkZWxldGUgYU9iamVjdC5fdHJhbnNmZXI7XFxcXG4gICAgICB9XFxcXG5cXFxcbiAgICAgIGJPYmplY3QgPSB7XFxcXG4gICAgICAgIF9ydHlwZTogXFxcXFxcXCJuZGFycmF5XFxcXFxcXCIsXFxcXG4gICAgICAgIF9ydmFsdWU6IHZfYnVmZmVyLmJ1ZmZlcixcXFxcbiAgICAgICAgX3JzaGFwZTogYU9iamVjdC5zaGFwZSxcXFxcbiAgICAgICAgX3JkdHlwZTogYU9iamVjdC5kdHlwZVxcXFxuICAgICAgfTtcXFxcbiAgICB9IGVsc2UgaWYgKFxcXFxuICAgIC8qZ2xvYmFsIG5qKi9cXFxcbiAgICB0eXBlb2YgbmogIT09IFxcXFxcXFwidW5kZWZpbmVkXFxcXFxcXCIgJiYgbmouTmRBcnJheSAmJiBhT2JqZWN0IGluc3RhbmNlb2YgbmouTmRBcnJheSkge1xcXFxuICAgICAgdmFyIGR0eXBlID0gX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXFxcXFxcXCJ0eXBlZEFycmF5VG9EdHlwZVxcXFxcXFwiXVthT2JqZWN0LnNlbGVjdGlvbi5kYXRhLmNvbnN0cnVjdG9yLm5hbWVdO1xcXFxuXFxcXG4gICAgICBpZiAoYU9iamVjdC5fdHJhbnNmZXIgfHwgX3RyYW5zZmVyKSB7XFxcXG4gICAgICAgIHRyYW5zZmVyYWJsZXMucHVzaChhT2JqZWN0LnNlbGVjdGlvbi5kYXRhLmJ1ZmZlcik7XFxcXG4gICAgICAgIGRlbGV0ZSBhT2JqZWN0Ll90cmFuc2ZlcjtcXFxcbiAgICAgIH1cXFxcblxcXFxuICAgICAgYk9iamVjdCA9IHtcXFxcbiAgICAgICAgX3J0eXBlOiBcXFxcXFxcIm5kYXJyYXlcXFxcXFxcIixcXFxcbiAgICAgICAgX3J2YWx1ZTogYU9iamVjdC5zZWxlY3Rpb24uZGF0YS5idWZmZXIsXFxcXG4gICAgICAgIF9yc2hhcGU6IGFPYmplY3Quc2hhcGUsXFxcXG4gICAgICAgIF9yZHR5cGU6IGR0eXBlXFxcXG4gICAgICB9O1xcXFxuICAgIH0gZWxzZSBpZiAoYU9iamVjdCBpbnN0YW5jZW9mIEVycm9yKSB7XFxcXG4gICAgICBjb25zb2xlLmVycm9yKGFPYmplY3QpO1xcXFxuICAgICAgYk9iamVjdCA9IHtcXFxcbiAgICAgICAgX3J0eXBlOiBcXFxcXFxcImVycm9yXFxcXFxcXCIsXFxcXG4gICAgICAgIF9ydmFsdWU6IGFPYmplY3QudG9TdHJpbmcoKVxcXFxuICAgICAgfTtcXFxcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBGaWxlICE9PSBcXFxcXFxcInVuZGVmaW5lZFxcXFxcXFwiICYmIGFPYmplY3QgaW5zdGFuY2VvZiBGaWxlKSB7XFxcXG4gICAgICBiT2JqZWN0ID0ge1xcXFxuICAgICAgICBfcnR5cGU6IFxcXFxcXFwiZmlsZVxcXFxcXFwiLFxcXFxuICAgICAgICBfcnZhbHVlOiBhT2JqZWN0LFxcXFxuICAgICAgICBfcnBhdGg6IGFPYmplY3QuX3BhdGggfHwgYU9iamVjdC53ZWJraXRSZWxhdGl2ZVBhdGhcXFxcbiAgICAgIH07XFxcXG4gICAgfSAvLyBzZW5kIG9iamVjdHMgc3VwcG9ydGVkIGJ5IHN0cnVjdHVyZSBjbG9uZSBhbGdvcml0aG1cXFxcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViX1dvcmtlcnNfQVBJL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtXFxcXG4gICAgZWxzZSBpZiAoYU9iamVjdCAhPT0gT2JqZWN0KGFPYmplY3QpIHx8IGFPYmplY3QgaW5zdGFuY2VvZiBCb29sZWFuIHx8IGFPYmplY3QgaW5zdGFuY2VvZiBTdHJpbmcgfHwgYU9iamVjdCBpbnN0YW5jZW9mIERhdGUgfHwgYU9iamVjdCBpbnN0YW5jZW9mIFJlZ0V4cCB8fCBhT2JqZWN0IGluc3RhbmNlb2YgSW1hZ2VEYXRhIHx8IHR5cGVvZiBGaWxlTGlzdCAhPT0gXFxcXFxcXCJ1bmRlZmluZWRcXFxcXFxcIiAmJiBhT2JqZWN0IGluc3RhbmNlb2YgRmlsZUxpc3QpIHtcXFxcbiAgICAgICAgYk9iamVjdCA9IGFPYmplY3Q7IC8vIFRPRE86IGF2b2lkIG9iamVjdCBzdWNoIGFzIER5bmFtaWNQbHVnaW4gaW5zdGFuY2UuXFxcXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBGaWxlICE9PSBcXFxcXFxcInVuZGVmaW5lZFxcXFxcXFwiICYmIGFPYmplY3QgaW5zdGFuY2VvZiBGaWxlKSB7XFxcXG4gICAgICAgIGJPYmplY3QgPSB7XFxcXG4gICAgICAgICAgX3J0eXBlOiBcXFxcXFxcImZpbGVcXFxcXFxcIixcXFxcbiAgICAgICAgICBfcm5hbWU6IGFPYmplY3QubmFtZSxcXFxcbiAgICAgICAgICBfcm1pbWU6IGFPYmplY3QudHlwZSxcXFxcbiAgICAgICAgICBfcnZhbHVlOiBhT2JqZWN0LFxcXFxuICAgICAgICAgIF9ycGF0aDogYU9iamVjdC5fcGF0aCB8fCBhT2JqZWN0LndlYmtpdFJlbGF0aXZlUGF0aFxcXFxuICAgICAgICB9O1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0IGluc3RhbmNlb2YgQmxvYikge1xcXFxuICAgICAgICBiT2JqZWN0ID0ge1xcXFxuICAgICAgICAgIF9ydHlwZTogXFxcXFxcXCJibG9iXFxcXFxcXCIsXFxcXG4gICAgICAgICAgX3J2YWx1ZTogYU9iamVjdFxcXFxuICAgICAgICB9O1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXJWaWV3KSB7XFxcXG4gICAgICAgIGlmIChhT2JqZWN0Ll90cmFuc2ZlciB8fCBfdHJhbnNmZXIpIHtcXFxcbiAgICAgICAgICB0cmFuc2ZlcmFibGVzLnB1c2goYU9iamVjdC5idWZmZXIpO1xcXFxuICAgICAgICAgIGRlbGV0ZSBhT2JqZWN0Ll90cmFuc2ZlcjtcXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIGNvbnN0IGR0eXBlID0gX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXFxcXFxcXCJ0eXBlZEFycmF5VG9EdHlwZVxcXFxcXFwiXVthT2JqZWN0LmNvbnN0cnVjdG9yLm5hbWVdO1xcXFxuICAgICAgICBiT2JqZWN0ID0ge1xcXFxuICAgICAgICAgIF9ydHlwZTogXFxcXFxcXCJ0eXBlZGFycmF5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgX3J2YWx1ZTogYU9iamVjdC5idWZmZXIsXFxcXG4gICAgICAgICAgX3JkdHlwZTogZHR5cGVcXFxcbiAgICAgICAgfTtcXFxcbiAgICAgIH0gZWxzZSBpZiAoYU9iamVjdCBpbnN0YW5jZW9mIERhdGFWaWV3KSB7XFxcXG4gICAgICAgIGlmIChhT2JqZWN0Ll90cmFuc2ZlciB8fCBfdHJhbnNmZXIpIHtcXFxcbiAgICAgICAgICB0cmFuc2ZlcmFibGVzLnB1c2goYU9iamVjdC5idWZmZXIpO1xcXFxuICAgICAgICAgIGRlbGV0ZSBhT2JqZWN0Ll90cmFuc2ZlcjtcXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIGJPYmplY3QgPSB7XFxcXG4gICAgICAgICAgX3J0eXBlOiBcXFxcXFxcIm1lbW9yeXZpZXdcXFxcXFxcIixcXFxcbiAgICAgICAgICBfcnZhbHVlOiBhT2JqZWN0LmJ1ZmZlclxcXFxuICAgICAgICB9O1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0IGluc3RhbmNlb2YgU2V0KSB7XFxcXG4gICAgICAgIGJPYmplY3QgPSB7XFxcXG4gICAgICAgICAgX3J0eXBlOiBcXFxcXFxcInNldFxcXFxcXFwiLFxcXFxuICAgICAgICAgIF9ydmFsdWU6IGF3YWl0IHRoaXMuX2VuY29kZShBcnJheS5mcm9tKGFPYmplY3QpLCBhc0ludGVyZmFjZSlcXFxcbiAgICAgICAgfTtcXFxcbiAgICAgIH0gZWxzZSBpZiAoYU9iamVjdCBpbnN0YW5jZW9mIE1hcCkge1xcXFxuICAgICAgICBiT2JqZWN0ID0ge1xcXFxuICAgICAgICAgIF9ydHlwZTogXFxcXFxcXCJvcmRlcmVkbWFwXFxcXFxcXCIsXFxcXG4gICAgICAgICAgX3J2YWx1ZTogYXdhaXQgdGhpcy5fZW5jb2RlKEFycmF5LmZyb20oYU9iamVjdCksIGFzSW50ZXJmYWNlKVxcXFxuICAgICAgICB9O1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0LmNvbnN0cnVjdG9yIGluc3RhbmNlb2YgT2JqZWN0IHx8IEFycmF5LmlzQXJyYXkoYU9iamVjdCkpIHtcXFxcbiAgICAgICAgYk9iamVjdCA9IGlzYXJyYXkgPyBbXSA6IHt9O1xcXFxuICAgICAgICBsZXQga2V5czsgLy8gYW4gb2JqZWN0L2FycmF5XFxcXG5cXFxcbiAgICAgICAgaWYgKGFPYmplY3QuY29uc3RydWN0b3IgPT09IE9iamVjdCB8fCBBcnJheS5pc0FycmF5KGFPYmplY3QpKSB7XFxcXG4gICAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKGFPYmplY3QpO1xcXFxuICAgICAgICB9IC8vIGEgY2xhc3NcXFxcbiAgICAgICAgZWxzZSBpZiAoYU9iamVjdC5jb25zdHJ1Y3RvciA9PT0gRnVuY3Rpb24pIHtcXFxcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcIlBsZWFzZSBpbnN0YW50aWF0ZSB0aGUgY2xhc3MgYmVmb3JlIGV4cG9ydHRpbmcgaXQuXFxcXFxcXCIpO1xcXFxuICAgICAgICAgIH0gLy8gaW5zdGFuY2Ugb2YgYSBjbGFzc1xcXFxuICAgICAgICAgIGVsc2UgaWYgKGFPYmplY3QuY29uc3RydWN0b3IuY29uc3RydWN0b3IgPT09IEZ1bmN0aW9uKSB7XFxcXG4gICAgICAgICAgICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QuZ2V0UHJvdG90eXBlT2YoYU9iamVjdCkpLmNvbmNhdChPYmplY3Qua2V5cyhhT2JqZWN0KSk7IC8vIFRPRE86IHVzZSBhIHByb3h5IG9iamVjdCB0byByZXByZXNlbnQgdGhlIGFjdHVhbCBvYmplY3RcXFxcbiAgICAgICAgICAgICAgLy8gYWx3YXlzIGVuY29kZSBjbGFzcyBpbnN0YW5jZSBhcyBpbnRlcmZhY2VcXFxcblxcXFxuICAgICAgICAgICAgICBhc0ludGVyZmFjZSA9IHRydWU7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcXFxcXFxcIlVuc3VwcG9ydGVkIGludGVyZmFjZSB0eXBlXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgfSAvLyBlbmNvZGUgaW50ZXJmYWNlc1xcXFxuXFxcXG5cXFxcbiAgICAgICAgaWYgKGFPYmplY3QuX3JpbnRmIHx8IGFzSW50ZXJmYWNlKSB7XFxcXG4gICAgICAgICAgaWYgKCFvYmplY3RJZCkge1xcXFxuICAgICAgICAgICAgb2JqZWN0SWQgPSBPYmplY3QoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXFxcXFxcXCJyYW5kSWRcXFxcXFxcIl0pKCk7XFxcXG4gICAgICAgICAgICB0aGlzLl9vYmplY3Rfc3RvcmVbb2JqZWN0SWRdID0gYU9iamVjdDtcXFxcbiAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICBmb3IgKGxldCBrIG9mIGtleXMpIHtcXFxcbiAgICAgICAgICAgIGlmIChrID09PSBcXFxcXFxcImNvbnN0cnVjdG9yXFxcXFxcXCIpIGNvbnRpbnVlO1xcXFxuXFxcXG4gICAgICAgICAgICBpZiAoay5zdGFydHNXaXRoKFxcXFxcXFwiX1xcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICAgICAgYk9iamVjdFtrXSA9IGF3YWl0IHRoaXMuX2VuY29kZShhT2JqZWN0W2tdLCB0eXBlb2YgYXNJbnRlcmZhY2UgPT09IFxcXFxcXFwic3RyaW5nXFxcXFxcXCIgPyBhc0ludGVyZmFjZSArIFxcXFxcXFwiLlxcXFxcXFwiICsgayA6IGssIG9iamVjdElkKTtcXFxcbiAgICAgICAgICB9IC8vIG9iamVjdCBpZCBmb3IgZGlzcG9zZSB0aGUgb2JqZWN0IHJlbW90ZWx5XFxcXG5cXFxcblxcXFxuICAgICAgICAgIGJPYmplY3QuX3JpbnRmID0gb2JqZWN0SWQ7IC8vIHJlbW92ZSBpbnRlcmZhY2Ugd2hlbiBjbG9zZWRcXFxcblxcXFxuICAgICAgICAgIGlmIChhT2JqZWN0Lm9uICYmIHR5cGVvZiBhT2JqZWN0Lm9uID09PSBcXFxcXFxcImZ1bmN0aW9uXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGFPYmplY3Qub24oXFxcXFxcXCJjbG9zZVxcXFxcXFwiLCAoKSA9PiB7XFxcXG4gICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vYmplY3Rfc3RvcmVbb2JqZWN0SWRdO1xcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgfVxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgIGZvciAobGV0IGsgb2Yga2V5cykge1xcXFxuICAgICAgICAgICAgaWYgKFtcXFxcXFxcImhhc093blByb3BlcnR5XFxcXFxcXCIsIFxcXFxcXFwiY29uc3RydWN0b3JcXFxcXFxcIl0uaW5jbHVkZXMoaykpIGNvbnRpbnVlO1xcXFxuICAgICAgICAgICAgYk9iamVjdFtrXSA9IGF3YWl0IHRoaXMuX2VuY29kZShhT2JqZWN0W2tdKTtcXFxcbiAgICAgICAgICB9XFxcXG4gICAgICAgIH0gLy8gZm9yIGV4YW1wbGUsIGJyb3dzZXJGUyBvYmplY3RcXFxcblxcXFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYU9iamVjdCA9PT0gXFxcXFxcXCJvYmplY3RcXFxcXFxcIikge1xcXFxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT2JqZWN0LmdldFByb3RvdHlwZU9mKGFPYmplY3QpKS5jb25jYXQoT2JqZWN0LmtleXMoYU9iamVjdCkpO1xcXFxuICAgICAgICBjb25zdCBvYmplY3RJZCA9IE9iamVjdChfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcXFxcXFxcInJhbmRJZFxcXFxcXFwiXSkoKTtcXFxcblxcXFxuICAgICAgICBmb3IgKGxldCBrIG9mIGtleXMpIHtcXFxcbiAgICAgICAgICBpZiAoW1xcXFxcXFwiaGFzT3duUHJvcGVydHlcXFxcXFxcIiwgXFxcXFxcXCJjb25zdHJ1Y3RvclxcXFxcXFwiXS5pbmNsdWRlcyhrKSkgY29udGludWU7IC8vIGVuY29kZSBhcyBpbnRlcmZhY2VcXFxcblxcXFxuICAgICAgICAgIGJPYmplY3Rba10gPSBhd2FpdCB0aGlzLl9lbmNvZGUoYU9iamVjdFtrXSwgaywgYk9iamVjdCk7XFxcXG4gICAgICAgIH0gLy8gb2JqZWN0IGlkLCB1c2VkIGZvciBkaXNwb3NlIHRoZSBvYmplY3RcXFxcblxcXFxuXFxcXG4gICAgICAgIGJPYmplY3QuX3JpbnRmID0gb2JqZWN0SWQ7XFxcXG4gICAgICB9IGVsc2Uge1xcXFxuICAgICAgICB0aHJvdyBcXFxcXFxcImltam95LXJwYzogVW5zdXBwb3J0ZWQgZGF0YSB0eXBlOlxcXFxcXFwiICsgYU9iamVjdDtcXFxcbiAgICAgIH1cXFxcblxcXFxuICAgIGlmICh0cmFuc2ZlcmFibGVzLmxlbmd0aCA+IDApIHtcXFxcbiAgICAgIGJPYmplY3QuX190cmFuc2ZlcmFibGVzX18gPSB0cmFuc2ZlcmFibGVzO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGlmICghYk9iamVjdCkge1xcXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwiRmFpbGVkIHRvIGVuY29kZSBvYmplY3RcXFxcXFxcIik7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgcmV0dXJuIGJPYmplY3Q7XFxcXG4gIH1cXFxcblxcXFxuICBhc3luYyBfZGVjb2RlKGFPYmplY3QsIHdpdGhQcm9taXNlKSB7XFxcXG4gICAgaWYgKCFhT2JqZWN0KSB7XFxcXG4gICAgICByZXR1cm4gYU9iamVjdDtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICB2YXIgYk9iamVjdCwgdiwgaztcXFxcblxcXFxuICAgIGlmIChhT2JqZWN0W1xcXFxcXFwiX3J0eXBlXFxcXFxcXCJdKSB7XFxcXG4gICAgICBpZiAodGhpcy5fY29kZWNzW2FPYmplY3QuX3J0eXBlXSAmJiB0aGlzLl9jb2RlY3NbYU9iamVjdC5fcnR5cGVdLmRlY29kZXIpIHtcXFxcbiAgICAgICAgaWYgKGFPYmplY3QuX3JpbnRmKSB7XFxcXG4gICAgICAgICAgY29uc3QgdGVtcCA9IGFPYmplY3QuX3J0eXBlO1xcXFxuICAgICAgICAgIGRlbGV0ZSBhT2JqZWN0Ll9ydHlwZTtcXFxcbiAgICAgICAgICBhT2JqZWN0ID0gYXdhaXQgdGhpcy5fZGVjb2RlKGFPYmplY3QsIHdpdGhQcm9taXNlKTtcXFxcbiAgICAgICAgICBhT2JqZWN0Ll9ydHlwZSA9IHRlbXA7XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgICAgICBiT2JqZWN0ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2NvZGVjc1thT2JqZWN0Ll9ydHlwZV0uZGVjb2RlcihhT2JqZWN0KSk7XFxcXG4gICAgICB9IGVsc2UgaWYgKGFPYmplY3QuX3J0eXBlID09PSBcXFxcXFxcImNhbGxiYWNrXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgYk9iamVjdCA9IHRoaXMuX2dlblJlbW90ZUNhbGxiYWNrKGFPYmplY3QuX3J0YXJnZXRfaWQsIGFPYmplY3QuX3J2YWx1ZSwgd2l0aFByb21pc2UpO1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXFxcXFxcXCJpbnRlcmZhY2VcXFxcXFxcIikge1xcXFxuICAgICAgICBiT2JqZWN0ID0gdGhpcy5fZ2VuUmVtb3RlTWV0aG9kKGFPYmplY3QuX3J0YXJnZXRfaWQsIGFPYmplY3QuX3J2YWx1ZSwgYU9iamVjdC5fcmludGYpO1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXFxcXFxcXCJuZGFycmF5XFxcXFxcXCIpIHtcXFxcbiAgICAgICAgLypnbG9iYWwgbmogdGYqL1xcXFxuICAgICAgICAvL2NyZWF0ZSBidWlsZCBhcnJheS90ZW5zb3IgaWYgdXNlZCBpbiB0aGUgcGx1Z2luXFxcXG4gICAgICAgIGlmICh0eXBlb2YgbmogIT09IFxcXFxcXFwidW5kZWZpbmVkXFxcXFxcXCIgJiYgbmouYXJyYXkpIHtcXFxcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhT2JqZWN0Ll9ydmFsdWUpKSB7XFxcXG4gICAgICAgICAgICBhT2JqZWN0Ll9ydmFsdWUgPSBhT2JqZWN0Ll9ydmFsdWUucmVkdWNlKF9hcHBlbmRCdWZmZXIpO1xcXFxuICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICAgIGJPYmplY3QgPSBuai5hcnJheShuZXcgVWludDgoYU9iamVjdC5fcnZhbHVlKSwgYU9iamVjdC5fcmR0eXBlKS5yZXNoYXBlKGFPYmplY3QuX3JzaGFwZSk7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRmICE9PSBcXFxcXFxcInVuZGVmaW5lZFxcXFxcXFwiICYmIHRmLlRlbnNvcikge1xcXFxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFPYmplY3QuX3J2YWx1ZSkpIHtcXFxcbiAgICAgICAgICAgIGFPYmplY3QuX3J2YWx1ZSA9IGFPYmplY3QuX3J2YWx1ZS5yZWR1Y2UoX2FwcGVuZEJ1ZmZlcik7XFxcXG4gICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgY29uc3QgYXJyYXl0eXBlID0gZXZhbChfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcXFxcXFxcImR0eXBlVG9UeXBlZEFycmF5XFxcXFxcXCJdW2FPYmplY3QuX3JkdHlwZV0pO1xcXFxuICAgICAgICAgIGJPYmplY3QgPSB0Zi50ZW5zb3IobmV3IGFycmF5dHlwZShhT2JqZWN0Ll9ydmFsdWUpLCBhT2JqZWN0Ll9yc2hhcGUsIGFPYmplY3QuX3JkdHlwZSk7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgLy9rZWVwIGl0IGFzIHJlZ3VsYXIgaWYgdHJhbnNmZXJlZCB0byB0aGUgbWFpbiBhcHBcXFxcbiAgICAgICAgICBiT2JqZWN0ID0gYU9iamVjdDtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXFxcXFxcXCJlcnJvclxcXFxcXFwiKSB7XFxcXG4gICAgICAgIGJPYmplY3QgPSBuZXcgRXJyb3IoYU9iamVjdC5fcnZhbHVlKTtcXFxcbiAgICAgIH0gZWxzZSBpZiAoYU9iamVjdC5fcnR5cGUgPT09IFxcXFxcXFwiZmlsZVxcXFxcXFwiKSB7XFxcXG4gICAgICAgIGlmIChhT2JqZWN0Ll9ydmFsdWUgaW5zdGFuY2VvZiBGaWxlKSB7XFxcXG4gICAgICAgICAgYk9iamVjdCA9IGFPYmplY3QuX3J2YWx1ZTsgLy9wYXRjaCBfcGF0aFxcXFxuXFxcXG4gICAgICAgICAgYk9iamVjdC5fcGF0aCA9IGFPYmplY3QuX3JwYXRoO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgIGJPYmplY3QgPSBuZXcgRmlsZShbYU9iamVjdC5fcnZhbHVlXSwgYU9iamVjdC5fcm5hbWUsIHtcXFxcbiAgICAgICAgICAgIHR5cGU6IGFPYmplY3QuX3JtaW1lXFxcXG4gICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgYk9iamVjdC5fcGF0aCA9IGFPYmplY3QuX3JwYXRoO1xcXFxuICAgICAgICB9XFxcXG4gICAgICB9IGVsc2UgaWYgKGFPYmplY3QuX3J0eXBlID09PSBcXFxcXFxcInR5cGVkYXJyYXlcXFxcXFxcIikge1xcXFxuICAgICAgICBjb25zdCBhcnJheXR5cGUgPSBldmFsKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1xcXFxcXFwiZHR5cGVUb1R5cGVkQXJyYXlcXFxcXFxcIl1bYU9iamVjdC5fcmR0eXBlXSk7XFxcXG4gICAgICAgIGlmICghYXJyYXl0eXBlKSB0aHJvdyBuZXcgRXJyb3IoXFxcXFxcXCJ1bnN1cHBvcnRlZCBkdHlwZTogXFxcXFxcXCIgKyBhT2JqZWN0Ll9yZHR5cGUpO1xcXFxuICAgICAgICBiT2JqZWN0ID0gbmV3IGFycmF5dHlwZShhT2JqZWN0Ll9ydmFsdWUpO1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXFxcXFxcXCJtZW1vcnl2aWV3XFxcXFxcXCIpIHtcXFxcbiAgICAgICAgYk9iamVjdCA9IG5ldyBEYXRhVmlldyhhT2JqZWN0Ll9ydmFsdWUpO1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXFxcXFxcXCJibG9iXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgaWYgKGFPYmplY3QuX3J2YWx1ZSBpbnN0YW5jZW9mIEJsb2IpIHtcXFxcbiAgICAgICAgICBiT2JqZWN0ID0gYU9iamVjdC5fcnZhbHVlO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgIGJPYmplY3QgPSBuZXcgQmxvYihbYU9iamVjdC5fcnZhbHVlXSwge1xcXFxuICAgICAgICAgICAgdHlwZTogYU9iamVjdC5fcm1pbWVcXFxcbiAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXFxcXFxcXCJvcmRlcmVkbWFwXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgYk9iamVjdCA9IG5ldyBNYXAoKGF3YWl0IHRoaXMuX2RlY29kZShhT2JqZWN0Ll9ydmFsdWUsIHdpdGhQcm9taXNlKSkpO1xcXFxuICAgICAgfSBlbHNlIGlmIChhT2JqZWN0Ll9ydHlwZSA9PT0gXFxcXFxcXCJzZXRcXFxcXFxcIikge1xcXFxuICAgICAgICBiT2JqZWN0ID0gbmV3IFNldCgoYXdhaXQgdGhpcy5fZGVjb2RlKGFPYmplY3QuX3J2YWx1ZSwgd2l0aFByb21pc2UpKSk7XFxcXG4gICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAvLyBtYWtlIHN1cmUgYWxsIHRoZSBpbnRlcmZhY2UgZnVuY3Rpb25zIGFyZSBkZWNvZGVkXFxcXG4gICAgICAgIGlmIChhT2JqZWN0Ll9yaW50Zikge1xcXFxuICAgICAgICAgIGNvbnN0IHRlbXAgPSBhT2JqZWN0Ll9ydHlwZTtcXFxcbiAgICAgICAgICBkZWxldGUgYU9iamVjdC5fcnR5cGU7XFxcXG4gICAgICAgICAgYU9iamVjdCA9IGF3YWl0IHRoaXMuX2RlY29kZShhT2JqZWN0LCB3aXRoUHJvbWlzZSk7XFxcXG4gICAgICAgICAgYU9iamVjdC5fcnR5cGUgPSB0ZW1wO1xcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgYk9iamVjdCA9IGFPYmplY3Q7XFxcXG4gICAgICB9XFxcXG4gICAgfSBlbHNlIGlmIChhT2JqZWN0LmNvbnN0cnVjdG9yID09PSBPYmplY3QgfHwgQXJyYXkuaXNBcnJheShhT2JqZWN0KSkge1xcXFxuICAgICAgdmFyIGlzYXJyYXkgPSBBcnJheS5pc0FycmF5KGFPYmplY3QpO1xcXFxuICAgICAgYk9iamVjdCA9IGlzYXJyYXkgPyBbXSA6IHt9O1xcXFxuXFxcXG4gICAgICBmb3IgKGsgaW4gYU9iamVjdCkge1xcXFxuICAgICAgICBpZiAoaXNhcnJheSB8fCBhT2JqZWN0Lmhhc093blByb3BlcnR5KGspKSB7XFxcXG4gICAgICAgICAgdiA9IGFPYmplY3Rba107XFxcXG4gICAgICAgICAgYk9iamVjdFtrXSA9IGF3YWl0IHRoaXMuX2RlY29kZSh2LCB3aXRoUHJvbWlzZSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgIH1cXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgYk9iamVjdCA9IGFPYmplY3Q7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgaWYgKGJPYmplY3QgPT09IHVuZGVmaW5lZCkge1xcXFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwiRmFpbGVkIHRvIGRlY29kZSBvYmplY3RcXFxcXFxcIik7XFxcXG4gICAgfSAvLyBzdG9yZSB0aGUgb2JqZWN0IGlkIGZvciBkaXNwb3NlXFxcXG5cXFxcblxcXFxuICAgIGlmIChhT2JqZWN0Ll9yaW50Zikge1xcXFxuICAgICAgdGhpcy5fb2JqZWN0X3dlYWttYXAuc2V0KGJPYmplY3QsIGFPYmplY3QuX3JpbnRmKTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICByZXR1cm4gYk9iamVjdDtcXFxcbiAgfVxcXFxuXFxcXG4gIGFzeW5jIF93cmFwKGFyZ3MsIGFzSW50ZXJmYWNlKSB7XFxcXG4gICAgdmFyIHdyYXBwZWQgPSBhd2FpdCB0aGlzLl9lbmNvZGUoYXJncywgYXNJbnRlcmZhY2UpO1xcXFxuICAgIHJldHVybiB3cmFwcGVkO1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBVbndyYXBzIHRoZSBzZXQgb2YgYXJndW1lbnRzIGRlbGl2ZXJlZCBmcm9tIHRoZSByZW1vdGUgc2l0ZSxcXFxcbiAgICogcmVwbGFjZXMgYWxsIGNhbGxiYWNrIGlkZW50aWZpZXJzIHdpdGggYSBmdW5jdGlvbiB3aGljaCB3aWxsXFxcXG4gICAqIGluaXRpYXRlIHNlbmRpbmcgdGhhdCBjYWxsYmFjayBpZGVudGlmaWVyIGJhY2sgdG8gb3RoZXIgc2l0ZVxcXFxuICAgKlxcXFxuICAgKiBAcGFyYW0ge09iamVjdH0gYXJncyB0byB1bndyYXBcXFxcbiAgICpcXFxcbiAgICogQHBhcmFtIHtCb29sZWFufSB3aXRoUHJvbWlzZSBpcyB0cnVlIG1lYW5zIHRoaXMgdGhlIGNhbGxiYWNrIHNob3VsZCBjb250YWluIGEgcHJvbWlzZVxcXFxuICAgKlxcXFxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHVud3JhcHBlZCBhcmdzXFxcXG4gICAqL1xcXFxuXFxcXG5cXFxcbiAgYXN5bmMgX3Vud3JhcChhcmdzLCB3aXRoUHJvbWlzZSkge1xcXFxuICAgIHZhciByZXN1bHQgPSBhd2FpdCB0aGlzLl9kZWNvZGUoYXJncywgd2l0aFByb21pc2UpO1xcXFxuICAgIHJldHVybiByZXN1bHQ7XFxcXG4gIH1cXFxcbiAgLyoqXFxcXG4gICAqIEdlbmVyYXRlcyB0aGUgd3JhcHBlZCBmdW5jdGlvbiBjb3JyZXNwb25kaW5nIHRvIGEgc2luZ2xlIHJlbW90ZVxcXFxuICAgKiBjYWxsYmFjay4gV2hlbiB0aGUgZ2VuZXJhdGVkIGZ1bmN0aW9uIGlzIGNhbGxlZCwgaXQgd2lsbCBzZW5kXFxcXG4gICAqIHRoZSBjb3JyZXNwb25kaW5nIG1lc3NhZ2UgdG8gdGhlIHJlbW90ZSBzaXRlIGFza2luZyBpdCB0b1xcXFxuICAgKiBleGVjdXRlIHRoZSBwYXJ0aWN1bGFyIGNhbGxiYWNrIHByZXZpb3VzbHkgc2F2ZWQgZHVyaW5nIGEgY2FsbFxcXFxuICAgKiBieSB0aGUgcmVtb3RlIHNpdGUgYSBtZXRob2QgZnJvbSB0aGUgaW50ZXJmYWNlIG9mIHRoaXMgc2l0ZVxcXFxuICAgKlxcXFxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgb2YgdGhlIHJlbW90ZSBjYWxsYmFjayB0byBleGVjdXRlXFxcXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBhcmdOdW0gYXJndW1lbnQgaW5kZXggb2YgdGhlIGNhbGxiYWNrXFxcXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gd2l0aFByb21pc2UgaXMgdHJ1ZSBtZWFucyB0aGlzIHRoZSBjYWxsYmFjayBzaG91bGQgY29udGFpbiBhIHByb21pc2VcXFxcbiAgICpcXFxcbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSB3cmFwcGVkIHJlbW90ZSBjYWxsYmFja1xcXFxuICAgKi9cXFxcblxcXFxuXFxcXG4gIF9nZW5SZW1vdGVDYWxsYmFjayh0YXJnZXRJZCwgY2lkLCB3aXRoUHJvbWlzZSkge1xcXFxuICAgIHZhciBtZSA9IHRoaXM7XFxcXG4gICAgdmFyIHJlbW90ZUNhbGxiYWNrO1xcXFxuXFxcXG4gICAgaWYgKHdpdGhQcm9taXNlKSB7XFxcXG4gICAgICByZW1vdGVDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcXFxcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcXFxcbiAgICAgICAgICB2YXIgYXJncyA9IGF3YWl0IG1lLl93cmFwKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xcXFxuICAgICAgICAgIHZhciB0cmFuc2ZlcmFibGVzID0gYXJncy5fX3RyYW5zZmVyYWJsZXNfXztcXFxcbiAgICAgICAgICBpZiAodHJhbnNmZXJhYmxlcykgZGVsZXRlIGFyZ3MuX190cmFuc2ZlcmFibGVzX187XFxcXG4gICAgICAgICAgcmVzb2x2ZS5fX3JwY19wYWlyID0gcmVqZWN0O1xcXFxuICAgICAgICAgIHJlamVjdC5fX3JwY19wYWlyID0gcmVzb2x2ZTtcXFxcblxcXFxuICAgICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICBtZS5fY29ubmVjdGlvbi5lbWl0KHtcXFxcbiAgICAgICAgICAgICAgdHlwZTogXFxcXFxcXCJjYWxsYmFja1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICB0YXJnZXRfaWQ6IHRhcmdldElkLFxcXFxuICAgICAgICAgICAgICBpZDogY2lkLFxcXFxuICAgICAgICAgICAgICBhcmdzOiBhcmdzLFxcXFxuICAgICAgICAgICAgICBwcm9taXNlOiBhd2FpdCBtZS5fd3JhcChbcmVzb2x2ZSwgcmVqZWN0XSlcXFxcbiAgICAgICAgICAgIH0sIHRyYW5zZmVyYWJsZXMpO1xcXFxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgIHJlamVjdChgRmFpbGVkIHRvIGV4ZWN0dWUgcmVtb3RlIGNhbGxiYWNrICggaWQ6ICR7Y2lkfSkuYCk7XFxcXG4gICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgIH07XFxcXG5cXFxcbiAgICAgIHJldHVybiByZW1vdGVDYWxsYmFjaztcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgcmVtb3RlQ2FsbGJhY2sgPSBhc3luYyBmdW5jdGlvbiAoKSB7XFxcXG4gICAgICAgIHZhciBhcmdzID0gYXdhaXQgbWUuX3dyYXAoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XFxcXG4gICAgICAgIHZhciB0cmFuc2ZlcmFibGVzID0gYXJncy5fX3RyYW5zZmVyYWJsZXNfXztcXFxcbiAgICAgICAgaWYgKHRyYW5zZmVyYWJsZXMpIGRlbGV0ZSBhcmdzLl9fdHJhbnNmZXJhYmxlc19fO1xcXFxuICAgICAgICByZXR1cm4gbWUuX2Nvbm5lY3Rpb24uZW1pdCh7XFxcXG4gICAgICAgICAgdHlwZTogXFxcXFxcXCJjYWxsYmFja1xcXFxcXFwiLFxcXFxuICAgICAgICAgIHRhcmdldF9pZDogdGFyZ2V0SWQsXFxcXG4gICAgICAgICAgaWQ6IGNpZCxcXFxcbiAgICAgICAgICBhcmdzOiBhcmdzXFxcXG4gICAgICAgIH0sIHRyYW5zZmVyYWJsZXMpO1xcXFxuICAgICAgfTtcXFxcblxcXFxuICAgICAgcmV0dXJuIHJlbW90ZUNhbGxiYWNrO1xcXFxuICAgIH1cXFxcbiAgfVxcXFxuICAvKipcXFxcbiAgICogU2VuZHMgdGhlIG5vdGlmaWNhdGlvbiBtZXNzYWdlIGFuZCBicmVha3MgdGhlIGNvbm5lY3Rpb25cXFxcbiAgICovXFxcXG5cXFxcblxcXFxuICBkaXNjb25uZWN0KCkge1xcXFxuICAgIHRoaXMuX2Nvbm5lY3Rpb24uZW1pdCh7XFxcXG4gICAgICB0eXBlOiBcXFxcXFxcImRpc2Nvbm5lY3RcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XFxcXG4gICAgICB0aGlzLl9jb25uZWN0aW9uLmRpc2Nvbm5lY3QoKTtcXFxcbiAgICB9LCAyMDAwKTtcXFxcbiAgfVxcXFxuXFxcXG59XFxcXG4vKipcXFxcbiAqIFJlZmVyZW5jZVN0b3JlIGlzIGEgc3BlY2lhbCBvYmplY3Qgd2hpY2ggc3RvcmVzIG90aGVyIG9iamVjdHNcXFxcbiAqIGFuZCBwcm92aWRlcyB0aGUgcmVmZXJlbmNlcyAobnVtYmVyKSBpbnN0ZWFkLiBUaGlzIHJlZmVyZW5jZVxcXFxuICogbWF5IHRoZW4gYmUgc2VudCBvdmVyIGEganNvbi1iYXNlZCBjb21tdW5pY2F0aW9uIGNoYW5uZWwgKElQQ1xcXFxuICogdG8gYW5vdGhlciBOb2RlLmpzIHByb2Nlc3Mgb3IgYSBtZXNzYWdlIHRvIHRoZSBXb3JrZXIpLiBPdGhlclxcXFxuICogc2l0ZSBtYXkgdGhlbiBwcm92aWRlIHRoZSByZWZlcmVuY2UgaW4gdGhlIHJlc3BvbmNlIG1lc3NhZ2VcXFxcbiAqIGltcGx5aW5nIHRoZSBnaXZlbiBvYmplY3Qgc2hvdWxkIGJlIGFjdGl2YXRlZC5cXFxcbiAqXFxcXG4gKiBQcmltYXJ5IHVzYWdlIGZvciB0aGUgUmVmZXJlbmNlU3RvcmUgaXMgYSBzdG9yYWdlIGZvciB0aGVcXFxcbiAqIGNhbGxiYWNrcywgd2hpY2ggdGhlcmVmb3JlIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGluaXRpYXRlIGFcXFxcbiAqIGNhbGxiYWNrIGV4ZWN1dGlvbiBieSB0aGUgb3Bwb3NpdGUgc2l0ZSAod2hpY2ggbm9ybWFsbHkgY2Fubm90XFxcXG4gKiBkaXJlY3RseSBleGVjdXRlIGZ1bmN0aW9ucyBvdmVyIHRoZSBjb21tdW5pY2F0aW9uIGNoYW5uZWwpLlxcXFxuICpcXFxcbiAqIEVhY2ggc3RvcmVkIG9iamVjdCBjYW4gb25seSBiZSBmZXRjaGVkIG9uY2UgYW5kIGlzIG5vdFxcXFxuICogYXZhaWxhYmxlIGZvciB0aGUgc2Vjb25kIHRpbWUuIEVhY2ggc3RvcmVkIG9iamVjdCBtdXN0IGJlXFxcXG4gKiBmZXRjaGVkLCBzaW5jZSBvdGhlcndpc2UgaXQgd2lsbCByZW1haW4gc3RvcmVkIGZvcmV2ZXIgYW5kXFxcXG4gKiBjb25zdW1lIG1lbW9yeS5cXFxcbiAqXFxcXG4gKiBTdG9yZWQgb2JqZWN0IGluZGVjZXMgYXJlIHNpbXBseSB0aGUgbnVtYmVycywgd2hpY2ggYXJlIGhvd2V2ZXJcXFxcbiAqIHJlbGVhc2VkIGFsb25nIHdpdGggdGhlIG9iamVjdHMsIGFuZCBhcmUgbGF0ZXIgcmV1c2VkIGFnYWluIChpblxcXFxuICogb3JkZXIgdG8gcG9zdHBvbmUgdGhlIG92ZXJmbG93LCB3aGljaCBzaG91bGQgbm90IGxpa2VseSBoYXBwZW4sXFxcXG4gKiBidXQgYW55d2F5KS5cXFxcbiAqL1xcXFxuXFxcXG5jbGFzcyBSZWZlcmVuY2VTdG9yZSB7XFxcXG4gIGNvbnN0cnVjdG9yKCkge1xcXFxuICAgIHRoaXMuX3N0b3JlID0ge307IC8vIHN0b3JlZCBvYmplY3RcXFxcblxcXFxuICAgIHRoaXMuX2luZGljZXMgPSBbMF07IC8vIHNtYWxsZXN0IGF2YWlsYWJsZSBpbmRpY2VzXFxcXG5cXFxcbiAgICB0aGlzLl9yZWFkeUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7fTtcXFxcblxcXFxuICAgIHRoaXMuX2J1c3lIYW5kbGVyID0gZnVuY3Rpb24gKCkge307XFxcXG5cXFxcbiAgICB0aGlzLl9yZWFkeUhhbmRsZXIoKTtcXFxcbiAgfVxcXFxuICAvKipcXFxcbiAgICogY2FsbCBoYW5kbGVyIHdoZW4gdGhlIHN0b3JlIGlzIGVtcHR5XFxcXG4gICAqXFxcXG4gICAqIEBwYXJhbSB7RlVOQ1RJT059IGlkIG9mIGEgaGFuZGxlclxcXFxuICAgKi9cXFxcblxcXFxuXFxcXG4gIG9uUmVhZHkocmVhZHlIYW5kbGVyKSB7XFxcXG4gICAgdGhpcy5fcmVhZHlIYW5kbGVyID0gcmVhZHlIYW5kbGVyIHx8IGZ1bmN0aW9uICgpIHt9O1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBjYWxsIGhhbmRsZXIgd2hlbiB0aGUgc3RvcmUgaXMgbm90IGVtcHR5XFxcXG4gICAqXFxcXG4gICAqIEBwYXJhbSB7RlVOQ1RJT059IGlkIG9mIGEgaGFuZGxlclxcXFxuICAgKi9cXFxcblxcXFxuXFxcXG4gIG9uQnVzeShidXN5SGFuZGxlcikge1xcXFxuICAgIHRoaXMuX2J1c3lIYW5kbGVyID0gYnVzeUhhbmRsZXIgfHwgZnVuY3Rpb24gKCkge307XFxcXG4gIH1cXFxcbiAgLyoqXFxcXG4gICAqIGdldCB0aGUgbGVuZ3RoIG9mIHRoZSBzdG9yZVxcXFxuICAgKlxcXFxuICAgKi9cXFxcblxcXFxuXFxcXG4gIGdldFN0YWNrKCkge1xcXFxuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9zdG9yZSkubGVuZ3RoO1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBAZnVuY3Rpb24gX2dlbklkKCkgZ2VuZXJhdGVzIHRoZSBuZXcgcmVmZXJlbmNlIGlkXFxcXG4gICAqXFxcXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IHNtYWxsZXN0IGF2YWlsYWJsZSBpZCBhbmQgcmVzZXJ2ZXMgaXRcXFxcbiAgICovXFxcXG5cXFxcblxcXFxuICBfZ2VuSWQoKSB7XFxcXG4gICAgdmFyIGlkO1xcXFxuXFxcXG4gICAgaWYgKHRoaXMuX2luZGljZXMubGVuZ3RoID09PSAxKSB7XFxcXG4gICAgICBpZCA9IHRoaXMuX2luZGljZXNbMF0rKztcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgaWQgPSB0aGlzLl9pbmRpY2VzLnNoaWZ0KCk7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgcmV0dXJuIGlkO1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBSZWxlYXNlcyB0aGUgZ2l2ZW4gcmVmZXJlbmNlIGlkIHNvIHRoYXQgaXQgd2lsbCBiZSBhdmFpbGFibGUgYnlcXFxcbiAgICogYW5vdGhlciBvYmplY3Qgc3RvcmVkXFxcXG4gICAqXFxcXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCB0byByZWxlYXNlXFxcXG4gICAqL1xcXFxuXFxcXG5cXFxcbiAgX3JlbGVhc2VJZChpZCkge1xcXFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5faW5kaWNlcy5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgaWYgKGlkIDwgdGhpcy5faW5kaWNlc1tpXSkge1xcXFxuICAgICAgICB0aGlzLl9pbmRpY2VzLnNwbGljZShpLCAwLCBpZCk7XFxcXG5cXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgICB9XFxcXG4gICAgfSAvLyBjbGVhbmluZy11cCB0aGUgc2VxdWVuY2UgdGFpbFxcXFxuXFxcXG5cXFxcbiAgICBmb3IgKGkgPSB0aGlzLl9pbmRpY2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XFxcXG4gICAgICBpZiAodGhpcy5faW5kaWNlc1tpXSAtIDEgPT09IHRoaXMuX2luZGljZXNbaSAtIDFdKSB7XFxcXG4gICAgICAgIHRoaXMuX2luZGljZXMucG9wKCk7XFxcXG4gICAgICB9IGVsc2Uge1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICAgIH1cXFxcbiAgICB9XFxcXG4gIH1cXFxcbiAgLyoqXFxcXG4gICAqIFN0b3JlcyB0aGUgZ2l2ZW4gb2JqZWN0IGFuZCByZXR1cm5zIHRoZSByZWZlcm5jZSBpZCBpbnN0ZWFkXFxcXG4gICAqXFxcXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogdG8gc3RvcmVcXFxcbiAgICpcXFxcbiAgICogQHJldHVybnMge051bWJlcn0gcmVmZXJlbmNlIGlkIG9mIHRoZSBzdG9yZWQgb2JqZWN0XFxcXG4gICAqL1xcXFxuXFxcXG5cXFxcbiAgcHV0KG9iaikge1xcXFxuICAgIGlmICh0aGlzLl9idXN5SGFuZGxlciAmJiBPYmplY3Qua2V5cyh0aGlzLl9zdG9yZSkubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgICB0aGlzLl9idXN5SGFuZGxlcigpO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIHZhciBpZCA9IHRoaXMuX2dlbklkKCk7XFxcXG5cXFxcbiAgICB0aGlzLl9zdG9yZVtpZF0gPSBvYmo7XFxcXG4gICAgcmV0dXJuIGlkO1xcXFxuICB9XFxcXG4gIC8qKlxcXFxuICAgKiBSZXRyaWV2ZXMgcHJldmlvdXNseSBzdG9yZWQgb2JqZWN0IGFuZCByZWxlYXNlcyBpdHMgcmVmZXJlbmNlXFxcXG4gICAqXFxcXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBvZiBhbiBvYmplY3QgdG8gcmV0cmlldmVcXFxcbiAgICovXFxcXG5cXFxcblxcXFxuICBmZXRjaChpZCkge1xcXFxuICAgIHZhciBvYmogPSB0aGlzLl9zdG9yZVtpZF07XFxcXG5cXFxcbiAgICBpZiAob2JqICYmICFvYmouX19yZW1vdGVfbWV0aG9kKSB7XFxcXG4gICAgICBkZWxldGUgdGhpcy5fc3RvcmVbaWRdO1xcXFxuXFxcXG4gICAgICB0aGlzLl9yZWxlYXNlSWQoaWQpO1xcXFxuXFxcXG4gICAgICBpZiAodGhpcy5fcmVhZHlIYW5kbGVyICYmIE9iamVjdC5rZXlzKHRoaXMuX3N0b3JlKS5sZW5ndGggPT09IDApIHtcXFxcbiAgICAgICAgdGhpcy5fcmVhZHlIYW5kbGVyKCk7XFxcXG4gICAgICB9XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgaWYgKG9iaiAmJiBvYmouX19ycGNfcGFpcikge1xcXFxuICAgICAgY29uc3QgX2lkID0gZ2V0S2V5QnlWYWx1ZSh0aGlzLl9zdG9yZSwgb2JqLl9fcnBjX3BhaXIpO1xcXFxuXFxcXG4gICAgICB0aGlzLmZldGNoKF9pZCk7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgcmV0dXJuIG9iajtcXFxcbiAgfVxcXFxuXFxcXG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lMaTl6Y21NdmNuQmpMbXB6TG1weklpd2ljMjkxY21ObGN5STZXeUozWldKd1lXTnJPaTh2YVcxcWIzbFNVRU12TGk5emNtTXZjbkJqTG1welB6TTFOV1lpWFN3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIyNTBZV2x1Y3lCMGFHVWdVbEJESUc5aWFtVmpkQ0IxYzJWa0lHSnZkR2dnWW5rZ2RHaGxJR0Z3Y0d4cFkyRjBhVzl1WEc0Z0tpQnphWFJsTENCaGJtUWdZbmtnWldGamFDQndiSFZuYVc1Y2JpQXFMMXh1YVcxd2IzSjBJSHRjYmlBZ2NtRnVaRWxrTEZ4dUlDQjBlWEJsWkVGeWNtRjVWRzlFZEhsd1pTeGNiaUFnWkhSNWNHVlViMVI1Y0dWa1FYSnlZWGtzWEc0Z0lFMWxjM05oWjJWRmJXbDBkR1Z5WEc1OUlHWnliMjBnWENJdUwzVjBhV3h6TG1welhDSTdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQkJVRWxmVmtWU1UwbFBUaUE5SUZ3aU1DNHlMak5jSWp0Y2JseHVZMjl1YzNRZ1FYSnlZWGxDZFdabVpYSldhV1YzSUQwZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LRnh1SUNCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9ibVYzSUZWcGJuUTRRWEp5WVhrb0tTbGNiaWt1WTI5dWMzUnlkV04wYjNJN1hHNWNibVoxYm1OMGFXOXVJRjloY0hCbGJtUkNkV1ptWlhJb1luVm1abVZ5TVN3Z1luVm1abVZ5TWlrZ2UxeHVJQ0JqYjI1emRDQjBiWEFnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hpZFdabVpYSXhMbUo1ZEdWTVpXNW5kR2dnS3lCaWRXWm1aWEl5TG1KNWRHVk1aVzVuZEdncE8xeHVJQ0IwYlhBdWMyVjBLRzVsZHlCVmFXNTBPRUZ5Y21GNUtHSjFabVpsY2pFcExDQXdLVHRjYmlBZ2RHMXdMbk5sZENodVpYY2dWV2x1ZERoQmNuSmhlU2hpZFdabVpYSXlLU3dnWW5WbVptVnlNUzVpZVhSbFRHVnVaM1JvS1R0Y2JpQWdjbVYwZFhKdUlIUnRjQzVpZFdabVpYSTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRXRsZVVKNVZtRnNkV1VvYjJKcVpXTjBMQ0IyWVd4MVpTa2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbXRsZVhNb2IySnFaV04wS1M1bWFXNWtLR3RsZVNBOVBpQnZZbXBsWTNSYmEyVjVYU0E5UFQwZ2RtRnNkV1VwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1SbGVFOWlhbVZqZENodlltb3NJR2x6S1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYVhNZ1BUMGdYQ0p6ZEhKcGJtZGNJaWtnY21WMGRYSnVJR2x1WkdWNFQySnFaV04wS0c5aWFpd2dhWE11YzNCc2FYUW9YQ0l1WENJcEtUdGNiaUFnWld4elpTQnBaaUFvYVhNdWJHVnVaM1JvSUQwOUlEQXBJSEpsZEhWeWJpQnZZbW83WEc0Z0lHVnNjMlVnY21WMGRYSnVJR2x1WkdWNFQySnFaV04wS0c5aWFsdHBjMXN3WFYwc0lHbHpMbk5zYVdObEtERXBLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlNVRU1nYjJKcVpXTjBJSEpsY0hKbGMyVnVkSE1nWVNCemFXNW5iR1VnYzJsMFpTQnBiaUIwYUdWY2JpQXFJR052YlcxMWJtbGpZWFJwYjI0Z2NISnZkRzlqYjJ3Z1ltVjBkMlZsYmlCMGFHVWdZWEJ3YkdsallYUnBiMjRnWVc1a0lIUm9aU0J3YkhWbmFXNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1kyOXVibVZqZEdsdmJpQmhJSE53WldOcFlXd2diMkpxWldOMElHRnNiRzkzYVc1bklIUnZJSE5sYm1SY2JpQXFJR0Z1WkNCeVpXTmxhWFpsSUcxbGMzTmhaMlZ6SUdaeWIyMGdkR2hsSUc5d2NHOXphWFJsSUhOcGRHVWdLR0poYzJsallXeHNlU0JwZEZ4dUlDb2djMmh2ZFd4a0lHOXViSGtnY0hKdmRtbGtaU0J6Wlc1a0tDa2dZVzVrSUc5dVRXVnpjMkZuWlNncElHMWxkR2h2WkhNcFhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QlNVRU1nWlhoMFpXNWtjeUJOWlhOellXZGxSVzFwZEhSbGNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHTnZibTVsWTNScGIyNHNJR052Ym1acFp5d2dZMjlrWldOektTQjdYRzRnSUNBZ2MzVndaWElvWTI5dVptbG5JQ1ltSUdOdmJtWnBaeTVrWldKMVp5azdYRzRnSUNBZ2RHaHBjeTVmWTI5dWJtVmpkR2x2YmlBOUlHTnZibTVsWTNScGIyNDdYRzRnSUNBZ2RHaHBjeTVqYjI1bWFXY2dQU0JqYjI1bWFXY2dmSHdnZTMwN1hHNGdJQ0FnZEdocGN5NWZZMjlrWldOeklEMGdZMjlrWldOeklIeDhJSHQ5TzF4dUlDQWdJSFJvYVhNdVgyOWlhbVZqZEY5emRHOXlaU0E5SUh0OU8xeHVJQ0FnSUhSb2FYTXVYMjFsZEdodlpGOTNaV0ZyYldGd0lEMGdibVYzSUZkbFlXdE5ZWEFvS1R0Y2JpQWdJQ0IwYUdsekxsOXZZbXBsWTNSZmQyVmhhMjFoY0NBOUlHNWxkeUJYWldGclRXRndLQ2s3WEc0Z0lDQWdkR2hwY3k1ZmJHOWpZV3hmWVhCcElEMGdiblZzYkR0Y2JpQWdJQ0F2THlCdFlXdGxJSE4xY21VZ2RHaGxjbVVnYVhNZ1lXNGdaWGhsWTNWMFpTQm1kVzVqZEdsdmJseHVJQ0FnSUdOdmJuTjBJRzVoYldVZ1BTQjBhR2x6TG1OdmJtWnBaeTV1WVcxbE8xeHVJQ0FnSUhSb2FYTXVYMk52Ym01bFkzUnBiMjR1WlhobFkzVjBaU0E5WEc0Z0lDQWdJQ0IwYUdsekxsOWpiMjV1WldOMGFXOXVMbVY0WldOMWRHVWdmSHhjYmlBZ0lDQWdJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUdOdmJtNWxZM1JwYjI0dVpYaGxZM1YwWlNCdWIzUWdhVzF3YkdWdFpXNTBaV1FnS0dsdUlGd2lKSHR1WVcxbGZWd2lLV0FwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0IwYUdsekxsOXpkRzl5WlNBOUlHNWxkeUJTWldabGNtVnVZMlZUZEc5eVpTZ3BPMXh1SUNBZ0lIUm9hWE11WDIxbGRHaHZaRjl5WldaeklEMGdibVYzSUZKbFptVnlaVzVqWlZOMGIzSmxLQ2s3WEc0Z0lDQWdkR2hwY3k1ZmJXVjBhRzlrWDNKbFpuTXViMjVTWldGa2VTZ29LU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbDltYVhKbEtGd2ljbVZ0YjNSbFNXUnNaVndpS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0IwYUdsekxsOXRaWFJvYjJSZmNtVm1jeTV2YmtKMWMza29LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWm1seVpTaGNJbkpsYlc5MFpVSjFjM2xjSWlrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnZEdocGN5NWZjMlYwZFhCTlpYTnpZV2RsU0dGdWJHUmxjbk1vS1R0Y2JpQWdmVnh1WEc0Z0lHbHVhWFFvS1NCN1hHNGdJQ0FnZEdocGN5NWZZMjl1Ym1WamRHbHZiaTVsYldsMEtIdGNiaUFnSUNBZ0lIUjVjR1U2SUZ3aWFXNXBkR2xoYkdsNlpXUmNJaXhjYmlBZ0lDQWdJR052Ym1acFp6b2dkR2hwY3k1amIyNW1hV2NzWEc0Z0lDQWdJQ0J3WldWeVgybGtPaUIwYUdsekxsOWpiMjV1WldOMGFXOXVMbkJsWlhKZmFXUmNiaUFnSUNCOUtUdGNiaUFnZlZ4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwSUdFZ2FHRnVaR3hsY2lCMGJ5QmlaU0JqWVd4c1pXUWdkMmhsYmlCeVpXTmxhWFpsWkNCaElISmxjM0J2Ym1ObElHWnliMjBnZEdobFhHNGdJQ0FxSUhKbGJXOTBaU0J6YVhSbElISmxjRzl5ZEdsdVp5QjBhR0YwSUhSb1pTQndjbVYyYVc5MWMyeDVJSEJ5YjNacFpHVmtJR2x1ZEdWeVptRmpaVnh1SUNBZ0tpQm9ZWE1nWW1WbGJpQnpkV05qWlhOelpuVnNiSGtnYzJWMElHRnpJSEpsYlc5MFpTQm1iM0lnZEdoaGRDQnphWFJsWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHaGhibVJzWlhKY2JpQWdJQ292WEc1Y2JpQWdaMlYwVW1WdGIzUmxRMkZzYkZOMFlXTnJLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dFpYUm9iMlJmY21WbWN5NW5aWFJUZEdGamF5Z3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5SUhObGRDQnZaaUJ5WlcxdmRHVWdhVzUwWlhKbVlXTmxJRzFsZEdodlpITmNiaUFnSUNvdlhHNGdJR2RsZEZKbGJXOTBaU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnRiM1JsWDJsdWRHVnlabUZqWlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaWFJ6SUhSb1pTQnBiblJsY21aaFkyVWdiMllnZEdocGN5QnphWFJsSUcxaGEybHVaeUJwZENCaGRtRnBiR0ZpYkdVZ2RHOGdkR2hsWEc0Z0lDQXFJSEpsYlc5MFpTQnphWFJsSUdKNUlITmxibVJwYm1jZ1lTQnRaWE56WVdkbElIZHBkR2dnWVNCelpYUWdiMllnYldWMGFHOWtjeUJ1WVcxbGMxeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdYMmx1ZEdWeVptRmpaU0IwYnlCelpYUmNiaUFnSUNvdlhHNGdJSE5sZEVsdWRHVnlabUZqWlNoZmFXNTBaWEptWVdObExDQmpiMjVtYVdjcElIdGNiaUFnSUNCamIyNW1hV2NnUFNCamIyNW1hV2NnZkh3Z2UzMDdYRzRnSUNBZ2RHaHBjeTVqYjI1bWFXY3VibUZ0WlNBOUlHTnZibVpwWnk1dVlXMWxJSHg4SUhSb2FYTXVZMjl1Wm1sbkxtNWhiV1U3WEc0Z0lDQWdkR2hwY3k1amIyNW1hV2N1WkdWelkzSnBjSFJwYjI0Z1BTQmpiMjVtYVdjdVpHVnpZM0pwY0hScGIyNGdmSHdnZEdocGN5NWpiMjVtYVdjdVpHVnpZM0pwY0hScGIyNDdYRzRnSUNBZ2FXWWdLSFJvYVhNdVkyOXVabWxuTG1admNuZGhjbVJwYm1kZlpuVnVZM1JwYjI1ektTQjdYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQm1kVzVqWDI1aGJXVWdiMllnZEdocGN5NWpiMjVtYVdjdVptOXlkMkZ5WkdsdVoxOW1kVzVqZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdYM0psYlc5MFpTQTlJSFJvYVhNdVgzSmxiVzkwWlY5cGJuUmxjbVpoWTJVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hmY21WdGIzUmxXMloxYm1OZmJtRnRaVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWDJsdWRHVnlabUZqWlM1amIyNXpkSEoxWTNSdmNpQTlQVDBnVDJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVY5cGJuUmxjbVpoWTJWYlpuVnVZMTl1WVcxbFhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZhVzUwWlhKbVlXTmxXMloxYm1OZmJtRnRaVjBnUFNBb0xpNHVZWEpuY3lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjl5WlcxdmRHVmJablZ1WTE5dVlXMWxYU2d1TGk1aGNtZHpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0Y5cGJuUmxjbVpoWTJVdVkyOXVjM1J5ZFdOMGIzSXVZMjl1YzNSeWRXTjBiM0lnUFQwOUlFWjFibU4wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVjlwYm5SbGNtWmhZMlV1WTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbFcyWjFibU5mYm1GdFpWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYMmx1ZEdWeVptRmpaUzVqYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dWYlpuVnVZMTl1WVcxbFhTQTlJQ2d1TGk1aGNtZHpLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzSmxiVzkwWlZ0bWRXNWpYMjVoYldWZEtDNHVMbUZ5WjNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbDlzYjJOaGJGOWhjR2tnUFNCZmFXNTBaWEptWVdObE8xeHVJQ0FnSUhSb2FYTXVYMlpwY21Vb1hDSnBiblJsY21aaFkyVkJkbUZwYkdGaWJHVmNJaWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVnVaSE1nZEdobElHRmpkSFZoYkNCcGJuUmxjbVpoWTJVZ2RHOGdkR2hsSUhKbGJXOTBaU0J6YVhSbElIVndiMjRnYVhRZ2QyRnpYRzRnSUNBcUlIVndaR0YwWldRZ2IzSWdZbmtnWVNCemNHVmphV0ZzSUhKbGNYVmxjM1FnYjJZZ2RHaGxJSEpsYlc5MFpTQnphWFJsWEc0Z0lDQXFMMXh1SUNCelpXNWtTVzUwWlhKbVlXTmxLQ2tnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTVmYkc5allXeGZZWEJwS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKcGJuUmxjbVpoWTJVZ2FYTWdibTkwSUhObGRDNWNJaWs3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11WDJWdVkyOWtaU2gwYUdsekxsOXNiMk5oYkY5aGNHa3NJSFJ5ZFdVcExuUm9aVzRvWVhCcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyTnZibTVsWTNScGIyNHVaVzFwZENoN0lIUjVjR1U2SUZ3aWMyVjBTVzUwWlhKbVlXTmxYQ0lzSUdGd2FUb2dZWEJwSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYMlJwYzNCdmMyVlBZbXBsWTNRb2IySnFaV04wU1dRcElIdGNiaUFnSUNCcFppQW9kR2hwY3k1ZmIySnFaV04wWDNOMGIzSmxXMjlpYW1WamRFbGtYU2tnZTF4dUlDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdVgyOWlhbVZqZEY5emRHOXlaVnR2WW1wbFkzUkpaRjA3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1QySnFaV04wSUNocFpEMGtlMjlpYW1WamRFbGtmU2tnYm05MElHWnZkVzVrTG1BcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHUnBjM0J2YzJWUFltcGxZM1FvYjJKcUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDl2WW1wbFkzUmZkMlZoYTIxaGNDNW9ZWE1vYjJKcUtTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZZbXBsWTNSSlpDQTlJSFJvYVhNdVgyOWlhbVZqZEY5M1pXRnJiV0Z3TG1kbGRDaHZZbW9wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1dVpXTjBhVzl1TG05dVkyVW9YQ0prYVhOd2IzTmxaRndpTENCa1lYUmhJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNWxjbkp2Y2lrZ2NtVnFaV04wS0c1bGR5QkZjbkp2Y2loa1lYUmhMbVZ5Y205eUtTazdYRzRnSUNBZ0lDQWdJQ0FnWld4elpTQnlaWE52YkhabEtDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1dVpXTjBhVzl1TG1WdGFYUW9lMXh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRndpWkdsemNHOXpaVTlpYW1WamRGd2lMRnh1SUNBZ0lDQWdJQ0FnSUc5aWFtVmpkRjlwWkRvZ2IySnFaV04wU1dSY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkpiblpoYkdsa0lHOWlhbVZqZEZ3aUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJJWVc1a2JHVnpJR0VnYldWemMyRm5aU0JtY205dElIUm9aU0J5WlcxdmRHVWdjMmwwWlZ4dUlDQWdLaTljYmlBZ0x5OGdkbUZ5SUdOaGJHeGlZV05yWDNKbFp5QTlJRzVsZHlCU1pXZEZlSEFvWENKdmJuVndaR0YwWlh4eWRXNGtYQ0lwWEc0Z0lGOXpaWFIxY0UxbGMzTmhaMlZJWVc1c1pHVnljeWdwSUh0Y2JpQWdJQ0IwYUdsekxsOWpiMjV1WldOMGFXOXVMbTl1S0Z3aWFXNXBkRndpTENCMGFHbHpMbWx1YVhRcE8xeHVJQ0FnSUhSb2FYTXVYMk52Ym01bFkzUnBiMjR1YjI0b1hDSmxlR1ZqZFhSbFhDSXNJR1JoZEdFZ1BUNGdlMXh1SUNBZ0lDQWdVSEp2YldselpTNXlaWE52YkhabEtIUm9hWE11WDJOdmJtNWxZM1JwYjI0dVpYaGxZM1YwWlNoa1lYUmhMbU52WkdVcEtWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5dWJtVmpkR2x2Ymk1bGJXbDBLSHNnZEhsd1pUb2dYQ0psZUdWamRYUmxaRndpSUgwcE8xeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0F1WTJGMFkyZ29aU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lobEtUdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOWpiMjV1WldOMGFXOXVMbVZ0YVhRb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dYQ0psZUdWamRYUmxaRndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJNklGTjBjbWx1WnlobEtWeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lIUm9hWE11WDJOdmJtNWxZM1JwYjI0dWIyNG9YQ0p0WlhSb2IyUmNJaXdnWVhONWJtTWdaR0YwWVNBOVBpQjdYRzRnSUNBZ0lDQnNaWFFnY21WemIyeDJaU3dnY21WcVpXTjBMQ0J0WlhSb2IyUXNJR0Z5WjNNc0lISmxjM1ZzZER0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhMbkJ5YjIxcGMyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCYmNtVnpiMngyWlN3Z2NtVnFaV04wWFNBOUlHRjNZV2wwSUhSb2FYTXVYM1Z1ZDNKaGNDaGtZWFJoTG5CeWIyMXBjMlVzSUdaaGJITmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0JmYVc1MFpYSm1ZV05sSUQwZ2RHaHBjeTVmYjJKcVpXTjBYM04wYjNKbFcyUmhkR0V1YjJKcVpXTjBYMmxrWFR0Y2JpQWdJQ0FnSUNBZ2JXVjBhRzlrSUQwZ2FXNWtaWGhQWW1wbFkzUW9YMmx1ZEdWeVptRmpaU3dnWkdGMFlTNXVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ1lYSm5jeUE5SUdGM1lXbDBJSFJvYVhNdVgzVnVkM0poY0Noa1lYUmhMbUZ5WjNNc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVM1d2NtOXRhWE5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdiV1YwYUc5a0xtRndjR3g1S0Y5cGJuUmxjbVpoWTJVc0lHRnlaM01wTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENCcGJuTjBZVzVqWlc5bUlGQnliMjFwYzJVZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNodFpYUm9iMlF1WTI5dWMzUnlkV04wYjNJZ0ppWWdiV1YwYUc5a0xtTnZibk4wY25WamRHOXlMbTVoYldVZ1BUMDlJRndpUVhONWJtTkdkVzVqZEdsdmJsd2lLVnh1SUNBZ0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMblJvWlc0b2NtVnpiMngyWlNrdVkyRjBZMmdvY21WcVpXTjBLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWE4xYkhRcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCdFpYUm9iMlF1WVhCd2JIa29YMmx1ZEdWeVptRmpaU3dnWVhKbmN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0hSb2FYTXVZMjl1Wm1sbkxtNWhiV1VzSUdWeWNpazdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnZEdocGN5NWZZMjl1Ym1WamRHbHZiaTV2YmloY0ltTmhiR3hpWVdOclhDSXNJR0Z6ZVc1aklHUmhkR0VnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJSEpsYzI5c2RtVXNJSEpsYW1WamRDd2diV1YwYUc5a0xDQmhjbWR6TENCeVpYTjFiSFE3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNXdjbTl0YVhObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnVzNKbGMyOXNkbVVzSUhKbGFtVmpkRjBnUFNCaGQyRnBkQ0IwYUdsekxsOTFibmR5WVhBb1pHRjBZUzV3Y205dGFYTmxMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0V1Y0hKdmJXbHpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHMWxkR2h2WkNBOUlIUm9hWE11WDNOMGIzSmxMbVpsZEdOb0tHUmhkR0V1YVdRcE8xeHVJQ0FnSUNBZ0lDQWdJR0Z5WjNNZ1BTQmhkMkZwZENCMGFHbHpMbDkxYm5keVlYQW9aR0YwWVM1aGNtZHpMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXMWxkR2h2WkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJa05oYkd4aVlXTnJJR1oxYm1OMGFXOXVJR05oYmlCdmJteDVJR05oYkd4bFpDQnZibU5sTENCcFppQjViM1VnZDJGdWRDQjBieUJqWVd4c0lHRWdablZ1WTNScGIyNGdabTl5SUcxMWJIUnBjR3hsSUhScGJXVnpMQ0J3YkdWaGMyVWdiV0ZyWlNCcGRDQmhjeUJoSUhCc2RXZHBiaUJoY0drZ1puVnVZM1JwYjI0dUlGTmxaU0JvZEhSd2N6b3ZMMmx0YW05NUxtbHZMMlJ2WTNNZ1ptOXlJRzF2Y21VZ1pHVjBZV2xzY3k1Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnY21WemRXeDBJRDBnYldWMGFHOWtMbUZ3Y0d4NUtHNTFiR3dzSUdGeVozTXBPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0JwYm5OMFlXNWpaVzltSUZCeWIyMXBjMlVnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2h0WlhSb2IyUXVZMjl1YzNSeWRXTjBiM0lnSmlZZ2JXVjBhRzlrTG1OdmJuTjBjblZqZEc5eUxtNWhiV1VnUFQwOUlGd2lRWE41Ym1OR2RXNWpkR2x2Ymx3aUtWeHVJQ0FnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExuUm9aVzRvY21WemIyeDJaU2t1WTJGMFkyZ29jbVZxWldOMEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYTjFiSFFwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J0WlhSb2IyUWdQU0IwYUdsekxsOXpkRzl5WlM1bVpYUmphQ2hrWVhSaExtbGtLVHRjYmlBZ0lDQWdJQ0FnSUNCaGNtZHpJRDBnWVhkaGFYUWdkR2hwY3k1ZmRXNTNjbUZ3S0dSaGRHRXVZWEpuY3l3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z0WlhSb2IyUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKUWJHVmhjMlVnYm05MGFXTmxJSFJvWVhRZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI0Z1kyRnVJRzl1YkhrZ1kyRnNiR1ZrSUc5dVkyVXNJR2xtSUhsdmRTQjNZVzUwSUhSdklHTmhiR3dnWVNCbWRXNWpkR2x2YmlCbWIzSWdiWFZzZEdsd2JHVWdkR2x0WlhNc0lIQnNaV0Z6WlNCdFlXdGxJR2wwSUdGeklHRWdjR3gxWjJsdUlHRndhU0JtZFc1amRHbHZiaTRnVTJWbElHaDBkSEJ6T2k4dmFXMXFiM2t1YVc4dlpHOWpjeUJtYjNJZ2JXOXlaU0JrWlhSaGFXeHpMbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnRaWFJvYjJRdVlYQndiSGtvYm5Wc2JDd2dZWEpuY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLSFJvYVhNdVkyOXVabWxuTG01aGJXVXNJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WldwbFkzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lIUm9hWE11WDJOdmJtNWxZM1JwYjI0dWIyNG9YQ0prYVhOd2IzTmxUMkpxWldOMFhDSXNJR1JoZEdFZ1BUNGdlMXh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdsemNHOXpaVTlpYW1WamRDaGtZWFJoTG05aWFtVmpkRjlwWkNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOdmJtNWxZM1JwYjI0dVpXMXBkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVG9nWENKa2FYTndiM05sWkZ3aVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR1VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1dVpXTjBhVzl1TG1WdGFYUW9lMXh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRndpWkdsemNHOXpaV1JjSWl4Y2JpQWdJQ0FnSUNBZ0lDQmxjbkp2Y2pvZ1UzUnlhVzVuS0dVcFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lIUm9hWE11WDJOdmJtNWxZM1JwYjI0dWIyNG9YQ0p6WlhSSmJuUmxjbVpoWTJWY0lpd2daR0YwWVNBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TGw5elpYUlNaVzF2ZEdWSmJuUmxjbVpoWTJVb1pHRjBZUzVoY0drcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUhSb2FYTXVYMk52Ym01bFkzUnBiMjR1YjI0b1hDSm5aWFJKYm5SbGNtWmhZMlZjSWl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NWZabWx5WlNoY0ltZGxkRWx1ZEdWeVptRmpaVndpS1R0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5c2IyTmhiRjloY0drcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXNWtTVzUwWlhKbVlXTmxLQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVZMlVvWENKcGJuUmxjbVpoWTJWQmRtRnBiR0ZpYkdWY0lpd2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRWx1ZEdWeVptRmpaU2dwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnSUNCMGFHbHpMbDlqYjI1dVpXTjBhVzl1TG05dUtGd2lhVzUwWlhKbVlXTmxVMlYwUVhOU1pXMXZkR1ZjSWl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NWZabWx5WlNoY0ltbHVkR1Z5Wm1GalpWTmxkRUZ6VW1WdGIzUmxYQ0lwTzF4dUlDQWdJSDBwTzF4dUlDQWdJSFJvYVhNdVgyTnZibTVsWTNScGIyNHViMjRvWENKa2FYTmpiMjV1WldOMFhDSXNJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11WDJacGNtVW9YQ0ppWldadmNtVkVhWE5qYjI1dVpXTjBYQ0lwTzF4dUlDQWdJQ0FnZEdocGN5NWZZMjl1Ym1WamRHbHZiaTVrYVhOamIyNXVaV04wS0NrN1hHNGdJQ0FnSUNCMGFHbHpMbDltYVhKbEtGd2laR2x6WTI5dWJtVmpkR1ZrWENJcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sYm1SeklHRWdjbVZ4ZFdWemRITWdkRzhnZEdobElISmxiVzkwWlNCemFYUmxJR0Z6YTJsdVp5QnBkQ0IwYnlCd2NtOTJhV1JsSUdsMGMxeHVJQ0FnS2lCamRYSnlaVzUwSUdsdWRHVnlabUZqWlZ4dUlDQWdLaTljYmlBZ2NtVnhkV1Z6ZEZKbGJXOTBaU2dwSUh0Y2JpQWdJQ0IwYUdsekxsOWpiMjV1WldOMGFXOXVMbVZ0YVhRb2V5QjBlWEJsT2lCY0ltZGxkRWx1ZEdWeVptRmpaVndpSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYMjVrWVhKeVlYa29kSGx3WldSQmNuSmhlU3dnYzJoaGNHVXNJR1IwZVhCbEtTQjdYRzRnSUNBZ2RtRnlJRjlrZEhsd1pTQTlJSFI1Y0dWa1FYSnlZWGxVYjBSMGVYQmxXM1I1Y0dWa1FYSnlZWGt1WTI5dWMzUnlkV04wYjNJdWJtRnRaVjA3WEc0Z0lDQWdhV1lnS0dSMGVYQmxJQ1ltSUdSMGVYQmxJQ0U5UFNCZlpIUjVjR1VwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRndpWkhSNWNHVWdaRzlsYzI0bmRDQnRZWFJqYUNCMGFHVWdkSGx3WlNCdlppQjBhR1VnWVhKeVlYazZJRndpSUN0Y2JpQWdJQ0FnSUNBZ1gyUjBlWEJsSUN0Y2JpQWdJQ0FnSUNBZ1hDSWdJVDBnWENJZ0sxeHVJQ0FnSUNBZ0lDQmtkSGx3WlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjMmhoY0dVZ1BTQnphR0Z3WlNCOGZDQmJkSGx3WldSQmNuSmhlUzVzWlc1bmRHaGRPMXh1SUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNCZmNuUjVjR1U2SUZ3aWJtUmhjbkpoZVZ3aUxGeHVJQ0FnSUNBZ1gzSjJZV3gxWlRvZ2RIbHdaV1JCY25KaGVTNWlkV1ptWlhJc1hHNGdJQ0FnSUNCZmNuTm9ZWEJsT2lCemFHRndaU3hjYmlBZ0lDQWdJRjl5WkhSNWNHVTZJRjlrZEhsd1pWeHVJQ0FnSUgwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwY3lCMGFHVWdibVYzSUhKbGJXOTBaU0JwYm5SbGNtWmhZMlVnY0hKdmRtbGtaV1FnWW5rZ2RHaGxJRzkwYUdWeUlITnBkR1ZjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnYm1GdFpYTWdiR2x6ZENCdlppQm1kVzVqZEdsdmJpQnVZVzFsYzF4dUlDQWdLaTljYmlBZ1gzTmxkRkpsYlc5MFpVbHVkR1Z5Wm1GalpTaGhjR2twSUh0Y2JpQWdJQ0IwYUdsekxsOWtaV052WkdVb1lYQnBLUzUwYUdWdUtHbHVkR1lnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTVmY21WdGIzUmxYMmx1ZEdWeVptRmpaU0E5SUdsdWRHWTdYRzRnSUNBZ0lDQjBhR2x6TGw5bWFYSmxLRndpY21WdGIzUmxVbVZoWkhsY0lpazdYRzRnSUNBZ0lDQjBhR2x6TGw5eVpYQnZjblJTWlcxdmRHVlRaWFFvS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaVzVsY21GMFpYTWdkR2hsSUhkeVlYQndaV1FnWm5WdVkzUnBiMjRnWTI5eWNtVnpjRzl1WkdsdVp5QjBieUJoSUhOcGJtZHNaU0J5WlcxdmRHVmNiaUFnSUNvZ2JXVjBhRzlrTGlCWGFHVnVJSFJvWlNCblpXNWxjbUYwWldRZ1puVnVZM1JwYjI0Z2FYTWdZMkZzYkdWa0xDQnBkQ0IzYVd4c0lITmxibVFnZEdobFhHNGdJQ0FxSUdOdmNuSmxjM0J2Ym1ScGJtY2diV1Z6YzJGblpTQjBieUIwYUdVZ2NtVnRiM1JsSUhOcGRHVWdZWE5yYVc1bklHbDBJSFJ2SUdWNFpXTjFkR1ZjYmlBZ0lDb2dkR2hsSUhCaGNuUnBZM1ZzWVhJZ2JXVjBhRzlrSUc5bUlHbDBjeUJwYm5SbGNtWmhZMlZjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUc1aGJXVWdiMllnZEdobElISmxiVzkwWlNCdFpYUm9iMlJjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwWjFibU4wYVc5dWZTQjNjbUZ3Y0dWa0lISmxiVzkwWlNCdFpYUm9iMlJjYmlBZ0lDb3ZYRzRnSUY5blpXNVNaVzF2ZEdWTlpYUm9iMlFvZEdGeVoyVjBTV1FzSUc1aGJXVXNJRzlpYW1WamRFbGtLU0I3WEc0Z0lDQWdkbUZ5SUcxbElEMGdkR2hwY3p0Y2JpQWdJQ0IyWVhJZ2NtVnRiM1JsVFdWMGFHOWtJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1lYTjVibU1nS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYVdRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUdsa0lEMGdiV1V1WDIxbGRHaHZaRjl5WldaekxuQjFkQ2h2WW1wbFkzUkpaQ0EvSUc5aWFtVmpkRWxrSUNzZ1hDSXZYQ0lnS3lCdVlXMWxJRG9nYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlIZHlZWEJ3WldSZmNtVnpiMngyWlNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2xrSUNFOVBTQnVkV3hzS1NCdFpTNWZiV1YwYUc5a1gzSmxabk11Wm1WMFkyZ29hV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMjlzZG1VdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCM2NtRndjR1ZrWDNKbGFtVmpkQ0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbGtJQ0U5UFNCdWRXeHNLU0J0WlM1ZmJXVjBhRzlrWDNKbFpuTXVabVYwWTJnb2FXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGFtVmpkQzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjNjbUZ3Y0dWa1gzSmxjMjlzZG1VdVgxOXljR05mY0dGcGNpQTlJSGR5WVhCd1pXUmZjbVZxWldOME8xeHVJQ0FnSUNBZ0lDQWdJSGR5WVhCd1pXUmZjbVZxWldOMExsOWZjbkJqWDNCaGFYSWdQU0IzY21Gd2NHVmtYM0psYzI5c2RtVTdYRzVjYmlBZ0lDQWdJQ0FnSUNCMllYSWdZWEpuY3lBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWhiV1VnUFQwOUlGd2ljbVZuYVhOMFpYSmNJaUI4ZkNCdVlXMWxJRDA5UFNCY0ltVjRjRzl5ZEZ3aUlIeDhJRzVoYldVZ1BUMDlJRndpYjI1Y0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jeUE5SUdGM1lXbDBJRzFsTGw5M2NtRndLR0Z5WjNNc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21keklEMGdZWGRoYVhRZ2JXVXVYM2R5WVhBb1lYSm5jeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCMGNtRnVjMlpsY21GaWJHVnpJRDBnWVhKbmN5NWZYM1J5WVc1elptVnlZV0pzWlhOZlh6dGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RISmhibk5tWlhKaFlteGxjeWtnWkdWc1pYUmxJR0Z5WjNNdVgxOTBjbUZ1YzJabGNtRmliR1Z6WDE4N1hHNGdJQ0FnSUNBZ0lDQWdiV1V1WDJOdmJtNWxZM1JwYjI0dVpXMXBkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nWENKdFpYUm9iMlJjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBYMmxrT2lCMFlYSm5aWFJKWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dibUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBYMmxrT2lCdlltcGxZM1JKWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhKbmN6b2dZWEpuY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmJXbHpaVG9nWVhkaGFYUWdiV1V1WDNkeVlYQW9XM2R5WVhCd1pXUmZjbVZ6YjJ4MlpTd2dkM0poY0hCbFpGOXlaV3BsWTNSZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1elptVnlZV0pzWlhOY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dsa0tTQnRaUzVmYldWMGFHOWtYM0psWm5NdVptVjBZMmdvYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUdCR1lXbHNaV1FnZEc4Z1pYaGxZM1IxWlNCeVpXMXZkR1VnYldWMGFHOWtJQ2hwYm5SbGNtWmhZMlU2SUNSN2IySnFaV04wU1dRZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JXVXVhV1I5TENCdFpYUm9iMlE2SUNSN2JtRnRaWDBwTENCbGNuSnZjam9nSkh0bGZXQmNiaUFnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUhKbGJXOTBaVTFsZEdodlpDNWZYM0psYlc5MFpWOXRaWFJvYjJRZ1BTQjBjblZsTzF4dUlDQWdJSEpsZEhWeWJpQnlaVzF2ZEdWTlpYUm9iMlE3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVnVaSE1nWVNCeVpYTndiMjVqWlNCeVpYQnZjblJwYm1jZ2RHaGhkQ0JwYm5SbGNtWmhZMlVnYW5WemRDQndjbTkyYVdSbFpDQmllU0IwYUdWY2JpQWdJQ29nY21WdGIzUmxJSE5wZEdVZ2QyRnpJSE4xWTJObGMzTm1kV3hzZVNCelpYUWdZbmtnZEdocGN5QnphWFJsSUdGeklISmxiVzkwWlZ4dUlDQWdLaTljYmlBZ1gzSmxjRzl5ZEZKbGJXOTBaVk5sZENncElIdGNiaUFnSUNCMGFHbHpMbDlqYjI1dVpXTjBhVzl1TG1WdGFYUW9leUIwZVhCbE9pQmNJbWx1ZEdWeVptRmpaVk5sZEVGelVtVnRiM1JsWENJZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVUhKbGNHRnlaWE1nZEdobElIQnliM1pwWkdWa0lITmxkQ0J2WmlCeVpXMXZkR1VnYldWMGFHOWtJR0Z5WjNWdFpXNTBjeUJtYjNKY2JpQWdJQ29nYzJWdVpHbHVaeUIwYnlCMGFHVWdjbVZ0YjNSbElITnBkR1VzSUhKbGNHeGhZMlZ6SUdGc2JDQjBhR1VnWTJGc2JHSmhZMnR6SUhkcGRHaGNiaUFnSUNvZ2FXUmxiblJwWm1sbGNuTmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdZWEpuY3lCMGJ5QjNjbUZ3WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY201eklIdEJjbkpoZVgwZ2QzSmhjSEJsWkNCaGNtZDFiV1Z1ZEhOY2JpQWdJQ292WEc0Z0lHRnplVzVqSUY5bGJtTnZaR1VvWVU5aWFtVmpkQ3dnWVhOSmJuUmxjbVpoWTJVc0lHOWlhbVZqZEVsa0tTQjdYRzRnSUNBZ1kyOXVjM1FnWVZSNWNHVWdQU0IwZVhCbGIyWWdZVTlpYW1WamREdGNiaUFnSUNCcFppQW9YRzRnSUNBZ0lDQmhWSGx3WlNBOVBUMGdYQ0p1ZFcxaVpYSmNJaUI4ZkZ4dUlDQWdJQ0FnWVZSNWNHVWdQVDA5SUZ3aWMzUnlhVzVuWENJZ2ZIeGNiaUFnSUNBZ0lHRlVlWEJsSUQwOVBTQmNJbUp2YjJ4bFlXNWNJaUI4ZkZ4dUlDQWdJQ0FnWVU5aWFtVmpkQ0E5UFQwZ2JuVnNiQ0I4ZkZ4dUlDQWdJQ0FnWVU5aWFtVmpkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhYRzRnSUNBZ0lDQmhUMkpxWldOMElHbHVjM1JoYm1ObGIyWWdRWEp5WVhsQ2RXWm1aWEpjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmhUMkpxWldOME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQmlUMkpxWldOME8xeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1lVOWlhbVZqZENBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCN1hHNGdJQ0FnSUNCcFppQW9ZWE5KYm5SbGNtWmhZMlVwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z2WW1wbFkzUkpaQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpYjJKcVpXTjBTV1FnYVhNZ2JtOTBJSE53WldOcFptbGxaQzVjSWlrN1hHNGdJQ0FnSUNBZ0lHSlBZbXBsWTNRZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNKMGVYQmxPaUJjSW1sdWRHVnlabUZqWlZ3aUxGeHVJQ0FnSUNBZ0lDQWdJRjl5ZEdGeVoyVjBYMmxrT2lCMGFHbHpMbDlqYjI1dVpXTjBhVzl1TG5CbFpYSmZhV1FzWEc0Z0lDQWdJQ0FnSUNBZ1gzSnBiblJtT2lCdlltcGxZM1JKWkN4Y2JpQWdJQ0FnSUNBZ0lDQmZjblpoYkhWbE9pQmhjMGx1ZEdWeVptRmpaVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl0WlhSb2IyUmZkMlZoYTIxaGNDNXpaWFFvWVU5aWFtVmpkQ3dnWWs5aWFtVmpkQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVYMjFsZEdodlpGOTNaV0ZyYldGd0xtaGhjeWhoVDJKcVpXTjBLU2tnZTF4dUlDQWdJQ0FnSUNCaVQySnFaV04wSUQwZ2RHaHBjeTVmYldWMGFHOWtYM2RsWVd0dFlYQXVaMlYwS0dGUFltcGxZM1FwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMmxrSUQwZ2RHaHBjeTVmYzNSdmNtVXVjSFYwS0dGUFltcGxZM1FwTzF4dUlDQWdJQ0FnSUNCaVQySnFaV04wSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJRjl5ZEhsd1pUb2dYQ0pqWVd4c1ltRmphMXdpTEZ4dUlDQWdJQ0FnSUNBZ0lGOXlkR0Z5WjJWMFgybGtPaUIwYUdsekxsOWpiMjV1WldOMGFXOXVMbkJsWlhKZmFXUXNYRzRnSUNBZ0lDQWdJQ0FnWDNKdVlXMWxPaUFvWVU5aWFtVmpkQzVqYjI1emRISjFZM1J2Y2lBbUppQmhUMkpxWldOMExtTnZibk4wY25WamRHOXlMbTVoYldVcElIeDhJR05wWkN4Y2JpQWdJQ0FnSUNBZ0lDQmZjblpoYkhWbE9pQmphV1JjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJpVDJKcVpXTjBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJSE5yYVhBZ2FXWWdZV3h5WldGa2VTQmxibU52WkdWa1hHNGdJQ0FnYVdZZ0tHRlBZbXBsWTNRdVkyOXVjM1J5ZFdOMGIzSWdhVzV6ZEdGdVkyVnZaaUJQWW1wbFkzUWdKaVlnWVU5aWFtVmpkQzVmY25SNWNHVXBJSHRjYmlBZ0lDQWdJQzh2SUcxaGEyVWdjM1Z5WlNCMGFHVWdhVzUwWlhKbVlXTmxJR1oxYm1OMGFXOXVjeUJoY21VZ1pXNWpiMlJsWkZ4dUlDQWdJQ0FnYVdZZ0tHRlBZbXBsWTNRdVgzSnBiblJtS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSbGJYQWdQU0JoVDJKcVpXTjBMbDl5ZEhsd1pUdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElHRlBZbXBsWTNRdVgzSjBlWEJsTzF4dVhHNGdJQ0FnSUNBZ0lHSlBZbXBsWTNRZ1BTQmhkMkZwZENCMGFHbHpMbDlsYm1OdlpHVW9ZVTlpYW1WamRDd2dZWE5KYm5SbGNtWmhZMlVzSUc5aWFtVmpkRWxrS1R0Y2JpQWdJQ0FnSUNBZ1lrOWlhbVZqZEM1ZmNuUjVjR1VnUFNCMFpXMXdPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZazlpYW1WamRDQTlJR0ZQWW1wbFkzUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z1lrOWlhbVZqZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQjBjbUZ1YzJabGNtRmliR1Z6SUQwZ1cxMDdYRzRnSUNBZ1kyOXVjM1FnWDNSeVlXNXpabVZ5SUQwZ1lVOWlhbVZqZEM1ZmRISmhibk5tWlhJN1hHNGdJQ0FnWTI5dWMzUWdhWE5oY25KaGVTQTlJRUZ5Y21GNUxtbHpRWEp5WVhrb1lVOWlhbVZqZENrN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCMGNDQnZaaUJQWW1wbFkzUXVhMlY1Y3loMGFHbHpMbDlqYjJSbFkzTXBLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmpiMlJsWXlBOUlIUm9hWE11WDJOdlpHVmpjMXQwY0YwN1hHNGdJQ0FnSUNCcFppQW9ZMjlrWldNdVpXNWpiMlJsY2lBbUppQmhUMkpxWldOMElHbHVjM1JoYm1ObGIyWWdZMjlrWldNdWRIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlVUMFJQT2lCM2FHRjBJR2xtSUcxMWJIUnBjR3hsSUdWdVkyOWtaWEp6SUdadmRXNWtYRzRnSUNBZ0lDQWdJR052Ym5OMElHVnVZMjlrWldSUFltb2dQU0JoZDJGcGRDQlFjbTl0YVhObExuSmxjMjlzZG1Vb1kyOWtaV011Wlc1amIyUmxjaWhoVDJKcVpXTjBLU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxibU52WkdWa1QySnFJQ1ltSUNGbGJtTnZaR1ZrVDJKcUxsOXlkSGx3WlNrZ1pXNWpiMlJsWkU5aWFpNWZjblI1Y0dVZ1BTQmpiMlJsWXk1dVlXMWxPMXh1SUNBZ0lDQWdJQ0F2THlCbGJtTnZaR1VnZEdobElHWjFibU4wYVc5dWN5QnBiaUIwYUdVZ2FXNTBaWEptWVdObElHOWlhbVZqZEZ4dUlDQWdJQ0FnSUNCcFppQW9aVzVqYjJSbFpFOWlhaUFtSmlCbGJtTnZaR1ZrVDJKcUxsOXlhVzUwWmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUmxiWEFnUFNCbGJtTnZaR1ZrVDJKcUxsOXlkSGx3WlR0Y2JpQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1pXNWpiMlJsWkU5aWFpNWZjblI1Y0dVN1hHNGdJQ0FnSUNBZ0lDQWdaVzVqYjJSbFpFOWlhaUE5SUdGM1lXbDBJSFJvYVhNdVgyVnVZMjlrWlNobGJtTnZaR1ZrVDJKcUxDQmhjMGx1ZEdWeVptRmpaU3dnYjJKcVpXTjBTV1FwTzF4dUlDQWdJQ0FnSUNBZ0lHVnVZMjlrWldSUFltb3VYM0owZVhCbElEMGdkR1Z0Y0R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmlUMkpxWldOMElEMGdaVzVqYjJSbFpFOWlhanRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0pQWW1wbFkzUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdMeXBuYkc5aVlXd2dkR1lxTDF4dUlDQWdJQ0FnZEhsd1pXOW1JSFJtSUNFOVBTQmNJblZ1WkdWbWFXNWxaRndpSUNZbVhHNGdJQ0FnSUNCMFppNVVaVzV6YjNJZ0ppWmNiaUFnSUNBZ0lHRlBZbXBsWTNRZ2FXNXpkR0Z1WTJWdlppQjBaaTVVWlc1emIzSmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhaZlluVm1abVZ5SUQwZ1lVOWlhbVZqZEM1a1lYUmhVM2x1WXlncE8xeHVJQ0FnSUNBZ2FXWWdLR0ZQWW1wbFkzUXVYM1J5WVc1elptVnlJSHg4SUY5MGNtRnVjMlpsY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBjbUZ1YzJabGNtRmliR1Z6TG5CMWMyZ29kbDlpZFdabVpYSXVZblZtWm1WeUtUdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElHRlBZbXBsWTNRdVgzUnlZVzV6Wm1WeU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1lrOWlhbVZqZENBOUlIdGNiaUFnSUNBZ0lDQWdYM0owZVhCbE9pQmNJbTVrWVhKeVlYbGNJaXhjYmlBZ0lDQWdJQ0FnWDNKMllXeDFaVG9nZGw5aWRXWm1aWEl1WW5WbVptVnlMRnh1SUNBZ0lDQWdJQ0JmY25Ob1lYQmxPaUJoVDJKcVpXTjBMbk5vWVhCbExGeHVJQ0FnSUNBZ0lDQmZjbVIwZVhCbE9pQmhUMkpxWldOMExtUjBlWEJsWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWEc0Z0lDQWdJQ0F2S21kc2IySmhiQ0J1YWlvdlhHNGdJQ0FnSUNCMGVYQmxiMllnYm1vZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJZ0ppWmNiaUFnSUNBZ0lHNXFMazVrUVhKeVlYa2dKaVpjYmlBZ0lDQWdJR0ZQWW1wbFkzUWdhVzV6ZEdGdVkyVnZaaUJ1YWk1T1pFRnljbUY1WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1pIUjVjR1VnUFNCMGVYQmxaRUZ5Y21GNVZHOUVkSGx3WlZ0aFQySnFaV04wTG5ObGJHVmpkR2x2Ymk1a1lYUmhMbU52Ym5OMGNuVmpkRzl5TG01aGJXVmRPMXh1SUNBZ0lDQWdhV1lnS0dGUFltcGxZM1F1WDNSeVlXNXpabVZ5SUh4OElGOTBjbUZ1YzJabGNpa2dlMXh1SUNBZ0lDQWdJQ0IwY21GdWMyWmxjbUZpYkdWekxuQjFjMmdvWVU5aWFtVmpkQzV6Wld4bFkzUnBiMjR1WkdGMFlTNWlkV1ptWlhJcE8xeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1lVOWlhbVZqZEM1ZmRISmhibk5tWlhJN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaVQySnFaV04wSUQwZ2UxeHVJQ0FnSUNBZ0lDQmZjblI1Y0dVNklGd2libVJoY25KaGVWd2lMRnh1SUNBZ0lDQWdJQ0JmY25aaGJIVmxPaUJoVDJKcVpXTjBMbk5sYkdWamRHbHZiaTVrWVhSaExtSjFabVpsY2l4Y2JpQWdJQ0FnSUNBZ1gzSnphR0Z3WlRvZ1lVOWlhbVZqZEM1emFHRndaU3hjYmlBZ0lDQWdJQ0FnWDNKa2RIbHdaVG9nWkhSNWNHVmNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhUMkpxWldOMElHbHVjM1JoYm1ObGIyWWdSWEp5YjNJcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWVU5aWFtVmpkQ2s3WEc0Z0lDQWdJQ0JpVDJKcVpXTjBJRDBnZXlCZmNuUjVjR1U2SUZ3aVpYSnliM0pjSWl3Z1gzSjJZV3gxWlRvZ1lVOWlhbVZqZEM1MGIxTjBjbWx1WnlncElIMDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1JtbHNaU0FoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmlCaFQySnFaV04wSUdsdWMzUmhibU5sYjJZZ1JtbHNaU2tnZTF4dUlDQWdJQ0FnWWs5aWFtVmpkQ0E5SUh0Y2JpQWdJQ0FnSUNBZ1gzSjBlWEJsT2lCY0ltWnBiR1ZjSWl4Y2JpQWdJQ0FnSUNBZ1gzSjJZV3gxWlRvZ1lVOWlhbVZqZEN4Y2JpQWdJQ0FnSUNBZ1gzSndZWFJvT2lCaFQySnFaV04wTGw5d1lYUm9JSHg4SUdGUFltcGxZM1F1ZDJWaWEybDBVbVZzWVhScGRtVlFZWFJvWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJ6Wlc1a0lHOWlhbVZqZEhNZ2MzVndjRzl5ZEdWa0lHSjVJSE4wY25WamRIVnlaU0JqYkc5dVpTQmhiR2R2Y21sMGFHMWNiaUFnSUNBdkx5Qm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNXRiM3BwYkd4aExtOXlaeTlsYmkxVlV5OWtiMk56TDFkbFlpOUJVRWt2VjJWaVgxZHZjbXRsY25OZlFWQkpMMU4wY25WamRIVnlaV1JmWTJ4dmJtVmZZV3huYjNKcGRHaHRYRzRnSUNBZ1pXeHpaU0JwWmlBb1hHNGdJQ0FnSUNCaFQySnFaV04wSUNFOVBTQlBZbXBsWTNRb1lVOWlhbVZqZENrZ2ZIeGNiaUFnSUNBZ0lHRlBZbXBsWTNRZ2FXNXpkR0Z1WTJWdlppQkNiMjlzWldGdUlIeDhYRzRnSUNBZ0lDQmhUMkpxWldOMElHbHVjM1JoYm1ObGIyWWdVM1J5YVc1bklIeDhYRzRnSUNBZ0lDQmhUMkpxWldOMElHbHVjM1JoYm1ObGIyWWdSR0YwWlNCOGZGeHVJQ0FnSUNBZ1lVOWlhbVZqZENCcGJuTjBZVzVqWlc5bUlGSmxaMFY0Y0NCOGZGeHVJQ0FnSUNBZ1lVOWlhbVZqZENCcGJuTjBZVzVqWlc5bUlFbHRZV2RsUkdGMFlTQjhmRnh1SUNBZ0lDQWdLSFI1Y0dWdlppQkdhV3hsVEdsemRDQWhQVDBnWENKMWJtUmxabWx1WldSY0lpQW1KaUJoVDJKcVpXTjBJR2x1YzNSaGJtTmxiMllnUm1sc1pVeHBjM1FwWEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0JpVDJKcVpXTjBJRDBnWVU5aWFtVmpkRHRjYmlBZ0lDQWdJQzh2SUZSUFJFODZJR0YyYjJsa0lHOWlhbVZqZENCemRXTm9JR0Z6SUVSNWJtRnRhV05RYkhWbmFXNGdhVzV6ZEdGdVkyVXVYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1JtbHNaU0FoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmlCaFQySnFaV04wSUdsdWMzUmhibU5sYjJZZ1JtbHNaU2tnZTF4dUlDQWdJQ0FnWWs5aWFtVmpkQ0E5SUh0Y2JpQWdJQ0FnSUNBZ1gzSjBlWEJsT2lCY0ltWnBiR1ZjSWl4Y2JpQWdJQ0FnSUNBZ1gzSnVZVzFsT2lCaFQySnFaV04wTG01aGJXVXNYRzRnSUNBZ0lDQWdJRjl5YldsdFpUb2dZVTlpYW1WamRDNTBlWEJsTEZ4dUlDQWdJQ0FnSUNCZmNuWmhiSFZsT2lCaFQySnFaV04wTEZ4dUlDQWdJQ0FnSUNCZmNuQmhkR2c2SUdGUFltcGxZM1F1WDNCaGRHZ2dmSHdnWVU5aWFtVmpkQzUzWldKcmFYUlNaV3hoZEdsMlpWQmhkR2hjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hoVDJKcVpXTjBJR2x1YzNSaGJtTmxiMllnUW14dllpa2dlMXh1SUNBZ0lDQWdZazlpYW1WamRDQTlJSHNnWDNKMGVYQmxPaUJjSW1Kc2IySmNJaXdnWDNKMllXeDFaVG9nWVU5aWFtVmpkQ0I5TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWVU5aWFtVmpkQ0JwYm5OMFlXNWpaVzltSUVGeWNtRjVRblZtWm1WeVZtbGxkeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHRlBZbXBsWTNRdVgzUnlZVzV6Wm1WeUlIeDhJRjkwY21GdWMyWmxjaWtnZTF4dUlDQWdJQ0FnSUNCMGNtRnVjMlpsY21GaWJHVnpMbkIxYzJnb1lVOWlhbVZqZEM1aWRXWm1aWElwTzF4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnWVU5aWFtVmpkQzVmZEhKaGJuTm1aWEk3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JqYjI1emRDQmtkSGx3WlNBOUlIUjVjR1ZrUVhKeVlYbFViMFIwZVhCbFcyRlBZbXBsWTNRdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlYwN1hHNGdJQ0FnSUNCaVQySnFaV04wSUQwZ2UxeHVJQ0FnSUNBZ0lDQmZjblI1Y0dVNklGd2lkSGx3WldSaGNuSmhlVndpTEZ4dUlDQWdJQ0FnSUNCZmNuWmhiSFZsT2lCaFQySnFaV04wTG1KMVptWmxjaXhjYmlBZ0lDQWdJQ0FnWDNKa2RIbHdaVG9nWkhSNWNHVmNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhUMkpxWldOMElHbHVjM1JoYm1ObGIyWWdSR0YwWVZacFpYY3BJSHRjYmlBZ0lDQWdJR2xtSUNoaFQySnFaV04wTGw5MGNtRnVjMlpsY2lCOGZDQmZkSEpoYm5ObVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEhKaGJuTm1aWEpoWW14bGN5NXdkWE5vS0dGUFltcGxZM1F1WW5WbVptVnlLVHRjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJR0ZQWW1wbFkzUXVYM1J5WVc1elptVnlPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZazlpYW1WamRDQTlJSHNnWDNKMGVYQmxPaUJjSW0xbGJXOXllWFpwWlhkY0lpd2dYM0oyWVd4MVpUb2dZVTlpYW1WamRDNWlkV1ptWlhJZ2ZUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHRlBZbXBsWTNRZ2FXNXpkR0Z1WTJWdlppQlRaWFFwSUh0Y2JpQWdJQ0FnSUdKUFltcGxZM1FnUFNCN1hHNGdJQ0FnSUNBZ0lGOXlkSGx3WlRvZ1hDSnpaWFJjSWl4Y2JpQWdJQ0FnSUNBZ1gzSjJZV3gxWlRvZ1lYZGhhWFFnZEdocGN5NWZaVzVqYjJSbEtFRnljbUY1TG1aeWIyMG9ZVTlpYW1WamRDa3NJR0Z6U1c1MFpYSm1ZV05sS1Z4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dGUFltcGxZM1FnYVc1emRHRnVZMlZ2WmlCTllYQXBJSHRjYmlBZ0lDQWdJR0pQWW1wbFkzUWdQU0I3WEc0Z0lDQWdJQ0FnSUY5eWRIbHdaVG9nWENKdmNtUmxjbVZrYldGd1hDSXNYRzRnSUNBZ0lDQWdJRjl5ZG1Gc2RXVTZJR0YzWVdsMElIUm9hWE11WDJWdVkyOWtaU2hCY25KaGVTNW1jbTl0S0dGUFltcGxZM1FwTENCaGMwbHVkR1Z5Wm1GalpTbGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGNiaUFnSUNBZ0lHRlBZbXBsWTNRdVkyOXVjM1J5ZFdOMGIzSWdhVzV6ZEdGdVkyVnZaaUJQWW1wbFkzUWdmSHhjYmlBZ0lDQWdJRUZ5Y21GNUxtbHpRWEp5WVhrb1lVOWlhbVZqZENsY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUdKUFltcGxZM1FnUFNCcGMyRnljbUY1SUQ4Z1cxMGdPaUI3ZlR0Y2JpQWdJQ0FnSUd4bGRDQnJaWGx6TzF4dUlDQWdJQ0FnTHk4Z1lXNGdiMkpxWldOMEwyRnljbUY1WEc0Z0lDQWdJQ0JwWmlBb1lVOWlhbVZqZEM1amIyNXpkSEoxWTNSdmNpQTlQVDBnVDJKcVpXTjBJSHg4SUVGeWNtRjVMbWx6UVhKeVlYa29ZVTlpYW1WamRDa3BJSHRjYmlBZ0lDQWdJQ0FnYTJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0dGUFltcGxZM1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnTHk4Z1lTQmpiR0Z6YzF4dUlDQWdJQ0FnWld4elpTQnBaaUFvWVU5aWFtVmpkQzVqYjI1emRISjFZM1J2Y2lBOVBUMGdSblZ1WTNScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVUd4bFlYTmxJR2x1YzNSaGJuUnBZWFJsSUhSb1pTQmpiR0Z6Y3lCaVpXWnZjbVVnWlhod2IzSjBkR2x1WnlCcGRDNWNJaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0F2THlCcGJuTjBZVzVqWlNCdlppQmhJR05zWVhOelhHNGdJQ0FnSUNCbGJITmxJR2xtSUNoaFQySnFaV04wTG1OdmJuTjBjblZqZEc5eUxtTnZibk4wY25WamRHOXlJRDA5UFNCR2RXNWpkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQnJaWGx6SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb1hHNGdJQ0FnSUNBZ0lDQWdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0dGUFltcGxZM1FwWEc0Z0lDQWdJQ0FnSUNrdVkyOXVZMkYwS0U5aWFtVmpkQzVyWlhsektHRlBZbXBsWTNRcEtUdGNiaUFnSUNBZ0lDQWdMeThnVkU5RVR6b2dkWE5sSUdFZ2NISnZlSGtnYjJKcVpXTjBJSFJ2SUhKbGNISmxjMlZ1ZENCMGFHVWdZV04wZFdGc0lHOWlhbVZqZEZ4dUlDQWdJQ0FnSUNBdkx5QmhiSGRoZVhNZ1pXNWpiMlJsSUdOc1lYTnpJR2x1YzNSaGJtTmxJR0Z6SUdsdWRHVnlabUZqWlZ4dUlDQWdJQ0FnSUNCaGMwbHVkR1Z5Wm1GalpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJGY25KdmNpaGNJbFZ1YzNWd2NHOXlkR1ZrSUdsdWRHVnlabUZqWlNCMGVYQmxYQ0lwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnTHk4Z1pXNWpiMlJsSUdsdWRHVnlabUZqWlhOY2JpQWdJQ0FnSUdsbUlDaGhUMkpxWldOMExsOXlhVzUwWmlCOGZDQmhjMGx1ZEdWeVptRmpaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JVzlpYW1WamRFbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IySnFaV04wU1dRZ1BTQnlZVzVrU1dRb0tUdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXZZbXBsWTNSZmMzUnZjbVZiYjJKcVpXTjBTV1JkSUQwZ1lVOWlhbVZqZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnJJRzltSUd0bGVYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9heUE5UFQwZ1hDSmpiMjV6ZEhKMVkzUnZjbHdpS1NCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYXk1emRHRnlkSE5YYVhSb0tGd2lYMXdpS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR0pQWW1wbFkzUmJhMTBnUFNCaGQyRnBkQ0IwYUdsekxsOWxibU52WkdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoVDJKcVpXTjBXMnRkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlHRnpTVzUwWlhKbVlXTmxJRDA5UFNCY0luTjBjbWx1WjF3aUlEOGdZWE5KYm5SbGNtWmhZMlVnS3lCY0lpNWNJaUFySUdzZ09pQnJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnFaV04wU1dSY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklHOWlhbVZqZENCcFpDQm1iM0lnWkdsemNHOXpaU0IwYUdVZ2IySnFaV04wSUhKbGJXOTBaV3g1WEc0Z0lDQWdJQ0FnSUdKUFltcGxZM1F1WDNKcGJuUm1JRDBnYjJKcVpXTjBTV1E3WEc0Z0lDQWdJQ0FnSUM4dklISmxiVzkyWlNCcGJuUmxjbVpoWTJVZ2QyaGxiaUJqYkc5elpXUmNiaUFnSUNBZ0lDQWdhV1lnS0dGUFltcGxZM1F1YjI0Z0ppWWdkSGx3Wlc5bUlHRlBZbXBsWTNRdWIyNGdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdGUFltcGxZM1F1YjI0b1hDSmpiRzl6WlZ3aUxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZmIySnFaV04wWDNOMGIzSmxXMjlpYW1WamRFbGtYVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdheUJ2WmlCclpYbHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRnRjSW1oaGMwOTNibEJ5YjNCbGNuUjVYQ0lzSUZ3aVkyOXVjM1J5ZFdOMGIzSmNJbDB1YVc1amJIVmtaWE1vYXlrcElHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJR0pQWW1wbFkzUmJhMTBnUFNCaGQyRnBkQ0IwYUdsekxsOWxibU52WkdVb1lVOWlhbVZqZEZ0clhTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJQzh2SUdadmNpQmxlR0Z0Y0d4bExDQmljbTkzYzJWeVJsTWdiMkpxWldOMFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnWVU5aWFtVmpkQ0E5UFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2EyVjVjeUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0Z4dUlDQWdJQ0FnSUNCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9ZVTlpYW1WamRDbGNiaUFnSUNBZ0lDa3VZMjl1WTJGMEtFOWlhbVZqZEM1clpYbHpLR0ZQWW1wbFkzUXBLVHRjYmlBZ0lDQWdJR052Ym5OMElHOWlhbVZqZEVsa0lEMGdjbUZ1WkVsa0tDazdYRzVjYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR3NnYjJZZ2EyVjVjeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9XMXdpYUdGelQzZHVVSEp2Y0dWeWRIbGNJaXdnWENKamIyNXpkSEoxWTNSdmNsd2lYUzVwYm1Oc2RXUmxjeWhyS1NrZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDOHZJR1Z1WTI5a1pTQmhjeUJwYm5SbGNtWmhZMlZjYmlBZ0lDQWdJQ0FnWWs5aWFtVmpkRnRyWFNBOUlHRjNZV2wwSUhSb2FYTXVYMlZ1WTI5a1pTaGhUMkpxWldOMFcydGRMQ0JyTENCaVQySnFaV04wS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklHOWlhbVZqZENCcFpDd2dkWE5sWkNCbWIzSWdaR2x6Y0c5elpTQjBhR1VnYjJKcVpXTjBYRzRnSUNBZ0lDQmlUMkpxWldOMExsOXlhVzUwWmlBOUlHOWlhbVZqZEVsa08xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QmNJbWx0YW05NUxYSndZem9nVlc1emRYQndiM0owWldRZ1pHRjBZU0IwZVhCbE9sd2lJQ3NnWVU5aWFtVmpkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEhKaGJuTm1aWEpoWW14bGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0JpVDJKcVpXTjBMbDlmZEhKaGJuTm1aWEpoWW14bGMxOWZJRDBnZEhKaGJuTm1aWEpoWW14bGN6dGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tDRmlUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkdZV2xzWldRZ2RHOGdaVzVqYjJSbElHOWlhbVZqZEZ3aUtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR0pQWW1wbFkzUTdYRzRnSUgxY2JseHVJQ0JoYzNsdVl5QmZaR1ZqYjJSbEtHRlBZbXBsWTNRc0lIZHBkR2hRY205dGFYTmxLU0I3WEc0Z0lDQWdhV1lnS0NGaFQySnFaV04wS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWVU5aWFtVmpkRHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJR0pQWW1wbFkzUXNJSFlzSUdzN1hHNGdJQ0FnYVdZZ0tHRlBZbXBsWTNSYlhDSmZjblI1Y0dWY0lsMHBJSHRjYmlBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5a1pXTnpXMkZQWW1wbFkzUXVYM0owZVhCbFhTQW1KbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiMlJsWTNOYllVOWlhbVZqZEM1ZmNuUjVjR1ZkTG1SbFkyOWtaWEpjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZVTlpYW1WamRDNWZjbWx1ZEdZcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjBaVzF3SUQwZ1lVOWlhbVZqZEM1ZmNuUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUdGUFltcGxZM1F1WDNKMGVYQmxPMXh1SUNBZ0lDQWdJQ0FnSUdGUFltcGxZM1FnUFNCaGQyRnBkQ0IwYUdsekxsOWtaV052WkdVb1lVOWlhbVZqZEN3Z2QybDBhRkJ5YjIxcGMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUdGUFltcGxZM1F1WDNKMGVYQmxJRDBnZEdWdGNEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JpVDJKcVpXTjBJRDBnWVhkaGFYUWdVSEp2YldselpTNXlaWE52YkhabEtGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnZaR1ZqYzF0aFQySnFaV04wTGw5eWRIbHdaVjB1WkdWamIyUmxjaWhoVDJKcVpXTjBLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoaFQySnFaV04wTGw5eWRIbHdaU0E5UFQwZ1hDSmpZV3hzWW1GamExd2lLU0I3WEc0Z0lDQWdJQ0FnSUdKUFltcGxZM1FnUFNCMGFHbHpMbDluWlc1U1pXMXZkR1ZEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNCaFQySnFaV04wTGw5eWRHRnlaMlYwWDJsa0xGeHVJQ0FnSUNBZ0lDQWdJR0ZQWW1wbFkzUXVYM0oyWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0IzYVhSb1VISnZiV2x6WlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhUMkpxWldOMExsOXlkSGx3WlNBOVBUMGdYQ0pwYm5SbGNtWmhZMlZjSWlrZ2UxeHVJQ0FnSUNBZ0lDQmlUMkpxWldOMElEMGdkR2hwY3k1ZloyVnVVbVZ0YjNSbFRXVjBhRzlrS0Z4dUlDQWdJQ0FnSUNBZ0lHRlBZbXBsWTNRdVgzSjBZWEpuWlhSZmFXUXNYRzRnSUNBZ0lDQWdJQ0FnWVU5aWFtVmpkQzVmY25aaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUdGUFltcGxZM1F1WDNKcGJuUm1YRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dGUFltcGxZM1F1WDNKMGVYQmxJRDA5UFNCY0ltNWtZWEp5WVhsY0lpa2dlMXh1SUNBZ0lDQWdJQ0F2S21kc2IySmhiQ0J1YWlCMFppb3ZYRzRnSUNBZ0lDQWdJQzh2WTNKbFlYUmxJR0oxYVd4a0lHRnljbUY1TDNSbGJuTnZjaUJwWmlCMWMyVmtJR2x1SUhSb1pTQndiSFZuYVc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnVhaUFoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmlCdWFpNWhjbkpoZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR0ZQWW1wbFkzUXVYM0oyWVd4MVpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRlBZbXBsWTNRdVgzSjJZV3gxWlNBOUlHRlBZbXBsWTNRdVgzSjJZV3gxWlM1eVpXUjFZMlVvWDJGd2NHVnVaRUoxWm1abGNpazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHSlBZbXBsWTNRZ1BTQnVhbHh1SUNBZ0lDQWdJQ0FnSUNBZ0xtRnljbUY1S0c1bGR5QlZhVzUwT0NoaFQySnFaV04wTGw5eWRtRnNkV1VwTENCaFQySnFaV04wTGw5eVpIUjVjR1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXVjbVZ6YUdGd1pTaGhUMkpxWldOMExsOXljMmhoY0dVcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQjBaaUFoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmlCMFppNVVaVzV6YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hoVDJKcVpXTjBMbDl5ZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhUMkpxWldOMExsOXlkbUZzZFdVZ1BTQmhUMkpxWldOMExsOXlkbUZzZFdVdWNtVmtkV05sS0Y5aGNIQmxibVJDZFdabVpYSXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGNuSmhlWFI1Y0dVZ1BTQmxkbUZzS0dSMGVYQmxWRzlVZVhCbFpFRnljbUY1VzJGUFltcGxZM1F1WDNKa2RIbHdaVjBwTzF4dUlDQWdJQ0FnSUNBZ0lHSlBZbXBsWTNRZ1BTQjBaaTUwWlc1emIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dZWEp5WVhsMGVYQmxLR0ZQWW1wbFkzUXVYM0oyWVd4MVpTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCaFQySnFaV04wTGw5eWMyaGhjR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhUMkpxWldOMExsOXlaSFI1Y0dWY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dmEyVmxjQ0JwZENCaGN5QnlaV2QxYkdGeUlHbG1JSFJ5WVc1elptVnlaV1FnZEc4Z2RHaGxJRzFoYVc0Z1lYQndYRzRnSUNBZ0lDQWdJQ0FnWWs5aWFtVmpkQ0E5SUdGUFltcGxZM1E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lVOWlhbVZqZEM1ZmNuUjVjR1VnUFQwOUlGd2laWEp5YjNKY0lpa2dlMXh1SUNBZ0lDQWdJQ0JpVDJKcVpXTjBJRDBnYm1WM0lFVnljbTl5S0dGUFltcGxZM1F1WDNKMllXeDFaU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dGUFltcGxZM1F1WDNKMGVYQmxJRDA5UFNCY0ltWnBiR1ZjSWlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWVU5aWFtVmpkQzVmY25aaGJIVmxJR2x1YzNSaGJtTmxiMllnUm1sc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdKUFltcGxZM1FnUFNCaFQySnFaV04wTGw5eWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0x5OXdZWFJqYUNCZmNHRjBhRnh1SUNBZ0lDQWdJQ0FnSUdKUFltcGxZM1F1WDNCaGRHZ2dQU0JoVDJKcVpXTjBMbDl5Y0dGMGFEdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0JpVDJKcVpXTjBJRDBnYm1WM0lFWnBiR1VvVzJGUFltcGxZM1F1WDNKMllXeDFaVjBzSUdGUFltcGxZM1F1WDNKdVlXMWxMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCaFQySnFaV04wTGw5eWJXbHRaVnh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJR0pQWW1wbFkzUXVYM0JoZEdnZ1BTQmhUMkpxWldOMExsOXljR0YwYUR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhUMkpxWldOMExsOXlkSGx3WlNBOVBUMGdYQ0owZVhCbFpHRnljbUY1WENJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1lYSnlZWGwwZVhCbElEMGdaWFpoYkNoa2RIbHdaVlJ2Vkhsd1pXUkJjbkpoZVZ0aFQySnFaV04wTGw5eVpIUjVjR1ZkS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZoY25KaGVYUjVjR1VwWEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWRXNXpkWEJ3YjNKMFpXUWdaSFI1Y0dVNklGd2lJQ3NnWVU5aWFtVmpkQzVmY21SMGVYQmxLVHRjYmlBZ0lDQWdJQ0FnWWs5aWFtVmpkQ0E5SUc1bGR5QmhjbkpoZVhSNWNHVW9ZVTlpYW1WamRDNWZjblpoYkhWbEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZVTlpYW1WamRDNWZjblI1Y0dVZ1BUMDlJRndpYldWdGIzSjVkbWxsZDF3aUtTQjdYRzRnSUNBZ0lDQWdJR0pQWW1wbFkzUWdQU0J1WlhjZ1JHRjBZVlpwWlhjb1lVOWlhbVZqZEM1ZmNuWmhiSFZsS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1lVOWlhbVZqZEM1ZmNuUjVjR1VnUFQwOUlGd2lZbXh2WWx3aUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoaFQySnFaV04wTGw5eWRtRnNkV1VnYVc1emRHRnVZMlZ2WmlCQ2JHOWlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1lrOWlhbVZqZENBOUlHRlBZbXBsWTNRdVgzSjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQmlUMkpxWldOMElEMGdibVYzSUVKc2IySW9XMkZQWW1wbFkzUXVYM0oyWVd4MVpWMHNJSHNnZEhsd1pUb2dZVTlpYW1WamRDNWZjbTFwYldVZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWVU5aWFtVmpkQzVmY25SNWNHVWdQVDA5SUZ3aWIzSmtaWEpsWkcxaGNGd2lLU0I3WEc0Z0lDQWdJQ0FnSUdKUFltcGxZM1FnUFNCdVpYY2dUV0Z3S0dGM1lXbDBJSFJvYVhNdVgyUmxZMjlrWlNoaFQySnFaV04wTGw5eWRtRnNkV1VzSUhkcGRHaFFjbTl0YVhObEtTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR0ZQWW1wbFkzUXVYM0owZVhCbElEMDlQU0JjSW5ObGRGd2lLU0I3WEc0Z0lDQWdJQ0FnSUdKUFltcGxZM1FnUFNCdVpYY2dVMlYwS0dGM1lXbDBJSFJvYVhNdVgyUmxZMjlrWlNoaFQySnFaV04wTGw5eWRtRnNkV1VzSUhkcGRHaFFjbTl0YVhObEtTazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJ0WVd0bElITjFjbVVnWVd4c0lIUm9aU0JwYm5SbGNtWmhZMlVnWm5WdVkzUnBiMjV6SUdGeVpTQmtaV052WkdWa1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoVDJKcVpXTjBMbDl5YVc1MFppa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFJsYlhBZ1BTQmhUMkpxWldOMExsOXlkSGx3WlR0Y2JpQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1lVOWlhbVZqZEM1ZmNuUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ1lVOWlhbVZqZENBOUlHRjNZV2wwSUhSb2FYTXVYMlJsWTI5a1pTaGhUMkpxWldOMExDQjNhWFJvVUhKdmJXbHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ1lVOWlhbVZqZEM1ZmNuUjVjR1VnUFNCMFpXMXdPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdKUFltcGxZM1FnUFNCaFQySnFaV04wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvWVU5aWFtVmpkQzVqYjI1emRISjFZM1J2Y2lBOVBUMGdUMkpxWldOMElIeDhJRUZ5Y21GNUxtbHpRWEp5WVhrb1lVOWlhbVZqZENrcElIdGNiaUFnSUNBZ0lIWmhjaUJwYzJGeWNtRjVJRDBnUVhKeVlYa3VhWE5CY25KaGVTaGhUMkpxWldOMEtUdGNiaUFnSUNBZ0lHSlBZbXBsWTNRZ1BTQnBjMkZ5Y21GNUlEOGdXMTBnT2lCN2ZUdGNiaUFnSUNBZ0lHWnZjaUFvYXlCcGJpQmhUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNocGMyRnljbUY1SUh4OElHRlBZbXBsWTNRdWFHRnpUM2R1VUhKdmNHVnlkSGtvYXlrcElIdGNiaUFnSUNBZ0lDQWdJQ0IySUQwZ1lVOWlhbVZqZEZ0clhUdGNiaUFnSUNBZ0lDQWdJQ0JpVDJKcVpXTjBXMnRkSUQwZ1lYZGhhWFFnZEdocGN5NWZaR1ZqYjJSbEtIWXNJSGRwZEdoUWNtOXRhWE5sS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JpVDJKcVpXTjBJRDBnWVU5aWFtVmpkRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR0pQWW1wbFkzUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVJtRnBiR1ZrSUhSdklHUmxZMjlrWlNCdlltcGxZM1JjSWlrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhOMGIzSmxJSFJvWlNCdlltcGxZM1FnYVdRZ1ptOXlJR1JwYzNCdmMyVmNiaUFnSUNCcFppQW9ZVTlpYW1WamRDNWZjbWx1ZEdZcElIdGNiaUFnSUNBZ0lIUm9hWE11WDI5aWFtVmpkRjkzWldGcmJXRndMbk5sZENoaVQySnFaV04wTENCaFQySnFaV04wTGw5eWFXNTBaaWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCaVQySnFaV04wTzF4dUlDQjlYRzVjYmlBZ1lYTjVibU1nWDNkeVlYQW9ZWEpuY3l3Z1lYTkpiblJsY21aaFkyVXBJSHRjYmlBZ0lDQjJZWElnZDNKaGNIQmxaQ0E5SUdGM1lXbDBJSFJvYVhNdVgyVnVZMjlrWlNoaGNtZHpMQ0JoYzBsdWRHVnlabUZqWlNrN1hHNGdJQ0FnY21WMGRYSnVJSGR5WVhCd1pXUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlc1M2NtRndjeUIwYUdVZ2MyVjBJRzltSUdGeVozVnRaVzUwY3lCa1pXeHBkbVZ5WldRZ1puSnZiU0IwYUdVZ2NtVnRiM1JsSUhOcGRHVXNYRzRnSUNBcUlISmxjR3hoWTJWeklHRnNiQ0JqWVd4c1ltRmpheUJwWkdWdWRHbG1hV1Z5Y3lCM2FYUm9JR0VnWm5WdVkzUnBiMjRnZDJocFkyZ2dkMmxzYkZ4dUlDQWdLaUJwYm1sMGFXRjBaU0J6Wlc1a2FXNW5JSFJvWVhRZ1kyRnNiR0poWTJzZ2FXUmxiblJwWm1sbGNpQmlZV05ySUhSdklHOTBhR1Z5SUhOcGRHVmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR0Z5WjNNZ2RHOGdkVzUzY21Gd1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdRbTl2YkdWaGJuMGdkMmwwYUZCeWIyMXBjMlVnYVhNZ2RISjFaU0J0WldGdWN5QjBhR2x6SUhSb1pTQmpZV3hzWW1GamF5QnphRzkxYkdRZ1kyOXVkR0ZwYmlCaElIQnliMjFwYzJWY2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQjFibmR5WVhCd1pXUWdZWEpuYzF4dUlDQWdLaTljYmlBZ1lYTjVibU1nWDNWdWQzSmhjQ2hoY21kekxDQjNhWFJvVUhKdmJXbHpaU2tnZTF4dUlDQWdJSFpoY2lCeVpYTjFiSFFnUFNCaGQyRnBkQ0IwYUdsekxsOWtaV052WkdVb1lYSm5jeXdnZDJsMGFGQnliMjFwYzJVcE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWdVpYSmhkR1Z6SUhSb1pTQjNjbUZ3Y0dWa0lHWjFibU4wYVc5dUlHTnZjbkpsYzNCdmJtUnBibWNnZEc4Z1lTQnphVzVuYkdVZ2NtVnRiM1JsWEc0Z0lDQXFJR05oYkd4aVlXTnJMaUJYYUdWdUlIUm9aU0JuWlc1bGNtRjBaV1FnWm5WdVkzUnBiMjRnYVhNZ1kyRnNiR1ZrTENCcGRDQjNhV3hzSUhObGJtUmNiaUFnSUNvZ2RHaGxJR052Y25KbGMzQnZibVJwYm1jZ2JXVnpjMkZuWlNCMGJ5QjBhR1VnY21WdGIzUmxJSE5wZEdVZ1lYTnJhVzVuSUdsMElIUnZYRzRnSUNBcUlHVjRaV04xZEdVZ2RHaGxJSEJoY25ScFkzVnNZWElnWTJGc2JHSmhZMnNnY0hKbGRtbHZkWE5zZVNCellYWmxaQ0JrZFhKcGJtY2dZU0JqWVd4c1hHNGdJQ0FxSUdKNUlIUm9aU0J5WlcxdmRHVWdjMmwwWlNCaElHMWxkR2h2WkNCbWNtOXRJSFJvWlNCcGJuUmxjbVpoWTJVZ2IyWWdkR2hwY3lCemFYUmxYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JwWkNCdlppQjBhR1VnY21WdGIzUmxJR05oYkd4aVlXTnJJSFJ2SUdWNFpXTjFkR1ZjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHRnlaMDUxYlNCaGNtZDFiV1Z1ZENCcGJtUmxlQ0J2WmlCMGFHVWdZMkZzYkdKaFkydGNiaUFnSUNvZ1FIQmhjbUZ0SUh0Q2IyOXNaV0Z1ZlNCM2FYUm9VSEp2YldselpTQnBjeUIwY25WbElHMWxZVzV6SUhSb2FYTWdkR2hsSUdOaGJHeGlZV05ySUhOb2IzVnNaQ0JqYjI1MFlXbHVJR0VnY0hKdmJXbHpaVnh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OUlIZHlZWEJ3WldRZ2NtVnRiM1JsSUdOaGJHeGlZV05yWEc0Z0lDQXFMMXh1SUNCZloyVnVVbVZ0YjNSbFEyRnNiR0poWTJzb2RHRnlaMlYwU1dRc0lHTnBaQ3dnZDJsMGFGQnliMjFwYzJVcElIdGNiaUFnSUNCMllYSWdiV1VnUFNCMGFHbHpPMXh1SUNBZ0lIWmhjaUJ5WlcxdmRHVkRZV3hzWW1GamF6dGNiaUFnSUNCcFppQW9kMmwwYUZCeWIyMXBjMlVwSUh0Y2JpQWdJQ0FnSUhKbGJXOTBaVU5oYkd4aVlXTnJJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaGhjM2x1WXlBb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHRnlaM01nUFNCaGQyRnBkQ0J0WlM1ZmQzSmhjQ2hCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1wS1R0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnZEhKaGJuTm1aWEpoWW14bGN5QTlJR0Z5WjNNdVgxOTBjbUZ1YzJabGNtRmliR1Z6WDE4N1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hSeVlXNXpabVZ5WVdKc1pYTXBJR1JsYkdWMFpTQmhjbWR6TGw5ZmRISmhibk5tWlhKaFlteGxjMTlmTzF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1VdVgxOXljR05mY0dGcGNpQTlJSEpsYW1WamREdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUXVYMTl5Y0dOZmNHRnBjaUE5SUhKbGMyOXNkbVU3WEc0Z0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxMbDlqYjI1dVpXTjBhVzl1TG1WdGFYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCY0ltTmhiR3hpWVdOclhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFgybGtPaUIwWVhKblpYUkpaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ1kybGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNNNklHRnlaM01zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmJXbHpaVG9nWVhkaGFYUWdiV1V1WDNkeVlYQW9XM0psYzI5c2RtVXNJSEpsYW1WamRGMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Wm1WeVlXSnNaWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR0JHWVdsc1pXUWdkRzhnWlhobFkzUjFaU0J5WlcxdmRHVWdZMkZzYkdKaFkyc2dLQ0JwWkRvZ0pIdGphV1I5S1M1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpXMXZkR1ZEWVd4c1ltRmphenRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVnRiM1JsUTJGc2JHSmhZMnNnUFNCaGMzbHVZeUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQmhkMkZwZENCdFpTNWZkM0poY0NoQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNcEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSeVlXNXpabVZ5WVdKc1pYTWdQU0JoY21kekxsOWZkSEpoYm5ObVpYSmhZbXhsYzE5Zk8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEhKaGJuTm1aWEpoWW14bGN5a2daR1ZzWlhSbElHRnlaM011WDE5MGNtRnVjMlpsY21GaWJHVnpYMTg3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ0WlM1ZlkyOXVibVZqZEdsdmJpNWxiV2wwS0Z4dUlDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRndpWTJGc2JHSmhZMnRjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRGOXBaRG9nZEdGeVoyVjBTV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nWTJsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhKbmN6b2dZWEpuYzF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1aWEpoWW14bGMxeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaVzF2ZEdWRFlXeHNZbUZqYXp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVnVaSE1nZEdobElHNXZkR2xtYVdOaGRHbHZiaUJ0WlhOellXZGxJR0Z1WkNCaWNtVmhhM01nZEdobElHTnZibTVsWTNScGIyNWNiaUFnSUNvdlhHNGdJR1JwYzJOdmJtNWxZM1FvS1NCN1hHNGdJQ0FnZEdocGN5NWZZMjl1Ym1WamRHbHZiaTVsYldsMEtIc2dkSGx3WlRvZ1hDSmthWE5qYjI1dVpXTjBYQ0lnZlNrN1hHNGdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxsOWpiMjV1WldOMGFXOXVMbVJwYzJOdmJtNWxZM1FvS1R0Y2JpQWdJQ0I5TENBeU1EQXdLVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUZKbFptVnlaVzVqWlZOMGIzSmxJR2x6SUdFZ2MzQmxZMmxoYkNCdlltcGxZM1FnZDJocFkyZ2djM1J2Y21WeklHOTBhR1Z5SUc5aWFtVmpkSE5jYmlBcUlHRnVaQ0J3Y205MmFXUmxjeUIwYUdVZ2NtVm1aWEpsYm1ObGN5QW9iblZ0WW1WeUtTQnBibk4wWldGa0xpQlVhR2x6SUhKbFptVnlaVzVqWlZ4dUlDb2diV0Y1SUhSb1pXNGdZbVVnYzJWdWRDQnZkbVZ5SUdFZ2FuTnZiaTFpWVhObFpDQmpiMjF0ZFc1cFkyRjBhVzl1SUdOb1lXNXVaV3dnS0VsUVExeHVJQ29nZEc4Z1lXNXZkR2hsY2lCT2IyUmxMbXB6SUhCeWIyTmxjM01nYjNJZ1lTQnRaWE56WVdkbElIUnZJSFJvWlNCWGIzSnJaWElwTGlCUGRHaGxjbHh1SUNvZ2MybDBaU0J0WVhrZ2RHaGxiaUJ3Y205MmFXUmxJSFJvWlNCeVpXWmxjbVZ1WTJVZ2FXNGdkR2hsSUhKbGMzQnZibU5sSUcxbGMzTmhaMlZjYmlBcUlHbHRjR3g1YVc1bklIUm9aU0JuYVhabGJpQnZZbXBsWTNRZ2MyaHZkV3hrSUdKbElHRmpkR2wyWVhSbFpDNWNiaUFxWEc0Z0tpQlFjbWx0WVhKNUlIVnpZV2RsSUdadmNpQjBhR1VnVW1WbVpYSmxibU5sVTNSdmNtVWdhWE1nWVNCemRHOXlZV2RsSUdadmNpQjBhR1ZjYmlBcUlHTmhiR3hpWVdOcmN5d2dkMmhwWTJnZ2RHaGxjbVZtYjNKbElHMWhhMlZ6SUdsMElIQnZjM05wWW14bElIUnZJR2x1YVhScFlYUmxJR0ZjYmlBcUlHTmhiR3hpWVdOcklHVjRaV04xZEdsdmJpQmllU0IwYUdVZ2IzQndiM05wZEdVZ2MybDBaU0FvZDJocFkyZ2dibTl5YldGc2JIa2dZMkZ1Ym05MFhHNGdLaUJrYVhKbFkzUnNlU0JsZUdWamRYUmxJR1oxYm1OMGFXOXVjeUJ2ZG1WeUlIUm9aU0JqYjIxdGRXNXBZMkYwYVc5dUlHTm9ZVzV1Wld3cExseHVJQ3BjYmlBcUlFVmhZMmdnYzNSdmNtVmtJRzlpYW1WamRDQmpZVzRnYjI1c2VTQmlaU0JtWlhSamFHVmtJRzl1WTJVZ1lXNWtJR2x6SUc1dmRGeHVJQ29nWVhaaGFXeGhZbXhsSUdadmNpQjBhR1VnYzJWamIyNWtJSFJwYldVdUlFVmhZMmdnYzNSdmNtVmtJRzlpYW1WamRDQnRkWE4wSUdKbFhHNGdLaUJtWlhSamFHVmtMQ0J6YVc1alpTQnZkR2hsY25kcGMyVWdhWFFnZDJsc2JDQnlaVzFoYVc0Z2MzUnZjbVZrSUdadmNtVjJaWElnWVc1a1hHNGdLaUJqYjI1emRXMWxJRzFsYlc5eWVTNWNiaUFxWEc0Z0tpQlRkRzl5WldRZ2IySnFaV04wSUdsdVpHVmpaWE1nWVhKbElITnBiWEJzZVNCMGFHVWdiblZ0WW1WeWN5d2dkMmhwWTJnZ1lYSmxJR2h2ZDJWMlpYSmNiaUFxSUhKbGJHVmhjMlZrSUdGc2IyNW5JSGRwZEdnZ2RHaGxJRzlpYW1WamRITXNJR0Z1WkNCaGNtVWdiR0YwWlhJZ2NtVjFjMlZrSUdGbllXbHVJQ2hwYmx4dUlDb2diM0prWlhJZ2RHOGdjRzl6ZEhCdmJtVWdkR2hsSUc5MlpYSm1iRzkzTENCM2FHbGphQ0J6YUc5MWJHUWdibTkwSUd4cGEyVnNlU0JvWVhCd1pXNHNYRzRnS2lCaWRYUWdZVzU1ZDJGNUtTNWNiaUFxTDF4dVkyeGhjM01nVW1WbVpYSmxibU5sVTNSdmNtVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5emRHOXlaU0E5SUh0OU95QXZMeUJ6ZEc5eVpXUWdiMkpxWldOMFhHNGdJQ0FnZEdocGN5NWZhVzVrYVdObGN5QTlJRnN3WFRzZ0x5OGdjMjFoYkd4bGMzUWdZWFpoYVd4aFlteGxJR2x1WkdsalpYTmNiaUFnSUNCMGFHbHpMbDl5WldGa2VVaGhibVJzWlhJZ1BTQm1kVzVqZEdsdmJpZ3BJSHQ5TzF4dUlDQWdJSFJvYVhNdVgySjFjM2xJWVc1a2JHVnlJRDBnWm5WdVkzUnBiMjRvS1NCN2ZUdGNiaUFnSUNCMGFHbHpMbDl5WldGa2VVaGhibVJzWlhJb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJqWVd4c0lHaGhibVJzWlhJZ2QyaGxiaUIwYUdVZ2MzUnZjbVVnYVhNZ1pXMXdkSGxjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0R1ZVNURWRWxQVG4wZ2FXUWdiMllnWVNCb1lXNWtiR1Z5WEc0Z0lDQXFMMXh1SUNCdmJsSmxZV1I1S0hKbFlXUjVTR0Z1Wkd4bGNpa2dlMXh1SUNBZ0lIUm9hWE11WDNKbFlXUjVTR0Z1Wkd4bGNpQTlJSEpsWVdSNVNHRnVaR3hsY2lCOGZDQm1kVzVqZEdsdmJpZ3BJSHQ5TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlHTmhiR3dnYUdGdVpHeGxjaUIzYUdWdUlIUm9aU0J6ZEc5eVpTQnBjeUJ1YjNRZ1pXMXdkSGxjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0R1ZVNURWRWxQVG4wZ2FXUWdiMllnWVNCb1lXNWtiR1Z5WEc0Z0lDQXFMMXh1SUNCdmJrSjFjM2tvWW5WemVVaGhibVJzWlhJcElIdGNiaUFnSUNCMGFHbHpMbDlpZFhONVNHRnVaR3hsY2lBOUlHSjFjM2xJWVc1a2JHVnlJSHg4SUdaMWJtTjBhVzl1S0NrZ2UzMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nWjJWMElIUm9aU0JzWlc1bmRHZ2diMllnZEdobElITjBiM0psWEc0Z0lDQXFYRzRnSUNBcUwxeHVJQ0JuWlhSVGRHRmpheWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExtdGxlWE1vZEdocGN5NWZjM1J2Y21VcExteGxibWQwYUR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFablZ1WTNScGIyNGdYMmRsYmtsa0tDa2daMlZ1WlhKaGRHVnpJSFJvWlNCdVpYY2djbVZtWlhKbGJtTmxJR2xrWEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY201eklIdE9kVzFpWlhKOUlITnRZV3hzWlhOMElHRjJZV2xzWVdKc1pTQnBaQ0JoYm1RZ2NtVnpaWEoyWlhNZ2FYUmNiaUFnSUNvdlhHNGdJRjluWlc1SlpDZ3BJSHRjYmlBZ0lDQjJZWElnYVdRN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDJsdVpHbGpaWE11YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQnBaQ0E5SUhSb2FYTXVYMmx1WkdsalpYTmJNRjByS3p0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdhV1FnUFNCMGFHbHpMbDlwYm1ScFkyVnpMbk5vYVdaMEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdsa08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsYkdWaGMyVnpJSFJvWlNCbmFYWmxiaUJ5WldabGNtVnVZMlVnYVdRZ2MyOGdkR2hoZENCcGRDQjNhV3hzSUdKbElHRjJZV2xzWVdKc1pTQmllVnh1SUNBZ0tpQmhibTkwYUdWeUlHOWlhbVZqZENCemRHOXlaV1JjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdsa0lIUnZJSEpsYkdWaGMyVmNiaUFnSUNvdlhHNGdJRjl5Wld4bFlYTmxTV1FvYVdRcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11WDJsdVpHbGpaWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lHbG1JQ2hwWkNBOElIUm9hWE11WDJsdVpHbGpaWE5iYVYwcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXNWthV05sY3k1emNHeHBZMlVvYVN3Z01Dd2dhV1FwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJqYkdWaGJtbHVaeTExY0NCMGFHVWdjMlZ4ZFdWdVkyVWdkR0ZwYkZ4dUlDQWdJR1p2Y2lBb2FTQTlJSFJvYVhNdVgybHVaR2xqWlhNdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QnBMUzBwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5cGJtUnBZMlZ6VzJsZElDMGdNU0E5UFQwZ2RHaHBjeTVmYVc1a2FXTmxjMXRwSUMwZ01WMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZhVzVrYVdObGN5NXdiM0FvS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUZEc5eVpYTWdkR2hsSUdkcGRtVnVJRzlpYW1WamRDQmhibVFnY21WMGRYSnVjeUIwYUdVZ2NtVm1aWEp1WTJVZ2FXUWdhVzV6ZEdWaFpGeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiMkpxSUhSdklITjBiM0psWEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY201eklIdE9kVzFpWlhKOUlISmxabVZ5Wlc1alpTQnBaQ0J2WmlCMGFHVWdjM1J2Y21Wa0lHOWlhbVZqZEZ4dUlDQWdLaTljYmlBZ2NIVjBLRzlpYWlrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TGw5aWRYTjVTR0Z1Wkd4bGNpQW1KaUJQWW1wbFkzUXVhMlY1Y3loMGFHbHpMbDl6ZEc5eVpTa3ViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlpZFhONVNHRnVaR3hsY2lncE8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2FXUWdQU0IwYUdsekxsOW5aVzVKWkNncE8xeHVJQ0FnSUhSb2FYTXVYM04wYjNKbFcybGtYU0E5SUc5aWFqdGNiaUFnSUNCeVpYUjFjbTRnYVdRN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwY21sbGRtVnpJSEJ5WlhacGIzVnpiSGtnYzNSdmNtVmtJRzlpYW1WamRDQmhibVFnY21Wc1pXRnpaWE1nYVhSeklISmxabVZ5Wlc1alpWeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdhV1FnYjJZZ1lXNGdiMkpxWldOMElIUnZJSEpsZEhKcFpYWmxYRzRnSUNBcUwxeHVJQ0JtWlhSamFDaHBaQ2tnZTF4dUlDQWdJSFpoY2lCdlltb2dQU0IwYUdsekxsOXpkRzl5WlZ0cFpGMDdYRzRnSUNBZ2FXWWdLRzlpYWlBbUppQWhiMkpxTGw5ZmNtVnRiM1JsWDIxbGRHaHZaQ2tnZTF4dUlDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdVgzTjBiM0psVzJsa1hUdGNiaUFnSUNBZ0lIUm9hWE11WDNKbGJHVmhjMlZKWkNocFpDazdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZjbVZoWkhsSVlXNWtiR1Z5SUNZbUlFOWlhbVZqZEM1clpYbHpLSFJvYVhNdVgzTjBiM0psS1M1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZoWkhsSVlXNWtiR1Z5S0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNodlltb2dKaVlnYjJKcUxsOWZjbkJqWDNCaGFYSXBJSHRjYmlBZ0lDQWdJR052Ym5OMElGOXBaQ0E5SUdkbGRFdGxlVUo1Vm1Gc2RXVW9kR2hwY3k1ZmMzUnZjbVVzSUc5aWFpNWZYM0p3WTE5d1lXbHlLVHRjYmlBZ0lDQWdJSFJvYVhNdVptVjBZMmdvWDJsa0tUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzlpYWp0Y2JpQWdmVnh1ZlZ4dUlsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenM3TzBGQlNVRTdRVUZQUVR0QlFVVkJPMEZCUTBFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVWRCTzBGQlJVRTdPenM3T3pzN096czdRVUZSUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJSMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZJUVR0QlFVdEJPMEZCUTBFN096czdPenM3T3p0QlFWRkJPMEZCUTBFN1FVRkRRVHRCUVVWQk96czdPenRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVVZCT3pzN096czdPenRCUVUxQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlJVRTdPenM3T3p0QlFVbEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVVpCTzBGQlNVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkVRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlJrRTdRVUZKUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVbEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVkQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZKUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVZEJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUkVFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZHUVR0QlFVbEJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3T3pzN096dEJRVWxCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZKUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlNrRTdRVUZOUVR0QlFVVkJPenM3T3pzN08wRkJTMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3T3pzN096czdPenM3T3p0QlFWVkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJUa0U3UVVGVlFUdEJRVU5CTzBGQlEwRTdRVUZKUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVVZCT3pzN096czdRVUZKUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJSVUU3T3pzN096czdPenM3TzBGQlUwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRlJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXBCTzBGQlEwRTdRVUZMUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tFN1FVRk5RVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlNrRTdRVUZOUVR0QlFVTkJPMEZCUTBFN1FVRkpRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGS1FUdEJRVTFCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZJUVR0QlFVdEJPMEZCUlVFN1FVRlNRVHRCUVd0Q1FUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJURUU3UVVGUFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVoQk8wRkJTMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVWkJPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGR1FUdEJRVWxCTzBGQlNVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSa0U3UVVGTFFUdEJRVU5CTzBGQlJrRTdRVUZMUVR0QlFVbEJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJTMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVsQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkhRVHRCUVVOQk8wRkJTMEU3UVVGRFFUdEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJTMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVUkJPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVRzN096czdPenM3T3pzN096dEJRVmRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN096czdPenM3T3pzN096czdPenRCUVdGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGTVFUdEJRVk5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGS1FUdEJRVkZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHM3T3pzN1FVRkhRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVRkNlFrRTdRVUVyZWtKQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGMVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUlVFN096czdPenM3UVVGTFFUdEJRVU5CTzBGQlEwRTdRVUZGUVRzN096czdPenRCUVV0Qk8wRkJRMEU3UVVGRFFUdEJRVVZCT3pzN096czdRVUZKUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHM3T3pzN096dEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVRzN096czdPenM3UVVGTlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUczdPenM3T3pzN08wRkJUMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRlFUczdPenM3T3p0QlFVdEJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJMMGRCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vLi9zcmMvcnBjLmpzXFxcXG5cXFwiKTtcXG5cXG4vKioqLyB9KSxcXG5cXG4vKioqLyBcXFwiLi9zcmMvdXRpbHMuanNcXFwiOlxcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXFxcXG4gICEqKiogLi9zcmMvdXRpbHMuanMgKioqIVxcbiAgXFxcXCoqKioqKioqKioqKioqKioqKioqKiovXFxuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IHJhbmRJZCwgZHR5cGVUb1R5cGVkQXJyYXksIHR5cGVkQXJyYXlUb0R0eXBlLCBjYWNoZVJlcXVpcmVtZW50cywgc2V0dXBTZXJ2aWNlV29ya2VyLCB1cmxKb2luLCBNZXNzYWdlRW1pdHRlciAqL1xcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcXG5cXG5cXFwidXNlIHN0cmljdFxcXCI7XFxuZXZhbChcXFwiX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xcXFxuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcXFxcXFxcInJhbmRJZFxcXFxcXFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHJhbmRJZDsgfSk7XFxcXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFxcXFxcXFwiZHR5cGVUb1R5cGVkQXJyYXlcXFxcXFxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBkdHlwZVRvVHlwZWRBcnJheTsgfSk7XFxcXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFxcXFxcXFwidHlwZWRBcnJheVRvRHR5cGVcXFxcXFxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiB0eXBlZEFycmF5VG9EdHlwZTsgfSk7XFxcXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFxcXFxcXFwiY2FjaGVSZXF1aXJlbWVudHNcXFxcXFxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBjYWNoZVJlcXVpcmVtZW50czsgfSk7XFxcXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFxcXFxcXFwic2V0dXBTZXJ2aWNlV29ya2VyXFxcXFxcXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2V0dXBTZXJ2aWNlV29ya2VyOyB9KTtcXFxcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXFxcXFxcXCJ1cmxKb2luXFxcXFxcXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdXJsSm9pbjsgfSk7XFxcXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFxcXFxcXFwiTWVzc2FnZUVtaXR0ZXJcXFxcXFxcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNZXNzYWdlRW1pdHRlcjsgfSk7XFxcXG5mdW5jdGlvbiByYW5kSWQoKSB7XFxcXG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTApICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XFxcXG59XFxcXG5jb25zdCBkdHlwZVRvVHlwZWRBcnJheSA9IHtcXFxcbiAgaW50ODogXFxcXFxcXCJJbnQ4QXJyYXlcXFxcXFxcIixcXFxcbiAgaW50MTY6IFxcXFxcXFwiSW50MTZBcnJheVxcXFxcXFwiLFxcXFxuICBpbnQzMjogXFxcXFxcXCJJbnQzMkFycmF5XFxcXFxcXCIsXFxcXG4gIHVpbnQ4OiBcXFxcXFxcIlVpbnQ4QXJyYXlcXFxcXFxcIixcXFxcbiAgdWludDE2OiBcXFxcXFxcIlVpbnQxNkFycmF5XFxcXFxcXCIsXFxcXG4gIHVpbnQzMjogXFxcXFxcXCJVaW50MzJBcnJheVxcXFxcXFwiLFxcXFxuICBmbG9hdDMyOiBcXFxcXFxcIkZsb2F0MzJBcnJheVxcXFxcXFwiLFxcXFxuICBmbG9hdDY0OiBcXFxcXFxcIkZsb2F0NjRBcnJheVxcXFxcXFwiLFxcXFxuICBhcnJheTogXFxcXFxcXCJBcnJheVxcXFxcXFwiXFxcXG59O1xcXFxuY29uc3QgdHlwZWRBcnJheVRvRHR5cGUgPSB7XFxcXG4gIEludDhBcnJheTogXFxcXFxcXCJpbnQ4XFxcXFxcXCIsXFxcXG4gIEludDE2QXJyYXk6IFxcXFxcXFwiaW50MTZcXFxcXFxcIixcXFxcbiAgSW50MzJBcnJheTogXFxcXFxcXCJpbnQzMlxcXFxcXFwiLFxcXFxuICBVaW50OEFycmF5OiBcXFxcXFxcInVpbnQ4XFxcXFxcXCIsXFxcXG4gIFVpbnQxNkFycmF5OiBcXFxcXFxcInVpbnQxNlxcXFxcXFwiLFxcXFxuICBVaW50MzJBcnJheTogXFxcXFxcXCJ1aW50MzJcXFxcXFxcIixcXFxcbiAgRmxvYXQzMkFycmF5OiBcXFxcXFxcImZsb2F0MzJcXFxcXFxcIixcXFxcbiAgRmxvYXQ2NEFycmF5OiBcXFxcXFxcImZsb2F0NjRcXFxcXFxcIixcXFxcbiAgQXJyYXk6IFxcXFxcXFwiYXJyYXlcXFxcXFxcIlxcXFxufTtcXFxcblxcXFxuZnVuY3Rpb24gY2FjaGVVcmxJblNlcnZpY2VXb3JrZXIodXJsKSB7XFxcXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XFxcXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcXFxcbiAgICAgIGNvbW1hbmQ6IFxcXFxcXFwiYWRkXFxcXFxcXCIsXFxcXG4gICAgICB1cmw6IHVybFxcXFxuICAgIH07XFxcXG5cXFxcbiAgICBpZiAoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyIHx8ICFuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcikge1xcXFxuICAgICAgcmVqZWN0KFxcXFxcXFwiU2VydmljZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZC5cXFxcXFxcIik7XFxcXG4gICAgICByZXR1cm47XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgY29uc3QgbWVzc2FnZUNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcXFxcblxcXFxuICAgIG1lc3NhZ2VDaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xcXFxuICAgICAgaWYgKGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YS5lcnJvcikge1xcXFxuICAgICAgICByZWplY3QoZXZlbnQuZGF0YS5lcnJvcik7XFxcXG4gICAgICB9IGVsc2Uge1xcXFxuICAgICAgICByZXNvbHZlKGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YS5yZXN1bHQpO1xcXFxuICAgICAgfVxcXFxuICAgIH07XFxcXG5cXFxcbiAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIgJiYgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikge1xcXFxuICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlci5wb3N0TWVzc2FnZShtZXNzYWdlLCBbbWVzc2FnZUNoYW5uZWwucG9ydDJdKTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgcmVqZWN0KFxcXFxcXFwiU2VydmljZSB3b3JrZXIgY29udHJvbGxlciBpcyBub3QgYXZhaWxhYmxlXFxcXFxcXCIpO1xcXFxuICAgIH1cXFxcbiAgfSk7XFxcXG59XFxcXG5cXFxcbmFzeW5jIGZ1bmN0aW9uIGNhY2hlUmVxdWlyZW1lbnRzKHJlcXVpcmVtZW50cykge1xcXFxuICBpZiAoIUFycmF5LmlzQXJyYXkocmVxdWlyZW1lbnRzKSkge1xcXFxuICAgIHJlcXVpcmVtZW50c20uY29kZS5yZXF1aXJlbWVudHMgPSBbcmVxdWlyZW1lbnRzXTtcXFxcbiAgfVxcXFxuXFxcXG4gIGlmIChyZXF1aXJlbWVudHMgJiYgcmVxdWlyZW1lbnRzLmxlbmd0aCA+IDApIHtcXFxcbiAgICBmb3IgKGxldCByZXEgb2YgcmVxdWlyZW1lbnRzKSB7XFxcXG4gICAgICAvL3JlbW92ZSBwcmVmaXhcXFxcbiAgICAgIGlmIChyZXEuc3RhcnRzV2l0aChcXFxcXFxcImpzOlxcXFxcXFwiKSkgcmVxID0gcmVxLnNsaWNlKDMpO1xcXFxuICAgICAgaWYgKHJlcS5zdGFydHNXaXRoKFxcXFxcXFwiY3NzOlxcXFxcXFwiKSkgcmVxID0gcmVxLnNsaWNlKDQpO1xcXFxuICAgICAgaWYgKHJlcS5zdGFydHNXaXRoKFxcXFxcXFwiY2FjaGU6XFxcXFxcXCIpKSByZXEgPSByZXEuc2xpY2UoNik7XFxcXG4gICAgICBpZiAoIXJlcS5zdGFydHNXaXRoKFxcXFxcXFwiaHR0cFxcXFxcXFwiKSkgY29udGludWU7XFxcXG4gICAgICBhd2FpdCBjYWNoZVVybEluU2VydmljZVdvcmtlcihyZXEpLmNhdGNoKGUgPT4ge1xcXFxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xcXFxuICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICB9XFxcXG59XFxcXG5mdW5jdGlvbiBzZXR1cFNlcnZpY2VXb3JrZXIoYmFzZVVybCwgdGFyZ2V0T3JpZ2luLCBjYWNoZUNhbGxiYWNrKSB7XFxcXG4gIC8vIHJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyIGZvciBvZmZsaW5lIGFjY2Vzc1xcXFxuICBpZiAoXFxcXFxcXCJzZXJ2aWNlV29ya2VyXFxcXFxcXCIgaW4gbmF2aWdhdG9yKSB7XFxcXG4gICAgYmFzZVVybCA9IGJhc2VVcmwgfHwgXFxcXFxcXCIvXFxcXFxcXCI7XFxcXG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoYmFzZVVybCArIFxcXFxcXFwicGx1Z2luLXNlcnZpY2Utd29ya2VyLmpzXFxcXFxcXCIpLnRoZW4oZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbikge1xcXFxuICAgICAgLy8gUmVnaXN0cmF0aW9uIHdhcyBzdWNjZXNzZnVsXFxcXG4gICAgICBjb25zb2xlLmxvZyhcXFxcXFxcIlNlcnZpY2VXb3JrZXIgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwgd2l0aCBzY29wZTogXFxcXFxcXCIsIHJlZ2lzdHJhdGlvbi5zY29wZSk7XFxcXG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xcXFxuICAgICAgLy8gcmVnaXN0cmF0aW9uIGZhaWxlZCA6KFxcXFxuICAgICAgY29uc29sZS5sb2coXFxcXFxcXCJTZXJ2aWNlV29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6IFxcXFxcXFwiLCBlcnIpO1xcXFxuICAgIH0pO1xcXFxuICAgIHRhcmdldE9yaWdpbiA9IHRhcmdldE9yaWdpbiB8fCBcXFxcXFxcIipcXFxcXFxcIjtcXFxcbiAgICBjYWNoZUNhbGxiYWNrID0gY2FjaGVDYWxsYmFjayB8fCBjYWNoZVJlcXVpcmVtZW50cztcXFxcblxcXFxuICAgIGlmIChjYWNoZUNhbGxiYWNrICYmIHR5cGVvZiBjYWNoZUNhbGxiYWNrICE9PSBcXFxcXFxcImZ1bmN0aW9uXFxcXFxcXCIpIHtcXFxcbiAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcImNvbmZpZy5jYWNoZV9yZXF1aXJlbWVudHMgbXVzdCBiZSBhIGZ1bmN0aW9uXFxcXFxcXCIpO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxcXFxcXFwibWVzc2FnZVxcXFxcXFwiLCBmdW5jdGlvbiAoZSkge1xcXFxuICAgICAgaWYgKHRhcmdldE9yaWdpbiA9PT0gXFxcXFxcXCIqXFxcXFxcXCIgfHwgZS5vcmlnaW4gPT09IHRhcmdldE9yaWdpbikge1xcXFxuICAgICAgICBjb25zdCBtID0gZS5kYXRhO1xcXFxuXFxcXG4gICAgICAgIGlmIChtLnR5cGUgPT09IFxcXFxcXFwiY2FjaGVSZXF1aXJlbWVudHNcXFxcXFxcIikge1xcXFxuICAgICAgICAgIGNhY2hlQ2FsbGJhY2sobS5yZXF1aXJlbWVudHMpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICB9XFxcXG4gICAgfSk7XFxcXG4gIH1cXFxcbn0gLy8jU291cmNlIGh0dHBzOi8vYml0Lmx5LzJuZVdmSjJcXFxcblxcXFxuZnVuY3Rpb24gdXJsSm9pbiguLi5hcmdzKSB7XFxcXG4gIHJldHVybiBhcmdzLmpvaW4oXFxcXFxcXCIvXFxcXFxcXCIpLnJlcGxhY2UoL1tcXFxcXFxcXC9dKy9nLCBcXFxcXFxcIi9cXFxcXFxcIikucmVwbGFjZSgvXiguKyk6XFxcXFxcXFwvLywgXFxcXFxcXCIkMTovL1xcXFxcXFwiKS5yZXBsYWNlKC9eZmlsZTovLCBcXFxcXFxcImZpbGU6L1xcXFxcXFwiKS5yZXBsYWNlKC9cXFxcXFxcXC8oXFxcXFxcXFw/fCZ8I1teIV0pL2csIFxcXFxcXFwiJDFcXFxcXFxcIikucmVwbGFjZSgvXFxcXFxcXFw/L2csIFxcXFxcXFwiJlxcXFxcXFwiKS5yZXBsYWNlKFxcXFxcXFwiJlxcXFxcXFwiLCBcXFxcXFxcIj9cXFxcXFxcIik7XFxcXG59XFxcXG5jbGFzcyBNZXNzYWdlRW1pdHRlciB7XFxcXG4gIGNvbnN0cnVjdG9yKGRlYnVnKSB7XFxcXG4gICAgdGhpcy5fZXZlbnRfaGFuZGxlcnMgPSB7fTtcXFxcbiAgICB0aGlzLl9vbmNlX2hhbmRsZXJzID0ge307XFxcXG4gICAgdGhpcy5fZGVidWcgPSBkZWJ1ZztcXFxcbiAgfVxcXFxuXFxcXG4gIGVtaXQoKSB7XFxcXG4gICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwiZW1pdCBpcyBub3QgaW1wbGVtZW50ZWRcXFxcXFxcIik7XFxcXG4gIH1cXFxcblxcXFxuICBvbihldmVudCwgaGFuZGxlcikge1xcXFxuICAgIGlmICghdGhpcy5fZXZlbnRfaGFuZGxlcnNbZXZlbnRdKSB7XFxcXG4gICAgICB0aGlzLl9ldmVudF9oYW5kbGVyc1tldmVudF0gPSBbXTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICB0aGlzLl9ldmVudF9oYW5kbGVyc1tldmVudF0ucHVzaChoYW5kbGVyKTtcXFxcbiAgfVxcXFxuXFxcXG4gIG9uY2UoZXZlbnQsIGhhbmRsZXIpIHtcXFxcbiAgICBoYW5kbGVyLl9fX2V2ZW50X3J1bl9vbmNlID0gdHJ1ZTtcXFxcbiAgICB0aGlzLm9uKGV2ZW50LCBoYW5kbGVyKTtcXFxcbiAgfVxcXFxuXFxcXG4gIG9mZihldmVudCwgaGFuZGxlcikge1xcXFxuICAgIGlmICghZXZlbnQgJiYgIWhhbmRsZXIpIHtcXFxcbiAgICAgIC8vIHJlbW92ZSBhbGwgZXZlbnRzIGhhbmRsZXJzXFxcXG4gICAgICB0aGlzLl9ldmVudF9oYW5kbGVycyA9IHt9O1xcXFxuICAgIH0gZWxzZSBpZiAoZXZlbnQgJiYgIWhhbmRsZXIpIHtcXFxcbiAgICAgIC8vIHJlbW92ZSBhbGwgaGFubGRlcnMgZm9yIHRoZSBldmVudFxcXFxuICAgICAgaWYgKHRoaXMuX2V2ZW50X2hhbmRsZXJzW2V2ZW50XSkgdGhpcy5fZXZlbnRfaGFuZGxlcnNbZXZlbnRdID0gW107XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgIC8vIHJlbW92ZSBhIHNwZWNpZmljIGhhbmRsZXJcXFxcbiAgICAgIGlmICh0aGlzLl9ldmVudF9oYW5kbGVyc1tldmVudF0pIHtcXFxcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5fZXZlbnRfaGFuZGxlcnNbZXZlbnRdLmluZGV4T2YoaGFuZGxlcik7XFxcXG5cXFxcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XFxcXG4gICAgICAgICAgdGhpcy5fZXZlbnRfaGFuZGxlcnNbZXZlbnRdLnNwbGljZShpZHgsIDEpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICB9XFxcXG4gICAgfVxcXFxuICB9XFxcXG5cXFxcbiAgX2ZpcmUoZXZlbnQsIGRhdGEpIHtcXFxcbiAgICBpZiAodGhpcy5fZXZlbnRfaGFuZGxlcnNbZXZlbnRdKSB7XFxcXG4gICAgICB2YXIgaSA9IHRoaXMuX2V2ZW50X2hhbmRsZXJzW2V2ZW50XS5sZW5ndGg7XFxcXG5cXFxcbiAgICAgIHdoaWxlIChpLS0pIHtcXFxcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuX2V2ZW50X2hhbmRsZXJzW2V2ZW50XVtpXTtcXFxcblxcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgIGhhbmRsZXIoZGF0YSk7XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xcXFxuICAgICAgICB9IGZpbmFsbHkge1xcXFxuICAgICAgICAgIGlmIChoYW5kbGVyLl9fX2V2ZW50X3J1bl9vbmNlKSB7XFxcXG4gICAgICAgICAgICB0aGlzLl9ldmVudF9oYW5kbGVyc1tldmVudF0uc3BsaWNlKGksIDEpO1xcXFxuICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgfVxcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICBpZiAodGhpcy5fZGVidWcpIHtcXFxcbiAgICAgICAgY29uc29sZS53YXJuKFxcXFxcXFwidW5oYW5kbGVkIGV2ZW50XFxcXFxcXCIsIGV2ZW50LCBkYXRhKTtcXFxcbiAgICAgIH1cXFxcbiAgICB9XFxcXG4gIH1cXFxcblxcXFxufS8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXFxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTGk5emNtTXZkWFJwYkhNdWFuTXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OXBiV3B2ZVZKUVF5OHVMM055WXk5MWRHbHNjeTVxY3o4d01qVmxJbDBzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5WVc1a1NXUW9LU0I3WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnVFdGMGFDNXlZVzVrYjIwb0tWeHVJQ0FnSUNBZ0xuUnZVM1J5YVc1bktETTJLVnh1SUNBZ0lDQWdMbk4xWW5OMGNpZ3lMQ0F4TUNrZ0t5QnVaWGNnUkdGMFpTZ3BMbWRsZEZScGJXVW9LVnh1SUNBcE8xeHVmVnh1WEc1bGVIQnZjblFnWTI5dWMzUWdaSFI1Y0dWVWIxUjVjR1ZrUVhKeVlYa2dQU0I3WEc0Z0lHbHVkRGc2SUZ3aVNXNTBPRUZ5Y21GNVhDSXNYRzRnSUdsdWRERTJPaUJjSWtsdWRERTJRWEp5WVhsY0lpeGNiaUFnYVc1ME16STZJRndpU1c1ME16SkJjbkpoZVZ3aUxGeHVJQ0IxYVc1ME9Eb2dYQ0pWYVc1ME9FRnljbUY1WENJc1hHNGdJSFZwYm5ReE5qb2dYQ0pWYVc1ME1UWkJjbkpoZVZ3aUxGeHVJQ0IxYVc1ME16STZJRndpVldsdWRETXlRWEp5WVhsY0lpeGNiaUFnWm14dllYUXpNam9nWENKR2JHOWhkRE15UVhKeVlYbGNJaXhjYmlBZ1pteHZZWFEyTkRvZ1hDSkdiRzloZERZMFFYSnlZWGxjSWl4Y2JpQWdZWEp5WVhrNklGd2lRWEp5WVhsY0lseHVmVHRjYm1WNGNHOXlkQ0JqYjI1emRDQjBlWEJsWkVGeWNtRjVWRzlFZEhsd1pTQTlJSHRjYmlBZ1NXNTBPRUZ5Y21GNU9pQmNJbWx1ZERoY0lpeGNiaUFnU1c1ME1UWkJjbkpoZVRvZ1hDSnBiblF4Tmx3aUxGeHVJQ0JKYm5Rek1rRnljbUY1T2lCY0ltbHVkRE15WENJc1hHNGdJRlZwYm5RNFFYSnlZWGs2SUZ3aWRXbHVkRGhjSWl4Y2JpQWdWV2x1ZERFMlFYSnlZWGs2SUZ3aWRXbHVkREUyWENJc1hHNGdJRlZwYm5Rek1rRnljbUY1T2lCY0luVnBiblF6TWx3aUxGeHVJQ0JHYkc5aGRETXlRWEp5WVhrNklGd2labXh2WVhRek1sd2lMRnh1SUNCR2JHOWhkRFkwUVhKeVlYazZJRndpWm14dllYUTJORndpTEZ4dUlDQkJjbkpoZVRvZ1hDSmhjbkpoZVZ3aVhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCallXTm9aVlZ5YkVsdVUyVnlkbWxqWlZkdmNtdGxjaWgxY213cElIdGNiaUFnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJR052Ym5OMElHMWxjM05oWjJVZ1BTQjdYRzRnSUNBZ0lDQmpiMjF0WVc1a09pQmNJbUZrWkZ3aUxGeHVJQ0FnSUNBZ2RYSnNPaUIxY214Y2JpQWdJQ0I5TzF4dUlDQWdJR2xtSUNnaGJtRjJhV2RoZEc5eUxuTmxjblpwWTJWWGIzSnJaWElnZkh3Z0lXNWhkbWxuWVhSdmNpNXpaWEoyYVdObFYyOXlhMlZ5TG5KbFoybHpkR1Z5S1NCN1hHNGdJQ0FnSUNCeVpXcGxZM1FvWENKVFpYSjJhV05sSUhkdmNtdGxjaUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtMbHdpS1R0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnYldWemMyRm5aVU5vWVc1dVpXd2dQU0J1WlhjZ1RXVnpjMkZuWlVOb1lXNXVaV3dvS1R0Y2JpQWdJQ0J0WlhOellXZGxRMmhoYm01bGJDNXdiM0owTVM1dmJtMWxjM05oWjJVZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1YyWlc1MExtUmhkR0VnSmlZZ1pYWmxiblF1WkdGMFlTNWxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYWmxiblF1WkdGMFlTNWxjbkp2Y2lrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0dWMlpXNTBMbVJoZEdFZ0ppWWdaWFpsYm5RdVpHRjBZUzV5WlhOMWJIUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQnBaaUFvYm1GMmFXZGhkRzl5TG5ObGNuWnBZMlZYYjNKclpYSWdKaVlnYm1GMmFXZGhkRzl5TG5ObGNuWnBZMlZYYjNKclpYSXVZMjl1ZEhKdmJHeGxjaWtnZTF4dUlDQWdJQ0FnYm1GMmFXZGhkRzl5TG5ObGNuWnBZMlZYYjNKclpYSXVZMjl1ZEhKdmJHeGxjaTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsTENCYlhHNGdJQ0FnSUNBZ0lHMWxjM05oWjJWRGFHRnVibVZzTG5CdmNuUXlYRzRnSUNBZ0lDQmRLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVnFaV04wS0Z3aVUyVnlkbWxqWlNCM2IzSnJaWElnWTI5dWRISnZiR3hsY2lCcGN5QnViM1FnWVhaaGFXeGhZbXhsWENJcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1OVhHNWNibVY0Y0c5eWRDQmhjM2x1WXlCbWRXNWpkR2x2YmlCallXTm9aVkpsY1hWcGNtVnRaVzUwY3loeVpYRjFhWEpsYldWdWRITXBJSHRjYmlBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtISmxjWFZwY21WdFpXNTBjeWtwSUh0Y2JpQWdJQ0J5WlhGMWFYSmxiV1Z1ZEhOdExtTnZaR1V1Y21WeGRXbHlaVzFsYm5SeklEMGdXM0psY1hWcGNtVnRaVzUwYzEwN1hHNGdJSDFjYmlBZ2FXWWdLSEpsY1hWcGNtVnRaVzUwY3lBbUppQnlaWEYxYVhKbGJXVnVkSE11YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUdadmNpQW9iR1YwSUhKbGNTQnZaaUJ5WlhGMWFYSmxiV1Z1ZEhNcElIdGNiaUFnSUNBZ0lDOHZjbVZ0YjNabElIQnlaV1pwZUZ4dUlDQWdJQ0FnYVdZZ0tISmxjUzV6ZEdGeWRITlhhWFJvS0Z3aWFuTTZYQ0lwS1NCeVpYRWdQU0J5WlhFdWMyeHBZMlVvTXlrN1hHNGdJQ0FnSUNCcFppQW9jbVZ4TG5OMFlYSjBjMWRwZEdnb1hDSmpjM002WENJcEtTQnlaWEVnUFNCeVpYRXVjMnhwWTJVb05DazdYRzRnSUNBZ0lDQnBaaUFvY21WeExuTjBZWEowYzFkcGRHZ29YQ0pqWVdOb1pUcGNJaWtwSUhKbGNTQTlJSEpsY1M1emJHbGpaU2cyS1R0Y2JpQWdJQ0FnSUdsbUlDZ2hjbVZ4TG5OMFlYSjBjMWRwZEdnb1hDSm9kSFJ3WENJcEtTQmpiMjUwYVc1MVpUdGNibHh1SUNBZ0lDQWdZWGRoYVhRZ1kyRmphR1ZWY214SmJsTmxjblpwWTJWWGIzSnJaWElvY21WeEtTNWpZWFJqYUNobElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGxLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzJWMGRYQlRaWEoyYVdObFYyOXlhMlZ5S0dKaGMyVlZjbXdzSUhSaGNtZGxkRTl5YVdkcGJpd2dZMkZqYUdWRFlXeHNZbUZqYXlrZ2UxeHVJQ0F2THlCeVpXZHBjM1JsY2lCelpYSjJhV05sSUhkdmNtdGxjaUJtYjNJZ2IyWm1iR2x1WlNCaFkyTmxjM05jYmlBZ2FXWWdLRndpYzJWeWRtbGpaVmR2Y210bGNsd2lJR2x1SUc1aGRtbG5ZWFJ2Y2lrZ2UxeHVJQ0FnSUdKaGMyVlZjbXdnUFNCaVlYTmxWWEpzSUh4OElGd2lMMXdpTzF4dUlDQWdJRzVoZG1sbllYUnZjaTV6WlhKMmFXTmxWMjl5YTJWeUxuSmxaMmx6ZEdWeUtHSmhjMlZWY213Z0t5QmNJbkJzZFdkcGJpMXpaWEoyYVdObExYZHZjbXRsY2k1cWMxd2lLUzUwYUdWdUtGeHVJQ0FnSUNBZ1puVnVZM1JwYjI0b2NtVm5hWE4wY21GMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGSmxaMmx6ZEhKaGRHbHZiaUIzWVhNZ2MzVmpZMlZ6YzJaMWJGeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhjYmlBZ0lDQWdJQ0FnSUNCY0lsTmxjblpwWTJWWGIzSnJaWElnY21WbmFYTjBjbUYwYVc5dUlITjFZMk5sYzNObWRXd2dkMmwwYUNCelkyOXdaVG9nWENJc1hHNGdJQ0FnSUNBZ0lDQWdjbVZuYVhOMGNtRjBhVzl1TG5OamIzQmxYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQzh2SUhKbFoybHpkSEpoZEdsdmJpQm1ZV2xzWldRZ09paGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWENKVFpYSjJhV05sVjI5eWEyVnlJSEpsWjJsemRISmhkR2x2YmlCbVlXbHNaV1E2SUZ3aUxDQmxjbklwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ2s3WEc0Z0lDQWdkR0Z5WjJWMFQzSnBaMmx1SUQwZ2RHRnlaMlYwVDNKcFoybHVJSHg4SUZ3aUtsd2lPMXh1SUNBZ0lHTmhZMmhsUTJGc2JHSmhZMnNnUFNCallXTm9aVU5oYkd4aVlXTnJJSHg4SUdOaFkyaGxVbVZ4ZFdseVpXMWxiblJ6TzF4dUlDQWdJR2xtSUNoallXTm9aVU5oYkd4aVlXTnJJQ1ltSUhSNWNHVnZaaUJqWVdOb1pVTmhiR3hpWVdOcklDRTlQU0JjSW1aMWJtTjBhVzl1WENJcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltTnZibVpwWnk1allXTm9aVjl5WlhGMWFYSmxiV1Z1ZEhNZ2JYVnpkQ0JpWlNCaElHWjFibU4wYVc5dVhDSXBPMXh1SUNBZ0lIMWNiaUFnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhjSW0xbGMzTmhaMlZjSWl3Z1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdhV1lnS0hSaGNtZGxkRTl5YVdkcGJpQTlQVDBnWENJcVhDSWdmSHdnWlM1dmNtbG5hVzRnUFQwOUlIUmhjbWRsZEU5eWFXZHBiaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0SUQwZ1pTNWtZWFJoTzF4dUlDQWdJQ0FnSUNCcFppQW9iUzUwZVhCbElEMDlQU0JjSW1OaFkyaGxVbVZ4ZFdseVpXMWxiblJ6WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0JqWVdOb1pVTmhiR3hpWVdOcktHMHVjbVZ4ZFdseVpXMWxiblJ6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNWNiaTh2STFOdmRYSmpaU0JvZEhSd2N6b3ZMMkpwZEM1c2VTOHlibVZYWmtveVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RYSnNTbTlwYmlndUxpNWhjbWR6S1NCN1hHNGdJSEpsZEhWeWJpQmhjbWR6WEc0Z0lDQWdMbXB2YVc0b1hDSXZYQ0lwWEc0Z0lDQWdMbkpsY0d4aFkyVW9MMXRjWEM5ZEt5OW5MQ0JjSWk5Y0lpbGNiaUFnSUNBdWNtVndiR0ZqWlNndlhpZ3VLeWs2WEZ3dkx5d2dYQ0lrTVRvdkwxd2lLVnh1SUNBZ0lDNXlaWEJzWVdObEtDOWVabWxzWlRvdkxDQmNJbVpwYkdVNkwxd2lLVnh1SUNBZ0lDNXlaWEJzWVdObEtDOWNYQzhvWEZ3L2ZDWjhJMXRlSVYwcEwyY3NJRndpSkRGY0lpbGNiaUFnSUNBdWNtVndiR0ZqWlNndlhGdy9MMmNzSUZ3aUpsd2lLVnh1SUNBZ0lDNXlaWEJzWVdObEtGd2lKbHdpTENCY0lqOWNJaWs3WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTlpYTnpZV2RsUlcxcGRIUmxjaUI3WEc0Z0lHTnZibk4wY25WamRHOXlLR1JsWW5WbktTQjdYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUmZhR0Z1Wkd4bGNuTWdQU0I3ZlR0Y2JpQWdJQ0IwYUdsekxsOXZibU5sWDJoaGJtUnNaWEp6SUQwZ2UzMDdYRzRnSUNBZ2RHaHBjeTVmWkdWaWRXY2dQU0JrWldKMVp6dGNiaUFnZlZ4dUlDQmxiV2wwS0NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1WdGFYUWdhWE1nYm05MElHbHRjR3hsYldWdWRHVmtYQ0lwTzF4dUlDQjlYRzRnSUc5dUtHVjJaVzUwTENCb1lXNWtiR1Z5S1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5bGRtVnVkRjlvWVc1a2JHVnljMXRsZG1WdWRGMHBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwWDJoaGJtUnNaWEp6VzJWMlpXNTBYU0E5SUZ0ZE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxsOWxkbVZ1ZEY5b1lXNWtiR1Z5YzF0bGRtVnVkRjB1Y0hWemFDaG9ZVzVrYkdWeUtUdGNiaUFnZlZ4dUlDQnZibU5sS0dWMlpXNTBMQ0JvWVc1a2JHVnlLU0I3WEc0Z0lDQWdhR0Z1Wkd4bGNpNWZYMTlsZG1WdWRGOXlkVzVmYjI1alpTQTlJSFJ5ZFdVN1hHNGdJQ0FnZEdocGN5NXZiaWhsZG1WdWRDd2dhR0Z1Wkd4bGNpazdYRzRnSUgxY2JpQWdiMlptS0dWMlpXNTBMQ0JvWVc1a2JHVnlLU0I3WEc0Z0lDQWdhV1lnS0NGbGRtVnVkQ0FtSmlBaGFHRnVaR3hsY2lrZ2UxeHVJQ0FnSUNBZ0x5OGdjbVZ0YjNabElHRnNiQ0JsZG1WdWRITWdhR0Z1Wkd4bGNuTmNiaUFnSUNBZ0lIUm9hWE11WDJWMlpXNTBYMmhoYm1Sc1pYSnpJRDBnZTMwN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNobGRtVnVkQ0FtSmlBaGFHRnVaR3hsY2lrZ2UxeHVJQ0FnSUNBZ0x5OGdjbVZ0YjNabElHRnNiQ0JvWVc1c1pHVnljeUJtYjNJZ2RHaGxJR1YyWlc1MFhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZlpYWmxiblJmYUdGdVpHeGxjbk5iWlhabGJuUmRLU0IwYUdsekxsOWxkbVZ1ZEY5b1lXNWtiR1Z5YzF0bGRtVnVkRjBnUFNCYlhUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnTHk4Z2NtVnRiM1psSUdFZ2MzQmxZMmxtYVdNZ2FHRnVaR3hsY2x4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDJWMlpXNTBYMmhoYm1Sc1pYSnpXMlYyWlc1MFhTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBaSGdnUFNCMGFHbHpMbDlsZG1WdWRGOW9ZVzVrYkdWeWMxdGxkbVZ1ZEYwdWFXNWtaWGhQWmlob1lXNWtiR1Z5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2xrZUNBK1BTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUmZhR0Z1Wkd4bGNuTmJaWFpsYm5SZExuTndiR2xqWlNocFpIZ3NJREVwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUY5bWFYSmxLR1YyWlc1MExDQmtZWFJoS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDJWMlpXNTBYMmhoYm1Sc1pYSnpXMlYyWlc1MFhTa2dlMXh1SUNBZ0lDQWdkbUZ5SUdrZ1BTQjBhR2x6TGw5bGRtVnVkRjlvWVc1a2JHVnljMXRsZG1WdWRGMHViR1Z1WjNSb08xeHVJQ0FnSUNBZ2QyaHBiR1VnS0drdExTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQm9ZVzVrYkdWeUlEMGdkR2hwY3k1ZlpYWmxiblJmYUdGdVpHeGxjbk5iWlhabGJuUmRXMmxkTzF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUdoaGJtUnNaWElvWkdGMFlTazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0dVcE8xeHVJQ0FnSUNBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZVzVrYkdWeUxsOWZYMlYyWlc1MFgzSjFibDl2Ym1ObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlsZG1WdWRGOW9ZVzVrYkdWeWMxdGxkbVZ1ZEYwdWMzQnNhV05sS0drc0lERXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVmWkdWaWRXY3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGd2lkVzVvWVc1a2JHVmtJR1YyWlc1MFhDSXNJR1YyWlc1MExDQmtZWFJoS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmlKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkxRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJWRUU3UVVGWFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVlJCTzBGQlEwRTdRVUZYUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSa0U3UVVGRFFUdEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVbEJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlVVRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVhwRVFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXFxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8uL3NyYy91dGlscy5qc1xcXFxuXFxcIik7XFxuXFxuLyoqKi8gfSlcXG5cXG4vKioqKioqLyB9KTtcIiwgbnVsbCk7XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\n");

/***/ }),

/***/ "./src/pluginCore.js":
/*!***************************!*\
  !*** ./src/pluginCore.js ***!
  \***************************/
/*! exports provided: connectRPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"connectRPC\", function() { return connectRPC; });\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/**\n * Core plugin script loaded into the plugin process/thread.\n *\n * Initializes the plugin-site API global methods.\n */\n\nfunction connectRPC(connection, config) {\n  config = config || {};\n  const codecs = {};\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\"RPC\"](connection, config, codecs);\n  rpc.on(\"getInterface\", function () {\n    launchConnected();\n  });\n  rpc.on(\"remoteReady\", function () {\n    const api = rpc.getRemote() || {};\n\n    if (api.export) {\n      throw new Error(\"`export` is a reserved function name\");\n    }\n\n    if (api.onload) {\n      throw new Error(\"`onload` is a reserved function name\");\n    }\n\n    if (api.dispose) {\n      throw new Error(\"`dispose` is a reserved function name\");\n    }\n\n    api.registerCodec = function (config) {\n      if (!config[\"name\"] || !config[\"encoder\"] && !config[\"decoder\"]) {\n        throw new Error(\"Invalid codec format, please make sure you provide a name, type, encoder and decoder.\");\n      } else {\n        if (config.type) {\n          for (let k of Object.keys(codecs)) {\n            if (codecs[k].type === config.type || k === config.name) {\n              delete codecs[k];\n              console.warn(\"Remove duplicated codec: \" + k);\n            }\n          }\n        }\n\n        codecs[config[\"name\"]] = config;\n      }\n    };\n\n    api.disposeObject = function (obj) {\n      rpc.disposeObject(obj);\n    };\n\n    api.export = function (_interface, config) {\n      rpc.setInterface(_interface, config);\n    };\n\n    api.onLoad = function (handler) {\n      handler = checkHandler(handler);\n\n      if (connected) {\n        handler();\n      } else {\n        connectedHandlers.push(handler);\n      }\n    };\n\n    api.dispose = function (_interface) {\n      rpc.disconnect();\n    };\n\n    if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n      self.api = api;\n      self.postMessage({\n        type: \"imjoy_remote_api_ready\"\n      });\n    } else if (typeof window) {\n      window.dispatchEvent(new CustomEvent(\"imjoy_remote_api_ready\", {\n        detail: api\n      }));\n    }\n  });\n  let connected = false;\n  const connectedHandlers = [];\n\n  const launchConnected = function () {\n    if (!connected) {\n      connected = true;\n      let handler;\n\n      while (handler = connectedHandlers.pop()) {\n        handler();\n      }\n    }\n  };\n\n  const checkHandler = function (handler) {\n    const type = typeof handler;\n\n    if (type !== \"function\") {\n      const msg = \"A function may only be subsribed to the event, \" + type + \" was provided instead\";\n      throw new Error(msg);\n    }\n\n    return handler;\n  };\n\n  return rpc;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbkNvcmUuanM/YTgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcmUgcGx1Z2luIHNjcmlwdCBsb2FkZWQgaW50byB0aGUgcGx1Z2luIHByb2Nlc3MvdGhyZWFkLlxuICpcbiAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4tc2l0ZSBBUEkgZ2xvYmFsIG1ldGhvZHMuXG4gKi9cbmltcG9ydCB7IFJQQyB9IGZyb20gXCIuL3JwYy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFJQQyhjb25uZWN0aW9uLCBjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25zdCBjb2RlY3MgPSB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZywgY29kZWNzKTtcbiAgcnBjLm9uKFwiZ2V0SW50ZXJmYWNlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGxhdW5jaENvbm5lY3RlZCgpO1xuICB9KTtcblxuICBycGMub24oXCJyZW1vdGVSZWFkeVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhcGkgPSBycGMuZ2V0UmVtb3RlKCkgfHwge307XG4gICAgaWYgKGFwaS5leHBvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBleHBvcnRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5vbmxvYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBvbmxvYWRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5kaXNwb3NlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGlzcG9zZWAgaXMgYSByZXNlcnZlZCBmdW5jdGlvbiBuYW1lXCIpO1xuICAgIH1cbiAgICBhcGkucmVnaXN0ZXJDb2RlYyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgaWYgKCFjb25maWdbXCJuYW1lXCJdIHx8ICghY29uZmlnW1wiZW5jb2RlclwiXSAmJiAhY29uZmlnW1wiZGVjb2RlclwiXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiSW52YWxpZCBjb2RlYyBmb3JtYXQsIHBsZWFzZSBtYWtlIHN1cmUgeW91IHByb3ZpZGUgYSBuYW1lLCB0eXBlLCBlbmNvZGVyIGFuZCBkZWNvZGVyLlwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKGNvZGVjcykpIHtcbiAgICAgICAgICAgIGlmIChjb2RlY3Nba10udHlwZSA9PT0gY29uZmlnLnR5cGUgfHwgayA9PT0gY29uZmlnLm5hbWUpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIGNvZGVjc1trXTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUmVtb3ZlIGR1cGxpY2F0ZWQgY29kZWM6IFwiICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvZGVjc1tjb25maWdbXCJuYW1lXCJdXSA9IGNvbmZpZztcbiAgICAgIH1cbiAgICB9O1xuICAgIGFwaS5kaXNwb3NlT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICBycGMuZGlzcG9zZU9iamVjdChvYmopO1xuICAgIH07XG4gICAgYXBpLmV4cG9ydCA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UsIGNvbmZpZykge1xuICAgICAgcnBjLnNldEludGVyZmFjZShfaW50ZXJmYWNlLCBjb25maWcpO1xuICAgIH07XG4gICAgYXBpLm9uTG9hZCA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIgPSBjaGVja0hhbmRsZXIoaGFuZGxlcik7XG4gICAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3RlZEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBhcGkuZGlzcG9zZSA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICAgIHJwYy5kaXNjb25uZWN0KCk7XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlXG4gICAgKSB7XG4gICAgICBzZWxmLmFwaSA9IGFwaTtcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImltam95X3JlbW90ZV9hcGlfcmVhZHlcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93KSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiLCB7IGRldGFpbDogYXBpIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xuICBjb25zdCBjb25uZWN0ZWRIYW5kbGVycyA9IFtdO1xuXG4gIGNvbnN0IGxhdW5jaENvbm5lY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBjb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICBsZXQgaGFuZGxlcjtcbiAgICAgIHdoaWxlICgoaGFuZGxlciA9IGNvbm5lY3RlZEhhbmRsZXJzLnBvcCgpKSkge1xuICAgICAgICBoYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGhhbmRsZXI7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgbXNnID1cbiAgICAgICAgXCJBIGZ1bmN0aW9uIG1heSBvbmx5IGJlIHN1YnNyaWJlZCB0byB0aGUgZXZlbnQsIFwiICtcbiAgICAgICAgdHlwZSArXG4gICAgICAgIFwiIHdhcyBwcm92aWRlZCBpbnN0ZWFkXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH07XG5cbiAgcmV0dXJuIHJwYztcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pluginCore.js\n");

/***/ }),

/***/ "./src/pluginIframe.js":
/*!*****************************!*\
  !*** ./src/pluginIframe.js ***!
  \*****************************/
/*! exports provided: Connection, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Connection\", function() { return Connection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return setupIframe; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \"./src/pluginCore.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n // Create a new, plain <span> element\n\nfunction _htmlToElement(html) {\n  var template = document.createElement(\"template\");\n  html = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = html;\n  return template.content.firstChild;\n}\n\nvar _importScript = function (url) {\n  //url is URL of external file, implementationCode is the code\n  //to be called from the file, location is the location to\n  //insert the <script> element\n  return new Promise((resolve, reject) => {\n    var scriptTag = document.createElement(\"script\");\n    scriptTag.src = url;\n    scriptTag.type = \"text/javascript\";\n    scriptTag.onload = resolve;\n\n    scriptTag.onreadystatechange = function () {\n      if (this.readyState === \"loaded\" || this.readyState === \"complete\") {\n        resolve();\n      }\n    };\n\n    scriptTag.onerror = reject;\n    document.head.appendChild(scriptTag);\n  });\n}; // support importScripts outside web worker\n\n\nasync function importScripts() {\n  var args = Array.prototype.slice.call(arguments),\n      len = args.length,\n      i = 0;\n\n  for (; i < len; i++) {\n    await _importScript(args[i]);\n  }\n}\n\nclass Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"MessageEmitter\"] {\n  constructor(config) {\n    super(config && config.debug);\n    this.config = config || {};\n    this.peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"randId\"])();\n  }\n\n  connect() {\n    this.config.target_origin = this.config.target_origin || \"*\"; // this will call handleEvent function\n\n    window.addEventListener(\"message\", this);\n    this.emit({\n      type: \"initialized\",\n      config: this.config,\n      origin: window.location.origin,\n      peer_id: this.peer_id\n    });\n\n    this._fire(\"connected\");\n  }\n\n  handleEvent(e) {\n    if (e.type === \"message\" && (this.config.target_origin === \"*\" || e.origin === this.config.target_origin)) {\n      if (e.data.peer_id === this.peer_id) {\n        this._fire(e.data.type, e.data);\n      } else if (this.config.debug) {\n        console.log(`connection peer id mismatch ${e.data.peer_id} !== ${this.peer_id}`);\n      }\n    }\n  }\n\n  disconnect() {\n    this._fire(\"beforeDisconnect\");\n\n    window.removeEventListener(\"message\", this);\n\n    this._fire(\"disconnected\");\n  }\n\n  emit(data) {\n    let transferables;\n\n    if (data.__transferables__) {\n      transferables = data.__transferables__;\n      delete data.__transferables__;\n    }\n\n    parent.postMessage(data, this.config.target_origin, transferables);\n  }\n\n  async execute(code) {\n    try {\n      if (code.type === \"requirements\") {\n        if (code.requirements && (Array.isArray(code.requirements) || typeof code.requirements === \"string\")) {\n          try {\n            var link_node;\n            code.requirements = typeof code.requirements === \"string\" ? [code.requirements] : code.requirements;\n\n            if (Array.isArray(code.requirements)) {\n              for (var i = 0; i < code.requirements.length; i++) {\n                if (code.requirements[i].toLowerCase().endsWith(\".css\") || code.requirements[i].startsWith(\"css:\")) {\n                  if (code.requirements[i].startsWith(\"css:\")) {\n                    code.requirements[i] = code.requirements[i].slice(4);\n                  }\n\n                  link_node = document.createElement(\"link\");\n                  link_node.rel = \"stylesheet\";\n                  link_node.href = code.requirements[i];\n                  document.head.appendChild(link_node);\n                } else if (code.requirements[i].toLowerCase().endsWith(\".js\") || code.requirements[i].startsWith(\"js:\")) {\n                  if (code.requirements[i].startsWith(\"js:\")) {\n                    code.requirements[i] = code.requirements[i].slice(3);\n                  }\n\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith(\"http\")) {\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith(\"cache:\")) {//ignore cache\n                } else {\n                  console.log(\"Unprocessed requirements url: \" + code.requirements[i]);\n                }\n              }\n            } else {\n              throw \"unsupported requirements definition\";\n            }\n          } catch (e) {\n            throw \"failed to import required scripts: \" + code.requirements.toString();\n          }\n        }\n      } else if (code.type === \"script\") {\n        if (code.src) {\n          var script_node = document.createElement(\"script\");\n          script_node.setAttribute(\"type\", code.attrs.type);\n          script_node.setAttribute(\"src\", code.src);\n          document.head.appendChild(script_node);\n        } else {\n          if (code.content && (!code.attrs.type || code.attrs.type === \"text/javascript\")) {\n            // document.addEventListener(\"DOMContentLoaded\", function(){\n            eval(code.content); // });\n          } else {\n            var node = document.createElement(\"script\");\n            node.setAttribute(\"type\", code.attrs.type);\n            node.appendChild(document.createTextNode(code.content));\n            document.body.appendChild(node);\n          }\n        }\n      } else if (code.type === \"style\") {\n        const style_node = document.createElement(\"style\");\n\n        if (code.src) {\n          style_node.src = code.src;\n        }\n\n        style_node.innerHTML = code.content;\n        document.head.appendChild(style_node);\n      } else if (code.type === \"link\") {\n        const link_node_ = document.createElement(\"link\");\n\n        if (code.rel) {\n          link_node_.rel = code.rel;\n        }\n\n        if (code.href) {\n          link_node_.href = code.href;\n        }\n\n        if (code.attrs && code.attrs.type) {\n          link_node_.type = code.attrs.type;\n        }\n\n        document.head.appendChild(link_node_);\n      } else if (code.type === \"html\") {\n        document.body.appendChild(_htmlToElement(code.content));\n      } else {\n        throw \"unsupported code type.\";\n      }\n\n      parent.postMessage({\n        type: \"executed\"\n      }, this.config.target_origin);\n    } catch (e) {\n      console.error(\"failed to execute scripts: \", code, e);\n      parent.postMessage({\n        type: \"executed\",\n        error: e.stack || String(e)\n      }, this.config.target_origin);\n    }\n  }\n\n}\nfunction setupIframe(config) {\n  config = config || {};\n  config.dedicated_thread = false;\n  config.lang = \"javascript\";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\"API_VERSION\"];\n  const conn = new Connection(config);\n  Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\"connectRPC\"])(conn, config);\n  conn.connect();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luSWZyYW1lLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvLi9zcmMvcGx1Z2luSWZyYW1lLmpzPzI2NzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb250YWlucyB0aGUgcm91dGluZXMgbG9hZGVkIGJ5IHRoZSBwbHVnaW4gaWZyYW1lIHVuZGVyIHdlYi1icm93c2VyXG4gKiBpbiBjYXNlIHdoZW4gd29ya2VyIGZhaWxlZCB0byBpbml0aWFsaXplXG4gKlxuICogSW5pdGlhbGl6ZXMgdGhlIHdlYiBlbnZpcm9ubWVudCB2ZXJzaW9uIG9mIHRoZSBwbGF0Zm9ybS1kZXBlbmRlbnRcbiAqIGNvbm5lY3Rpb24gb2JqZWN0IGZvciB0aGUgcGx1Z2luIHNpdGVcbiAqL1xuaW1wb3J0IHsgY29ubmVjdFJQQyB9IGZyb20gXCIuL3BsdWdpbkNvcmUuanNcIjtcbmltcG9ydCB7IEFQSV9WRVJTSU9OIH0gZnJvbSBcIi4vcnBjLmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlRW1pdHRlciwgcmFuZElkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8vIENyZWF0ZSBhIG5ldywgcGxhaW4gPHNwYW4+IGVsZW1lbnRcbmZ1bmN0aW9uIF9odG1sVG9FbGVtZW50KGh0bWwpIHtcbiAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICBodG1sID0gaHRtbC50cmltKCk7IC8vIE5ldmVyIHJldHVybiBhIHRleHQgbm9kZSBvZiB3aGl0ZXNwYWNlIGFzIHRoZSByZXN1bHRcbiAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RDaGlsZDtcbn1cblxudmFyIF9pbXBvcnRTY3JpcHQgPSBmdW5jdGlvbih1cmwpIHtcbiAgLy91cmwgaXMgVVJMIG9mIGV4dGVybmFsIGZpbGUsIGltcGxlbWVudGF0aW9uQ29kZSBpcyB0aGUgY29kZVxuICAvL3RvIGJlIGNhbGxlZCBmcm9tIHRoZSBmaWxlLCBsb2NhdGlvbiBpcyB0aGUgbG9jYXRpb24gdG9cbiAgLy9pbnNlcnQgdGhlIDxzY3JpcHQ+IGVsZW1lbnRcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgc2NyaXB0VGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBzY3JpcHRUYWcuc3JjID0gdXJsO1xuICAgIHNjcmlwdFRhZy50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICBzY3JpcHRUYWcub25sb2FkID0gcmVzb2x2ZTtcbiAgICBzY3JpcHRUYWcub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBcImxvYWRlZFwiIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHNjcmlwdFRhZy5vbmVycm9yID0gcmVqZWN0O1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0VGFnKTtcbiAgfSk7XG59O1xuXG4vLyBzdXBwb3J0IGltcG9ydFNjcmlwdHMgb3V0c2lkZSB3ZWIgd29ya2VyXG5hc3luYyBmdW5jdGlvbiBpbXBvcnRTY3JpcHRzKCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgbGVuID0gYXJncy5sZW5ndGgsXG4gICAgaSA9IDA7XG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhd2FpdCBfaW1wb3J0U2NyaXB0KGFyZ3NbaV0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uIGV4dGVuZHMgTWVzc2FnZUVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcihjb25maWcgJiYgY29uZmlnLmRlYnVnKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICB0aGlzLnBlZXJfaWQgPSByYW5kSWQoKTtcbiAgfVxuICBjb25uZWN0KCkge1xuICAgIHRoaXMuY29uZmlnLnRhcmdldF9vcmlnaW4gPSB0aGlzLmNvbmZpZy50YXJnZXRfb3JpZ2luIHx8IFwiKlwiO1xuICAgIC8vIHRoaXMgd2lsbCBjYWxsIGhhbmRsZUV2ZW50IGZ1bmN0aW9uXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMpO1xuICAgIHRoaXMuZW1pdCh7XG4gICAgICB0eXBlOiBcImluaXRpYWxpemVkXCIsXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgcGVlcl9pZDogdGhpcy5wZWVyX2lkXG4gICAgfSk7XG4gICAgdGhpcy5fZmlyZShcImNvbm5lY3RlZFwiKTtcbiAgfVxuICBoYW5kbGVFdmVudChlKSB7XG4gICAgaWYgKFxuICAgICAgZS50eXBlID09PSBcIm1lc3NhZ2VcIiAmJlxuICAgICAgKHRoaXMuY29uZmlnLnRhcmdldF9vcmlnaW4gPT09IFwiKlwiIHx8XG4gICAgICAgIGUub3JpZ2luID09PSB0aGlzLmNvbmZpZy50YXJnZXRfb3JpZ2luKVxuICAgICkge1xuICAgICAgaWYgKGUuZGF0YS5wZWVyX2lkID09PSB0aGlzLnBlZXJfaWQpIHtcbiAgICAgICAgdGhpcy5fZmlyZShlLmRhdGEudHlwZSwgZS5kYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYGNvbm5lY3Rpb24gcGVlciBpZCBtaXNtYXRjaCAke2UuZGF0YS5wZWVyX2lkfSAhPT0gJHt0aGlzLnBlZXJfaWR9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkaXNjb25uZWN0KCkge1xuICAgIHRoaXMuX2ZpcmUoXCJiZWZvcmVEaXNjb25uZWN0XCIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzKTtcbiAgICB0aGlzLl9maXJlKFwiZGlzY29ubmVjdGVkXCIpO1xuICB9XG4gIGVtaXQoZGF0YSkge1xuICAgIGxldCB0cmFuc2ZlcmFibGVzO1xuICAgIGlmIChkYXRhLl9fdHJhbnNmZXJhYmxlc19fKSB7XG4gICAgICB0cmFuc2ZlcmFibGVzID0gZGF0YS5fX3RyYW5zZmVyYWJsZXNfXztcbiAgICAgIGRlbGV0ZSBkYXRhLl9fdHJhbnNmZXJhYmxlc19fO1xuICAgIH1cbiAgICBwYXJlbnQucG9zdE1lc3NhZ2UoZGF0YSwgdGhpcy5jb25maWcudGFyZ2V0X29yaWdpbiwgdHJhbnNmZXJhYmxlcyk7XG4gIH1cbiAgYXN5bmMgZXhlY3V0ZShjb2RlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChjb2RlLnR5cGUgPT09IFwicmVxdWlyZW1lbnRzXCIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvZGUucmVxdWlyZW1lbnRzICYmXG4gICAgICAgICAgKEFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpIHx8XG4gICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbGlua19ub2RlO1xuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgPVxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICA/IFtjb2RlLnJlcXVpcmVtZW50c11cbiAgICAgICAgICAgICAgICA6IGNvZGUucmVxdWlyZW1lbnRzO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZS5yZXF1aXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLmNzc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNzczpcIilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjb2RlLnJlcXVpcmVtZW50c1tpXS5zdGFydHNXaXRoKFwiY3NzOlwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXSA9IGNvZGUucmVxdWlyZW1lbnRzW2ldLnNsaWNlKDQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgbGlua19ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgICAgICAgICAgICBsaW5rX25vZGUucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4gICAgICAgICAgICAgICAgICBsaW5rX25vZGUuaHJlZiA9IGNvZGUucmVxdWlyZW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rX25vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLmpzXCIpIHx8XG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS5zdGFydHNXaXRoKFwianM6XCIpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImpzOlwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXSA9IGNvZGUucmVxdWlyZW1lbnRzW2ldLnNsaWNlKDMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYXdhaXQgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlLnJlcXVpcmVtZW50c1tpXS5zdGFydHNXaXRoKFwiaHR0cFwiKSkge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlLnJlcXVpcmVtZW50c1tpXS5zdGFydHNXaXRoKFwiY2FjaGU6XCIpKSB7XG4gICAgICAgICAgICAgICAgICAvL2lnbm9yZSBjYWNoZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgXCJVbnByb2Nlc3NlZCByZXF1aXJlbWVudHMgdXJsOiBcIiArIGNvZGUucmVxdWlyZW1lbnRzW2ldXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJ1bnN1cHBvcnRlZCByZXF1aXJlbWVudHMgZGVmaW5pdGlvblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IFwiZmFpbGVkIHRvIGltcG9ydCByZXF1aXJlZCBzY3JpcHRzOiBcIiArXG4gICAgICAgICAgICAgIGNvZGUucmVxdWlyZW1lbnRzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvZGUudHlwZSA9PT0gXCJzY3JpcHRcIikge1xuICAgICAgICBpZiAoY29kZS5zcmMpIHtcbiAgICAgICAgICB2YXIgc2NyaXB0X25vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgIHNjcmlwdF9ub2RlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgY29kZS5hdHRycy50eXBlKTtcbiAgICAgICAgICBzY3JpcHRfbm9kZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgY29kZS5zcmMpO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0X25vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvZGUuY29udGVudCAmJlxuICAgICAgICAgICAgKCFjb2RlLmF0dHJzLnR5cGUgfHwgY29kZS5hdHRycy50eXBlID09PSBcInRleHQvamF2YXNjcmlwdFwiKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGV2YWwoY29kZS5jb250ZW50KTtcbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgY29kZS5hdHRycy50eXBlKTtcbiAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29kZS5jb250ZW50KSk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb2RlLnR5cGUgPT09IFwic3R5bGVcIikge1xuICAgICAgICBjb25zdCBzdHlsZV9ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBpZiAoY29kZS5zcmMpIHtcbiAgICAgICAgICBzdHlsZV9ub2RlLnNyYyA9IGNvZGUuc3JjO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlX25vZGUuaW5uZXJIVE1MID0gY29kZS5jb250ZW50O1xuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlX25vZGUpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlLnR5cGUgPT09IFwibGlua1wiKSB7XG4gICAgICAgIGNvbnN0IGxpbmtfbm9kZV8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgaWYgKGNvZGUucmVsKSB7XG4gICAgICAgICAgbGlua19ub2RlXy5yZWwgPSBjb2RlLnJlbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZS5ocmVmKSB7XG4gICAgICAgICAgbGlua19ub2RlXy5ocmVmID0gY29kZS5ocmVmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlLmF0dHJzICYmIGNvZGUuYXR0cnMudHlwZSkge1xuICAgICAgICAgIGxpbmtfbm9kZV8udHlwZSA9IGNvZGUuYXR0cnMudHlwZTtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtfbm9kZV8pO1xuICAgICAgfSBlbHNlIGlmIChjb2RlLnR5cGUgPT09IFwiaHRtbFwiKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoX2h0bWxUb0VsZW1lbnQoY29kZS5jb250ZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBcInVuc3VwcG9ydGVkIGNvZGUgdHlwZS5cIjtcbiAgICAgIH1cbiAgICAgIHBhcmVudC5wb3N0TWVzc2FnZSh7IHR5cGU6IFwiZXhlY3V0ZWRcIiB9LCB0aGlzLmNvbmZpZy50YXJnZXRfb3JpZ2luKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiZmFpbGVkIHRvIGV4ZWN1dGUgc2NyaXB0czogXCIsIGNvZGUsIGUpO1xuICAgICAgcGFyZW50LnBvc3RNZXNzYWdlKFxuICAgICAgICB7IHR5cGU6IFwiZXhlY3V0ZWRcIiwgZXJyb3I6IGUuc3RhY2sgfHwgU3RyaW5nKGUpIH0sXG4gICAgICAgIHRoaXMuY29uZmlnLnRhcmdldF9vcmlnaW5cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHVwSWZyYW1lKGNvbmZpZykge1xuICBjb25maWcgPSBjb25maWcgfHwge307XG4gIGNvbmZpZy5kZWRpY2F0ZWRfdGhyZWFkID0gZmFsc2U7XG4gIGNvbmZpZy5sYW5nID0gXCJqYXZhc2NyaXB0XCI7XG4gIGNvbmZpZy5hcGlfdmVyc2lvbiA9IEFQSV9WRVJTSU9OO1xuICBjb25zdCBjb25uID0gbmV3IENvbm5lY3Rpb24oY29uZmlnKTtcbiAgY29ubmVjdFJQQyhjb25uLCBjb25maWcpO1xuICBjb25uLmNvbm5lY3QoKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQXpKQTtBQTJKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pluginIframe.js\n");

/***/ }),

/***/ "./src/pluginWebPython.js":
/*!********************************!*\
  !*** ./src/pluginWebPython.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return setupWebPython; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \"./src/pluginCore.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony import */ var _pluginIframe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginIframe */ \"./src/pluginIframe.js\");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n // Create a new, plain <span> element\n\nfunction _htmlToElement(html) {\n  var template = document.createElement(\"template\");\n  html = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = html;\n  return template.content.firstChild;\n}\n\nconst _importScript = function (url) {\n  //url is URL of external file, implementationCode is the code\n  //to be called from the file, location is the location to\n  //insert the <script> element\n  return new Promise((resolve, reject) => {\n    var scriptTag = document.createElement(\"script\");\n    scriptTag.src = url;\n    scriptTag.onload = resolve;\n\n    scriptTag.onreadystatechange = function () {\n      if (this.readyState === \"loaded\" || this.readyState === \"complete\") {\n        resolve();\n      }\n    };\n\n    scriptTag.onerror = reject;\n    document.head.appendChild(scriptTag);\n  });\n}; // support importScripts outside web worker\n\n\nasync function importScripts() {\n  var args = Array.prototype.slice.call(arguments),\n      len = args.length,\n      i = 0;\n\n  for (; i < len; i++) {\n    await _importScript(args[i]);\n  }\n}\n\nconst startup_script = `\nfrom js import api\nimport sys\nfrom types import ModuleType\nm = ModuleType(\"imjoy\")\nsys.modules[m.__name__] = m\nm.__file__ = m.__name__ + \".py\"\nm.api = api\n`;\nlet _export_plugin_api = null;\n\nconst execute_python_code = function (code) {\n  try {\n    if (!_export_plugin_api) {\n      _export_plugin_api = window.api.export;\n\n      window.api.export = function (p) {\n        if (typeof p === \"object\") {\n          const _api = {};\n\n          for (let k in p) {\n            if (!k.startsWith(\"_\")) {\n              _api[k] = p[k];\n            }\n          }\n\n          _export_plugin_api(_api);\n        } else if (typeof p === \"function\") {\n          const _api = {};\n          const getattr = window.pyodide.pyimport(\"getattr\");\n          const hasattr = window.pyodide.pyimport(\"hasattr\");\n\n          for (let k of Object.getOwnPropertyNames(p)) {\n            if (!k.startsWith(\"_\") && hasattr(p, k)) {\n              const func = getattr(p, k);\n\n              _api[k] = function () {\n                return func(...Array.prototype.slice.call(arguments));\n              };\n            }\n          }\n\n          _export_plugin_api(_api);\n        } else {\n          throw \"unsupported api export\";\n        }\n      };\n    }\n\n    window.pyodide.runPython(startup_script);\n    window.pyodide.runPython(code.content);\n  } catch (e) {\n    throw e;\n  }\n};\n\nfunction setupPyodide() {\n  return new Promise((resolve, reject) => {\n    window.languagePluginUrl = \"https://static.imjoy.io/pyodide/\";\n    importScripts(\"https://static.imjoy.io/pyodide/pyodide.js\").then(() => {\n      // hack for matplotlib etc.\n      window.iodide = {\n        output: {\n          element: function element(type) {\n            const div = document.createElement(type);\n            const output = document.getElementById(\"output\") || document.body;\n            output.appendChild(div);\n            return div;\n          }\n        }\n      };\n      window.languagePluginLoader.then(() => {\n        // pyodide is now ready to use...\n        console.log(window.pyodide.runPython(\"import sys\\nsys.version\"));\n        resolve();\n      }).catch(reject);\n    });\n  });\n} // connection object for the RPC constructor\n\n\nclass Connection extends _pluginIframe__WEBPACK_IMPORTED_MODULE_2__[\"Connection\"] {\n  constructor(config) {\n    super(config);\n  }\n\n  async execute(code) {\n    if (code.type === \"requirements\") {\n      if (code.requirements) {\n        code.requirements = typeof code.requirements === \"string\" ? [code.requirements] : code.requirements;\n\n        if (Array.isArray(code.requirements)) {\n          const python_packages = [];\n\n          for (var i = 0; i < code.requirements.length; i++) {\n            if (code.requirements[i].toLowerCase().endsWith(\".css\") || code.requirements[i].startsWith(\"css:\")) {\n              if (code.requirements[i].startsWith(\"css:\")) {\n                code.requirements[i] = code.requirements[i].slice(4);\n              }\n\n              link_node = document.createElement(\"link\");\n              link_node.rel = \"stylesheet\";\n              link_node.href = code.requirements[i];\n              document.head.appendChild(link_node);\n            } else if ( // code.requirements[i].toLowerCase().endsWith(\".js\") ||\n            code.requirements[i].startsWith(\"js:\")) {\n              if (code.requirements[i].startsWith(\"js:\")) {\n                code.requirements[i] = code.requirements[i].slice(3);\n              }\n\n              await importScripts(code.requirements[i]);\n            } else if (code.requirements[i].startsWith(\"cache:\")) {//ignore cache\n            } else if (code.requirements[i].toLowerCase().endsWith(\".js\") || code.requirements[i].startsWith(\"package:\")) {\n              if (code.requirements[i].startsWith(\"package:\")) {\n                code.requirements[i] = code.requirements[i].slice(8);\n              }\n\n              python_packages.push(code.requirements[i]);\n            } else if (code.requirements[i].startsWith(\"http:\") || code.requirements[i].startsWith(\"https:\")) {\n              console.log(\"Unprocessed requirements url: \" + code.requirements[i]);\n            } else {\n              python_packages.push(code.requirements[i]);\n            }\n          }\n\n          await window.pyodide.loadPackage(python_packages);\n        } else {\n          throw \"unsupported requirements definition\";\n        }\n      }\n    } else if (code.type === \"script\") {\n      if (code.src) {\n        var script_node = document.createElement(\"script\");\n        script_node.setAttribute(\"type\", code.attrs.type);\n        script_node.setAttribute(\"src\", code.src);\n        document.head.appendChild(script_node);\n      } else {\n        if (code.content && code.lang === \"python\") {\n          execute_python_code(code);\n        } else if (code.content && code.lang === \"javascript\") {\n          try {\n            eval(code.content);\n          } catch (e) {\n            console.error(e.message, e.stack);\n            throw e;\n          }\n        } else {\n          const node = document.createElement(\"script\");\n          node.setAttribute(\"type\", code.attrs.type);\n          node.appendChild(document.createTextNode(code.content));\n          document.body.appendChild(node);\n        }\n      }\n    } else if (code.type === \"style\") {\n      const style_node = document.createElement(\"style\");\n\n      if (code.src) {\n        style_node.src = code.src;\n      }\n\n      style_node.innerHTML = code.content;\n      document.head.appendChild(style_node);\n    } else if (code.type === \"link\") {\n      const link_node = document.createElement(\"link\");\n\n      if (code.rel) {\n        link_node.rel = code.rel;\n      }\n\n      if (code.href) {\n        link_node.href = code.href;\n      }\n\n      if (code.attrs && code.attrs.type) {\n        link_node.type = code.attrs.type;\n      }\n\n      document.head.appendChild(link_node);\n    } else if (code.type === \"html\") {\n      document.body.appendChild(_htmlToElement(code.content));\n    } else {\n      throw \"unsupported code type.\";\n    }\n  }\n\n}\n\nfunction setupWebPython(config) {\n  config = config || {};\n  config.debug = true;\n  config.dedicated_thread = false;\n  config.lang = \"python\";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\"API_VERSION\"];\n  const conn = new Connection(config);\n  setupPyodide().then(() => {\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\"connectRPC\"])(conn, config);\n    conn.connect();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pluginWebPython.js\n");

/***/ }),

/***/ "./src/rpc.js":
/*!********************!*\
  !*** ./src/rpc.js ***!
  \********************/
/*! exports provided: API_VERSION, RPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"API_VERSION\", function() { return API_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return RPC; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/**\n * Contains the RPC object used both by the application\n * site, and by each plugin\n */\n\nconst API_VERSION = \"0.2.3\";\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\n\nfunction _appendBuffer(buffer1, buffer2) {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find(key => object[key] === value);\n}\n\nfunction indexObject(obj, is) {\n  if (typeof is == \"string\") return indexObject(obj, is.split(\".\"));else if (is.length == 0) return obj;else return indexObject(obj[is[0]], is.slice(1));\n}\n/**\n * RPC object represents a single site in the\n * communication protocol between the application and the plugin\n *\n * @param {Object} connection a special object allowing to send\n * and receive messages from the opposite site (basically it\n * should only provide send() and onMessage() methods)\n */\n\n\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"MessageEmitter\"] {\n  constructor(connection, config, codecs) {\n    super(config && config.debug);\n    this._connection = connection;\n    this.config = config || {};\n    this._codecs = codecs || {};\n    this._object_store = {};\n    this._method_weakmap = new WeakMap();\n    this._object_weakmap = new WeakMap();\n    this._local_api = null; // make sure there is an execute function\n\n    const name = this.config.name;\n\n    this._connection.execute = this._connection.execute || function () {\n      throw new Error(`connection.execute not implemented (in \"${name}\")`);\n    };\n\n    this._store = new ReferenceStore();\n    this._method_refs = new ReferenceStore();\n\n    this._method_refs.onReady(() => {\n      this._fire(\"remoteIdle\");\n    });\n\n    this._method_refs.onBusy(() => {\n      this._fire(\"remoteBusy\");\n    });\n\n    this._setupMessageHanlders();\n  }\n\n  init() {\n    this._connection.emit({\n      type: \"initialized\",\n      config: this.config,\n      peer_id: this._connection.peer_id\n    });\n  }\n  /**\n   * Set a handler to be called when received a responce from the\n   * remote site reporting that the previously provided interface\n   * has been successfully set as remote for that site\n   *\n   * @param {Function} handler\n   */\n\n\n  getRemoteCallStack() {\n    return this._method_refs.getStack();\n  }\n  /**\n   * @returns {Object} set of remote interface methods\n   */\n\n\n  getRemote() {\n    return this._remote_interface;\n  }\n  /**\n   * Sets the interface of this site making it available to the\n   * remote site by sending a message with a set of methods names\n   *\n   * @param {Object} _interface to set\n   */\n\n\n  setInterface(_interface, config) {\n    config = config || {};\n    this.config.name = config.name || this.config.name;\n    this.config.description = config.description || this.config.description;\n\n    if (this.config.forwarding_functions) {\n      for (let func_name of this.config.forwarding_functions) {\n        const _remote = this._remote_interface;\n\n        if (_remote[func_name]) {\n          if (_interface.constructor === Object) {\n            if (!_interface[func_name]) {\n              _interface[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          } else if (_interface.constructor.constructor === Function) {\n            if (!_interface.constructor.prototype[func_name]) {\n              _interface.constructor.prototype[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          }\n        }\n      }\n    }\n\n    this._local_api = _interface;\n\n    this._fire(\"interfaceAvailable\");\n  }\n  /**\n   * Sends the actual interface to the remote site upon it was\n   * updated or by a special request of the remote site\n   */\n\n\n  sendInterface() {\n    if (!this._local_api) {\n      throw new Error(\"interface is not set.\");\n    }\n\n    this._encode(this._local_api, true).then(api => {\n      this._connection.emit({\n        type: \"setInterface\",\n        api: api\n      });\n    });\n  }\n\n  _disposeObject(objectId) {\n    if (this._object_store[objectId]) {\n      delete this._object_store[objectId];\n    } else {\n      throw new Error(`Object (id=${objectId}) not found.`);\n    }\n  }\n\n  disposeObject(obj) {\n    return new Promise((resolve, reject) => {\n      if (this._object_weakmap.has(obj)) {\n        const objectId = this._object_weakmap.get(obj);\n\n        this._connection.once(\"disposed\", data => {\n          if (data.error) reject(new Error(data.error));else resolve();\n        });\n\n        this._connection.emit({\n          type: \"disposeObject\",\n          object_id: objectId\n        });\n      } else {\n        throw new Error(\"Invalid object\");\n      }\n    });\n  }\n  /**\n   * Handles a message from the remote site\n   */\n  // var callback_reg = new RegExp(\"onupdate|run$\")\n\n\n  _setupMessageHanlders() {\n    this._connection.on(\"init\", this.init);\n\n    this._connection.on(\"execute\", data => {\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\n        this._connection.emit({\n          type: \"executed\"\n        });\n      }).catch(e => {\n        console.error(e);\n\n        this._connection.emit({\n          type: \"executed\",\n          error: String(e)\n        });\n      });\n    });\n\n    this._connection.on(\"method\", async data => {\n      let resolve, reject, method, args, result;\n\n      try {\n        if (data.promise) {\n          [resolve, reject] = await this._unwrap(data.promise, false);\n        }\n\n        const _interface = this._object_store[data.object_id];\n        method = indexObject(_interface, data.name);\n        args = await this._unwrap(data.args, true);\n\n        if (data.promise) {\n          result = method.apply(_interface, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === \"AsyncFunction\") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          method.apply(_interface, args);\n        }\n      } catch (err) {\n        console.error(this.config.name, err);\n\n        if (reject) {\n          reject(err);\n        }\n      }\n    });\n\n    this._connection.on(\"callback\", async data => {\n      let resolve, reject, method, args, result;\n\n      try {\n        if (data.promise) {\n          [resolve, reject] = await this._unwrap(data.promise, false);\n        }\n\n        if (data.promise) {\n          method = this._store.fetch(data.id);\n          args = await this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error(\"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\");\n          }\n\n          result = method.apply(null, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === \"AsyncFunction\") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          method = this._store.fetch(data.id);\n          args = await this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error(\"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\");\n          }\n\n          method.apply(null, args);\n        }\n      } catch (err) {\n        console.error(this.config.name, err);\n\n        if (reject) {\n          reject(err);\n        }\n      }\n    });\n\n    this._connection.on(\"disposeObject\", data => {\n      try {\n        this._disposeObject(data.object_id);\n\n        this._connection.emit({\n          type: \"disposed\"\n        });\n      } catch (e) {\n        console.error(e);\n\n        this._connection.emit({\n          type: \"disposed\",\n          error: String(e)\n        });\n      }\n    });\n\n    this._connection.on(\"setInterface\", data => {\n      this._setRemoteInterface(data.api);\n    });\n\n    this._connection.on(\"getInterface\", () => {\n      this._fire(\"getInterface\");\n\n      if (this._local_api) {\n        this.sendInterface();\n      } else {\n        this.once(\"interfaceAvailable\", () => {\n          this.sendInterface();\n        });\n      }\n    });\n\n    this._connection.on(\"interfaceSetAsRemote\", () => {\n      this._fire(\"interfaceSetAsRemote\");\n    });\n\n    this._connection.on(\"disconnect\", () => {\n      this._fire(\"beforeDisconnect\");\n\n      this._connection.disconnect();\n\n      this._fire(\"disconnected\");\n    });\n  }\n  /**\n   * Sends a requests to the remote site asking it to provide its\n   * current interface\n   */\n\n\n  requestRemote() {\n    this._connection.emit({\n      type: \"getInterface\"\n    });\n  }\n\n  _ndarray(typedArray, shape, dtype) {\n    var _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][typedArray.constructor.name];\n\n    if (dtype && dtype !== _dtype) {\n      throw \"dtype doesn't match the type of the array: \" + _dtype + \" != \" + dtype;\n    }\n\n    shape = shape || [typedArray.length];\n    return {\n      _rtype: \"ndarray\",\n      _rvalue: typedArray.buffer,\n      _rshape: shape,\n      _rdtype: _dtype\n    };\n  }\n  /**\n   * Sets the new remote interface provided by the other site\n   *\n   * @param {Array} names list of function names\n   */\n\n\n  _setRemoteInterface(api) {\n    this._decode(api).then(intf => {\n      this._remote_interface = intf;\n\n      this._fire(\"remoteReady\");\n\n      this._reportRemoteSet();\n    });\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * method. When the generated function is called, it will send the\n   * corresponding message to the remote site asking it to execute\n   * the particular method of its interface\n   *\n   * @param {String} name of the remote method\n   *\n   * @returns {Function} wrapped remote method\n   */\n\n\n  _genRemoteMethod(targetId, name, objectId) {\n    var me = this;\n\n    var remoteMethod = function () {\n      return new Promise(async (resolve, reject) => {\n        let id = null;\n\n        try {\n          id = me._method_refs.put(objectId ? objectId + \"/\" + name : name);\n\n          var wrapped_resolve = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return resolve.apply(this, arguments);\n          };\n\n          var wrapped_reject = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return reject.apply(this, arguments);\n          };\n\n          wrapped_resolve.__rpc_pair = wrapped_reject;\n          wrapped_reject.__rpc_pair = wrapped_resolve;\n          var args = Array.prototype.slice.call(arguments);\n\n          if (name === \"register\" || name === \"export\" || name === \"on\") {\n            args = await me._wrap(args, true);\n          } else {\n            args = await me._wrap(args);\n          }\n\n          var transferables = args.__transferables__;\n          if (transferables) delete args.__transferables__;\n\n          me._connection.emit({\n            type: \"method\",\n            target_id: targetId,\n            name: name,\n            object_id: objectId,\n            args: args,\n            promise: await me._wrap([wrapped_resolve, wrapped_reject])\n          }, transferables);\n        } catch (e) {\n          if (id) me._method_refs.fetch(id);\n          reject(`Failed to exectue remote method (interface: ${objectId || me.id}, method: ${name}), error: ${e}`);\n        }\n      });\n    };\n\n    remoteMethod.__remote_method = true;\n    return remoteMethod;\n  }\n  /**\n   * Sends a responce reporting that interface just provided by the\n   * remote site was successfully set by this site as remote\n   */\n\n\n  _reportRemoteSet() {\n    this._connection.emit({\n      type: \"interfaceSetAsRemote\"\n    });\n  }\n  /**\n   * Prepares the provided set of remote method arguments for\n   * sending to the remote site, replaces all the callbacks with\n   * identifiers\n   *\n   * @param {Array} args to wrap\n   *\n   * @returns {Array} wrapped arguments\n   */\n\n\n  async _encode(aObject, asInterface, objectId) {\n    const aType = typeof aObject;\n\n    if (aType === \"number\" || aType === \"string\" || aType === \"boolean\" || aObject === null || aObject === undefined || aObject instanceof ArrayBuffer) {\n      return aObject;\n    }\n\n    let bObject;\n\n    if (typeof aObject === \"function\") {\n      if (asInterface) {\n        if (!objectId) throw new Error(\"objectId is not specified.\");\n        bObject = {\n          _rtype: \"interface\",\n          _rtarget_id: this._connection.peer_id,\n          _rintf: objectId,\n          _rvalue: asInterface\n        };\n\n        this._method_weakmap.set(aObject, bObject);\n      } else if (this._method_weakmap.has(aObject)) {\n        bObject = this._method_weakmap.get(aObject);\n      } else {\n        const cid = this._store.put(aObject);\n\n        bObject = {\n          _rtype: \"callback\",\n          _rtarget_id: this._connection.peer_id,\n          _rname: aObject.constructor && aObject.constructor.name || cid,\n          _rvalue: cid\n        };\n      }\n\n      return bObject;\n    } // skip if already encoded\n\n\n    if (aObject.constructor instanceof Object && aObject._rtype) {\n      // make sure the interface functions are encoded\n      if (aObject._rintf) {\n        const temp = aObject._rtype;\n        delete aObject._rtype;\n        bObject = await this._encode(aObject, asInterface, objectId);\n        bObject._rtype = temp;\n      } else {\n        bObject = aObject;\n      }\n\n      return bObject;\n    }\n\n    const transferables = [];\n    const _transfer = aObject._transfer;\n    const isarray = Array.isArray(aObject);\n\n    for (let tp of Object.keys(this._codecs)) {\n      const codec = this._codecs[tp];\n\n      if (codec.encoder && aObject instanceof codec.type) {\n        // TODO: what if multiple encoders found\n        const encodedObj = await Promise.resolve(codec.encoder(aObject));\n        if (encodedObj && !encodedObj._rtype) encodedObj._rtype = codec.name; // encode the functions in the interface object\n\n        if (encodedObj && encodedObj._rintf) {\n          const temp = encodedObj._rtype;\n          delete encodedObj._rtype;\n          encodedObj = await this._encode(encodedObj, asInterface, objectId);\n          encodedObj._rtype = temp;\n        }\n\n        bObject = encodedObj;\n        return bObject;\n      }\n    }\n\n    if (\n    /*global tf*/\n    typeof tf !== \"undefined\" && tf.Tensor && aObject instanceof tf.Tensor) {\n      const v_buffer = aObject.dataSync();\n\n      if (aObject._transfer || _transfer) {\n        transferables.push(v_buffer.buffer);\n        delete aObject._transfer;\n      }\n\n      bObject = {\n        _rtype: \"ndarray\",\n        _rvalue: v_buffer.buffer,\n        _rshape: aObject.shape,\n        _rdtype: aObject.dtype\n      };\n    } else if (\n    /*global nj*/\n    typeof nj !== \"undefined\" && nj.NdArray && aObject instanceof nj.NdArray) {\n      var dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][aObject.selection.data.constructor.name];\n\n      if (aObject._transfer || _transfer) {\n        transferables.push(aObject.selection.data.buffer);\n        delete aObject._transfer;\n      }\n\n      bObject = {\n        _rtype: \"ndarray\",\n        _rvalue: aObject.selection.data.buffer,\n        _rshape: aObject.shape,\n        _rdtype: dtype\n      };\n    } else if (aObject instanceof Error) {\n      console.error(aObject);\n      bObject = {\n        _rtype: \"error\",\n        _rvalue: aObject.toString()\n      };\n    } else if (typeof File !== \"undefined\" && aObject instanceof File) {\n      bObject = {\n        _rtype: \"file\",\n        _rvalue: aObject,\n        _rpath: aObject._path || aObject.webkitRelativePath\n      };\n    } // send objects supported by structure clone algorithm\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    else if (aObject !== Object(aObject) || aObject instanceof Boolean || aObject instanceof String || aObject instanceof Date || aObject instanceof RegExp || aObject instanceof ImageData || typeof FileList !== \"undefined\" && aObject instanceof FileList) {\n        bObject = aObject; // TODO: avoid object such as DynamicPlugin instance.\n      } else if (typeof File !== \"undefined\" && aObject instanceof File) {\n        bObject = {\n          _rtype: \"file\",\n          _rname: aObject.name,\n          _rmime: aObject.type,\n          _rvalue: aObject,\n          _rpath: aObject._path || aObject.webkitRelativePath\n        };\n      } else if (aObject instanceof Blob) {\n        bObject = {\n          _rtype: \"blob\",\n          _rvalue: aObject\n        };\n      } else if (aObject instanceof ArrayBufferView) {\n        if (aObject._transfer || _transfer) {\n          transferables.push(aObject.buffer);\n          delete aObject._transfer;\n        }\n\n        const dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][aObject.constructor.name];\n        bObject = {\n          _rtype: \"typedarray\",\n          _rvalue: aObject.buffer,\n          _rdtype: dtype\n        };\n      } else if (aObject instanceof DataView) {\n        if (aObject._transfer || _transfer) {\n          transferables.push(aObject.buffer);\n          delete aObject._transfer;\n        }\n\n        bObject = {\n          _rtype: \"memoryview\",\n          _rvalue: aObject.buffer\n        };\n      } else if (aObject instanceof Set) {\n        bObject = {\n          _rtype: \"set\",\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\n        };\n      } else if (aObject instanceof Map) {\n        bObject = {\n          _rtype: \"orderedmap\",\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\n        };\n      } else if (aObject.constructor instanceof Object || Array.isArray(aObject)) {\n        bObject = isarray ? [] : {};\n        let keys; // an object/array\n\n        if (aObject.constructor === Object || Array.isArray(aObject)) {\n          keys = Object.keys(aObject);\n        } // a class\n        else if (aObject.constructor === Function) {\n            throw new Error(\"Please instantiate the class before exportting it.\");\n          } // instance of a class\n          else if (aObject.constructor.constructor === Function) {\n              keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject)); // TODO: use a proxy object to represent the actual object\n              // always encode class instance as interface\n\n              asInterface = true;\n            } else {\n              throw Error(\"Unsupported interface type\");\n            } // encode interfaces\n\n\n        if (aObject._rintf || asInterface) {\n          if (!objectId) {\n            objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"randId\"])();\n            this._object_store[objectId] = aObject;\n          }\n\n          for (let k of keys) {\n            if (k === \"constructor\") continue;\n\n            if (k.startsWith(\"_\")) {\n              continue;\n            }\n\n            bObject[k] = await this._encode(aObject[k], typeof asInterface === \"string\" ? asInterface + \".\" + k : k, objectId);\n          } // object id for dispose the object remotely\n\n\n          bObject._rintf = objectId; // remove interface when closed\n\n          if (aObject.on && typeof aObject.on === \"function\") {\n            aObject.on(\"close\", () => {\n              delete this._object_store[objectId];\n            });\n          }\n        } else {\n          for (let k of keys) {\n            if ([\"hasOwnProperty\", \"constructor\"].includes(k)) continue;\n            bObject[k] = await this._encode(aObject[k]);\n          }\n        } // for example, browserFS object\n\n      } else if (typeof aObject === \"object\") {\n        const keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\n        const objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"randId\"])();\n\n        for (let k of keys) {\n          if ([\"hasOwnProperty\", \"constructor\"].includes(k)) continue; // encode as interface\n\n          bObject[k] = await this._encode(aObject[k], k, bObject);\n        } // object id, used for dispose the object\n\n\n        bObject._rintf = objectId;\n      } else {\n        throw \"imjoy-rpc: Unsupported data type:\" + aObject;\n      }\n\n    if (transferables.length > 0) {\n      bObject.__transferables__ = transferables;\n    }\n\n    if (!bObject) {\n      throw new Error(\"Failed to encode object\");\n    }\n\n    return bObject;\n  }\n\n  async _decode(aObject, withPromise) {\n    if (!aObject) {\n      return aObject;\n    }\n\n    var bObject, v, k;\n\n    if (aObject[\"_rtype\"]) {\n      if (this._codecs[aObject._rtype] && this._codecs[aObject._rtype].decoder) {\n        if (aObject._rintf) {\n          const temp = aObject._rtype;\n          delete aObject._rtype;\n          aObject = await this._decode(aObject, withPromise);\n          aObject._rtype = temp;\n        }\n\n        bObject = await Promise.resolve(this._codecs[aObject._rtype].decoder(aObject));\n      } else if (aObject._rtype === \"callback\") {\n        bObject = this._genRemoteCallback(aObject._rtarget_id, aObject._rvalue, withPromise);\n      } else if (aObject._rtype === \"interface\") {\n        bObject = this._genRemoteMethod(aObject._rtarget_id, aObject._rvalue, aObject._rintf);\n      } else if (aObject._rtype === \"ndarray\") {\n        /*global nj tf*/\n        //create build array/tensor if used in the plugin\n        if (typeof nj !== \"undefined\" && nj.array) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          bObject = nj.array(new Uint8(aObject._rvalue), aObject._rdtype).reshape(aObject._rshape);\n        } else if (typeof tf !== \"undefined\" && tf.Tensor) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dtypeToTypedArray\"][aObject._rdtype]);\n          bObject = tf.tensor(new arraytype(aObject._rvalue), aObject._rshape, aObject._rdtype);\n        } else {\n          //keep it as regular if transfered to the main app\n          bObject = aObject;\n        }\n      } else if (aObject._rtype === \"error\") {\n        bObject = new Error(aObject._rvalue);\n      } else if (aObject._rtype === \"file\") {\n        if (aObject._rvalue instanceof File) {\n          bObject = aObject._rvalue; //patch _path\n\n          bObject._path = aObject._rpath;\n        } else {\n          bObject = new File([aObject._rvalue], aObject._rname, {\n            type: aObject._rmime\n          });\n          bObject._path = aObject._rpath;\n        }\n      } else if (aObject._rtype === \"typedarray\") {\n        const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dtypeToTypedArray\"][aObject._rdtype]);\n        if (!arraytype) throw new Error(\"unsupported dtype: \" + aObject._rdtype);\n        bObject = new arraytype(aObject._rvalue);\n      } else if (aObject._rtype === \"memoryview\") {\n        bObject = new DataView(aObject._rvalue);\n      } else if (aObject._rtype === \"blob\") {\n        if (aObject._rvalue instanceof Blob) {\n          bObject = aObject._rvalue;\n        } else {\n          bObject = new Blob([aObject._rvalue], {\n            type: aObject._rmime\n          });\n        }\n      } else if (aObject._rtype === \"orderedmap\") {\n        bObject = new Map((await this._decode(aObject._rvalue, withPromise)));\n      } else if (aObject._rtype === \"set\") {\n        bObject = new Set((await this._decode(aObject._rvalue, withPromise)));\n      } else {\n        // make sure all the interface functions are decoded\n        if (aObject._rintf) {\n          const temp = aObject._rtype;\n          delete aObject._rtype;\n          aObject = await this._decode(aObject, withPromise);\n          aObject._rtype = temp;\n        }\n\n        bObject = aObject;\n      }\n    } else if (aObject.constructor === Object || Array.isArray(aObject)) {\n      var isarray = Array.isArray(aObject);\n      bObject = isarray ? [] : {};\n\n      for (k in aObject) {\n        if (isarray || aObject.hasOwnProperty(k)) {\n          v = aObject[k];\n          bObject[k] = await this._decode(v, withPromise);\n        }\n      }\n    } else {\n      bObject = aObject;\n    }\n\n    if (bObject === undefined) {\n      throw new Error(\"Failed to decode object\");\n    } // store the object id for dispose\n\n\n    if (aObject._rintf) {\n      this._object_weakmap.set(bObject, aObject._rintf);\n    }\n\n    return bObject;\n  }\n\n  async _wrap(args, asInterface) {\n    var wrapped = await this._encode(args, asInterface);\n    return wrapped;\n  }\n  /**\n   * Unwraps the set of arguments delivered from the remote site,\n   * replaces all callback identifiers with a function which will\n   * initiate sending that callback identifier back to other site\n   *\n   * @param {Object} args to unwrap\n   *\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Array} unwrapped args\n   */\n\n\n  async _unwrap(args, withPromise) {\n    var result = await this._decode(args, withPromise);\n    return result;\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * callback. When the generated function is called, it will send\n   * the corresponding message to the remote site asking it to\n   * execute the particular callback previously saved during a call\n   * by the remote site a method from the interface of this site\n   *\n   * @param {Number} id of the remote callback to execute\n   * @param {Number} argNum argument index of the callback\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Function} wrapped remote callback\n   */\n\n\n  _genRemoteCallback(targetId, cid, withPromise) {\n    var me = this;\n    var remoteCallback;\n\n    if (withPromise) {\n      remoteCallback = function () {\n        return new Promise(async (resolve, reject) => {\n          var args = await me._wrap(Array.prototype.slice.call(arguments));\n          var transferables = args.__transferables__;\n          if (transferables) delete args.__transferables__;\n          resolve.__rpc_pair = reject;\n          reject.__rpc_pair = resolve;\n\n          try {\n            me._connection.emit({\n              type: \"callback\",\n              target_id: targetId,\n              id: cid,\n              args: args,\n              promise: await me._wrap([resolve, reject])\n            }, transferables);\n          } catch (e) {\n            reject(`Failed to exectue remote callback ( id: ${cid}).`);\n          }\n        });\n      };\n\n      return remoteCallback;\n    } else {\n      remoteCallback = async function () {\n        var args = await me._wrap(Array.prototype.slice.call(arguments));\n        var transferables = args.__transferables__;\n        if (transferables) delete args.__transferables__;\n        return me._connection.emit({\n          type: \"callback\",\n          target_id: targetId,\n          id: cid,\n          args: args\n        }, transferables);\n      };\n\n      return remoteCallback;\n    }\n  }\n  /**\n   * Sends the notification message and breaks the connection\n   */\n\n\n  disconnect() {\n    this._connection.emit({\n      type: \"disconnect\"\n    });\n\n    setTimeout(() => {\n      this._connection.disconnect();\n    }, 2000);\n  }\n\n}\n/**\n * ReferenceStore is a special object which stores other objects\n * and provides the references (number) instead. This reference\n * may then be sent over a json-based communication channel (IPC\n * to another Node.js process or a message to the Worker). Other\n * site may then provide the reference in the responce message\n * implying the given object should be activated.\n *\n * Primary usage for the ReferenceStore is a storage for the\n * callbacks, which therefore makes it possible to initiate a\n * callback execution by the opposite site (which normally cannot\n * directly execute functions over the communication channel).\n *\n * Each stored object can only be fetched once and is not\n * available for the second time. Each stored object must be\n * fetched, since otherwise it will remain stored forever and\n * consume memory.\n *\n * Stored object indeces are simply the numbers, which are however\n * released along with the objects, and are later reused again (in\n * order to postpone the overflow, which should not likely happen,\n * but anyway).\n */\n\nclass ReferenceStore {\n  constructor() {\n    this._store = {}; // stored object\n\n    this._indices = [0]; // smallest available indices\n\n    this._readyHandler = function () {};\n\n    this._busyHandler = function () {};\n\n    this._readyHandler();\n  }\n  /**\n   * call handler when the store is empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onReady(readyHandler) {\n    this._readyHandler = readyHandler || function () {};\n  }\n  /**\n   * call handler when the store is not empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onBusy(busyHandler) {\n    this._busyHandler = busyHandler || function () {};\n  }\n  /**\n   * get the length of the store\n   *\n   */\n\n\n  getStack() {\n    return Object.keys(this._store).length;\n  }\n  /**\n   * @function _genId() generates the new reference id\n   *\n   * @returns {Number} smallest available id and reserves it\n   */\n\n\n  _genId() {\n    var id;\n\n    if (this._indices.length === 1) {\n      id = this._indices[0]++;\n    } else {\n      id = this._indices.shift();\n    }\n\n    return id;\n  }\n  /**\n   * Releases the given reference id so that it will be available by\n   * another object stored\n   *\n   * @param {Number} id to release\n   */\n\n\n  _releaseId(id) {\n    for (var i = 0; i < this._indices.length; i++) {\n      if (id < this._indices[i]) {\n        this._indices.splice(i, 0, id);\n\n        break;\n      }\n    } // cleaning-up the sequence tail\n\n\n    for (i = this._indices.length - 1; i >= 0; i--) {\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\n        this._indices.pop();\n      } else {\n        break;\n      }\n    }\n  }\n  /**\n   * Stores the given object and returns the refernce id instead\n   *\n   * @param {Object} obj to store\n   *\n   * @returns {Number} reference id of the stored object\n   */\n\n\n  put(obj) {\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\n      this._busyHandler();\n    }\n\n    var id = this._genId();\n\n    this._store[id] = obj;\n    return id;\n  }\n  /**\n   * Retrieves previously stored object and releases its reference\n   *\n   * @param {Number} id of an object to retrieve\n   */\n\n\n  fetch(id) {\n    var obj = this._store[id];\n\n    if (obj && !obj.__remote_method) {\n      delete this._store[id];\n\n      this._releaseId(id);\n\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\n        this._readyHandler();\n      }\n    }\n\n    if (obj && obj.__rpc_pair) {\n      const _id = getKeyByValue(this._store, obj.__rpc_pair);\n\n      this.fetch(_id);\n    }\n\n    return obj;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/rpc.js\n");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin, MessageEmitter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randId\", function() { return randId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dtypeToTypedArray\", function() { return dtypeToTypedArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"typedArrayToDtype\", function() { return typedArrayToDtype; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cacheRequirements\", function() { return cacheRequirements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupServiceWorker\", function() { return setupServiceWorker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"urlJoin\", function() { return urlJoin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MessageEmitter\", function() { return MessageEmitter; });\nfunction randId() {\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\n}\nconst dtypeToTypedArray = {\n  int8: \"Int8Array\",\n  int16: \"Int16Array\",\n  int32: \"Int32Array\",\n  uint8: \"Uint8Array\",\n  uint16: \"Uint16Array\",\n  uint32: \"Uint32Array\",\n  float32: \"Float32Array\",\n  float64: \"Float64Array\",\n  array: \"Array\"\n};\nconst typedArrayToDtype = {\n  Int8Array: \"int8\",\n  Int16Array: \"int16\",\n  Int32Array: \"int32\",\n  Uint8Array: \"uint8\",\n  Uint16Array: \"uint16\",\n  Uint32Array: \"uint32\",\n  Float32Array: \"float32\",\n  Float64Array: \"float64\",\n  Array: \"array\"\n};\n\nfunction cacheUrlInServiceWorker(url) {\n  return new Promise(function (resolve, reject) {\n    const message = {\n      command: \"add\",\n      url: url\n    };\n\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\n      reject(\"Service worker is not supported.\");\n      return;\n    }\n\n    const messageChannel = new MessageChannel();\n\n    messageChannel.port1.onmessage = function (event) {\n      if (event.data && event.data.error) {\n        reject(event.data.error);\n      } else {\n        resolve(event.data && event.data.result);\n      }\n    };\n\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n    } else {\n      reject(\"Service worker controller is not available\");\n    }\n  });\n}\n\nasync function cacheRequirements(requirements) {\n  if (!Array.isArray(requirements)) {\n    requirementsm.code.requirements = [requirements];\n  }\n\n  if (requirements && requirements.length > 0) {\n    for (let req of requirements) {\n      //remove prefix\n      if (req.startsWith(\"js:\")) req = req.slice(3);\n      if (req.startsWith(\"css:\")) req = req.slice(4);\n      if (req.startsWith(\"cache:\")) req = req.slice(6);\n      if (!req.startsWith(\"http\")) continue;\n      await cacheUrlInServiceWorker(req).catch(e => {\n        console.error(e);\n      });\n    }\n  }\n}\nfunction setupServiceWorker(baseUrl, targetOrigin, cacheCallback) {\n  // register service worker for offline access\n  if (\"serviceWorker\" in navigator) {\n    baseUrl = baseUrl || \"/\";\n    navigator.serviceWorker.register(baseUrl + \"plugin-service-worker.js\").then(function (registration) {\n      // Registration was successful\n      console.log(\"ServiceWorker registration successful with scope: \", registration.scope);\n    }, function (err) {\n      // registration failed :(\n      console.log(\"ServiceWorker registration failed: \", err);\n    });\n    targetOrigin = targetOrigin || \"*\";\n    cacheCallback = cacheCallback || cacheRequirements;\n\n    if (cacheCallback && typeof cacheCallback !== \"function\") {\n      throw new Error(\"config.cache_requirements must be a function\");\n    }\n\n    window.addEventListener(\"message\", function (e) {\n      if (targetOrigin === \"*\" || e.origin === targetOrigin) {\n        const m = e.data;\n\n        if (m.type === \"cacheRequirements\") {\n          cacheCallback(m.requirements);\n        }\n      }\n    });\n  }\n} //#Source https://bit.ly/2neWfJ2\n\nfunction urlJoin(...args) {\n  return args.join(\"/\").replace(/[\\/]+/g, \"/\").replace(/^(.+):\\//, \"$1://\").replace(/^file:/, \"file:/\").replace(/\\/(\\?|&|#[^!])/g, \"$1\").replace(/\\?/g, \"&\").replace(\"&\", \"?\");\n}\nclass MessageEmitter {\n  constructor(debug) {\n    this._event_handlers = {};\n    this._once_handlers = {};\n    this._debug = debug;\n  }\n\n  emit() {\n    throw new Error(\"emit is not implemented\");\n  }\n\n  on(event, handler) {\n    if (!this._event_handlers[event]) {\n      this._event_handlers[event] = [];\n    }\n\n    this._event_handlers[event].push(handler);\n  }\n\n  once(event, handler) {\n    handler.___event_run_once = true;\n    this.on(event, handler);\n  }\n\n  off(event, handler) {\n    if (!event && !handler) {\n      // remove all events handlers\n      this._event_handlers = {};\n    } else if (event && !handler) {\n      // remove all hanlders for the event\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\n    } else {\n      // remove a specific handler\n      if (this._event_handlers[event]) {\n        const idx = this._event_handlers[event].indexOf(handler);\n\n        if (idx >= 0) {\n          this._event_handlers[event].splice(idx, 1);\n        }\n      }\n    }\n  }\n\n  _fire(event, data) {\n    if (this._event_handlers[event]) {\n      var i = this._event_handlers[event].length;\n\n      while (i--) {\n        const handler = this._event_handlers[event][i];\n\n        try {\n          handler(data);\n        } catch (e) {\n          console.error(e);\n        } finally {\n          if (handler.___event_run_once) {\n            this._event_handlers[event].splice(i, 1);\n          }\n        }\n      }\n    } else {\n      if (this._debug) {\n        console.warn(\"unhandled event\", event, data);\n      }\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils.js\n");

/***/ })

/******/ });
});