module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/worker-loader/dist/workers/InlineWorker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/workers/InlineWorker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzPzc3ODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMzQzOTEzL2hvdy10by1jcmVhdGUtYS13ZWItd29ya2VyLWZyb20tYS1zdHJpbmdcblxudmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgdXJsKSB7XG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW5kb3cuTW96QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1TQmxvYkJ1aWxkZXI7XG5cbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuXG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuXG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGhlIHByb3Bvc2VkIEFQSVxuICAgICAgICBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoJ2RhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCwnICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0lubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/workers/InlineWorker.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, module, scripts, repository, keywords, author, license, bugs, homepage, dependencies, devDependencies, eslintConfig, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"imjoy-rpc\\\",\\\"version\\\":\\\"0.2.0\\\",\\\"description\\\":\\\"Remote procedure calls for ImJoy.\\\",\\\"module\\\":\\\"index.js\\\",\\\"scripts\\\":{\\\"build\\\":\\\"rm -rf dist && npm run build-umd && npm run build-module\\\",\\\"build-umd\\\":\\\"webpack --config webpack.config.js --mode development --filename imjoy-rpc.js && webpack --config webpack.config.js --mode production --devtool source-map --filename imjoy-rpc.min.js\\\",\\\"build-module\\\":\\\"webpack --config webpack.config.js --mode development --libraryTarget commonjs2 --filename imjoy-rpc.module.js\\\",\\\"watch\\\":\\\"webpack --watch --progress --config webpack.config.js --mode production --devtool source-map --filename imjoy-rpc.min.js\\\",\\\"serve\\\":\\\"webpack-dev-server --filename imjoy-rpc.js\\\",\\\"stats\\\":\\\"webpack --profile --json > stats.json\\\",\\\"stats-prod\\\":\\\"webpack --profile --json --mode production > stats-prod.json\\\",\\\"analyze\\\":\\\"webpack-bundle-analyzer -p 9999 stats.json\\\",\\\"analyze-prod\\\":\\\"webpack-bundle-analyzer -p 9999 stats-prod.json\\\",\\\"clean\\\":\\\"rimraf dist/*\\\",\\\"deploy\\\":\\\"npm run build && node deploy-site.js\\\",\\\"format\\\":\\\"prettier --write \\\\\\\"{src,tests}/**/**\\\\\\\"\\\",\\\"check-format\\\":\\\"prettier --check \\\\\\\"{src,tests}/**/**\\\\\\\"\\\",\\\"test\\\":\\\"karma start --single-run --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\\\",\\\"test-watch\\\":\\\"karma start --auto-watch --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/imjoy-team/imjoy-rpc.git\\\"},\\\"keywords\\\":[\\\"imjoy\\\",\\\"rpc\\\"],\\\"author\\\":\\\"imjoy-team <imjoy.team@gmail.com>\\\",\\\"license\\\":\\\"MIT\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/imjoy-team/imjoy-rpc/issues\\\"},\\\"homepage\\\":\\\"https://github.com/imjoy-team/imjoy-rpc\\\",\\\"dependencies\\\":{},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/plugin-syntax-dynamic-import\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/polyfill\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/preset-env\\\":\\\"^7.0.0-beta.39\\\",\\\"@types/requirejs\\\":\\\"^2.1.28\\\",\\\"babel-core\\\":\\\"^6.26.0\\\",\\\"babel-eslint\\\":\\\"^10.1.0\\\",\\\"babel-loader\\\":\\\"8.0.0-beta.2\\\",\\\"babel-runtime\\\":\\\"^6.26.0\\\",\\\"chai\\\":\\\"^4.2.0\\\",\\\"clean-webpack-plugin\\\":\\\"^0.1.19\\\",\\\"copy-webpack-plugin\\\":\\\"^5.0.5\\\",\\\"eslint\\\":\\\"^6.8.0\\\",\\\"eslint-config-prettier\\\":\\\"^4.2.0\\\",\\\"eslint-loader\\\":\\\"^4.0.2\\\",\\\"file-loader\\\":\\\"^0.11.2\\\",\\\"fs-extra\\\":\\\"^0.30.0\\\",\\\"gh-pages\\\":\\\"^2.0.1\\\",\\\"html-loader\\\":\\\"^0.5.5\\\",\\\"html-webpack-plugin\\\":\\\"^3.2.0\\\",\\\"json-loader\\\":\\\"^0.5.4\\\",\\\"karma\\\":\\\"^4.4.1\\\",\\\"karma-chrome-launcher\\\":\\\"^3.1.0\\\",\\\"karma-firefox-launcher\\\":\\\"^1.3.0\\\",\\\"karma-mocha\\\":\\\"^1.3.0\\\",\\\"karma-webpack\\\":\\\"^4.0.2\\\",\\\"lerna\\\":\\\"^3.8.0\\\",\\\"lodash.debounce\\\":\\\"^4.0.8\\\",\\\"mocha\\\":\\\"^7.1.2\\\",\\\"postcss\\\":\\\"^6.0.2\\\",\\\"prettier\\\":\\\"^1.6.1\\\",\\\"rimraf\\\":\\\"^2.6.2\\\",\\\"schema-utils\\\":\\\"^0.4.3\\\",\\\"socket.io-client\\\":\\\"^2.3.0\\\",\\\"style-loader\\\":\\\"^0.18.1\\\",\\\"url-loader\\\":\\\"^0.5.9\\\",\\\"webpack\\\":\\\"^4.0.0\\\",\\\"webpack-bundle-analyzer\\\":\\\"^3.3.2\\\",\\\"webpack-cli\\\":\\\"^3.1.2\\\",\\\"webpack-dev-server\\\":\\\"^3.1.1\\\",\\\"webpack-merge\\\":\\\"^4.1.1\\\",\\\"worker-loader\\\":\\\"^2.0.0\\\",\\\"write-file-webpack-plugin\\\":\\\"^4.5.1\\\"},\\\"eslintConfig\\\":{\\\"globals\\\":{\\\"document\\\":true,\\\"window\\\":true}}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./package.json\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! exports provided: RPC, API_VERSION, VERSION, setupBaseFrame, setupRPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupBaseFrame\", function() { return setupBaseFrame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupRPC\", function() { return setupRPC; });\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugin.webworker.js */ \"./src/plugin.webworker.js\");\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pluginIframe.js */ \"./src/pluginIframe.js\");\n/* harmony import */ var _pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginWebPython.js */ \"./src/pluginWebPython.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__[\"RPC\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"API_VERSION\", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__[\"API_VERSION\"]; });\n\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ \"./package.json\", 1);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return _package_json__WEBPACK_IMPORTED_MODULE_5__[\"version\"]; });\n\n/**\n * Contains the code executed in the sandboxed frame under web-browser\n *\n * Tries to create a Web-Worker inside the frame and set up the\n * communication between the worker and the parent window. Some\n * browsers restrict creating a worker inside a sandboxed iframe - if\n * this happens, the plugin initialized right inside the frame (in the\n * same thread)\n */\n\n\n\n\n\n\n\nfunction inIframe() {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\n\nfunction getParamValue(paramName) {\n  const url = window.location.search.substring(1); //get rid of \"?\" in querystring\n\n  const qArray = url.split(\"&\"); //get key-value pairs\n\n  for (let i = 0; i < qArray.length; i++) {\n    const pArr = qArray[i].split(\"=\"); //split key and value\n\n    if (pArr[0] === paramName) return pArr[1]; //return value\n  }\n}\n/**\n * Initializes the plugin inside a web worker. May throw an exception\n * in case this was not permitted by the browser.\n */\n\n\nfunction setupWebWorker(config) {\n  if (!config.allow_execution) throw new Error(\"web-worker plugin can only work with allow_execution=true\");\n  const worker = new _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default.a(); // mixed content warning in Chrome silently skips worker\n  // initialization without exception, handling this with timeout\n\n  const fallbackTimeout = setTimeout(function () {\n    worker.terminate();\n    console.warn(`Plugin failed to start as a web-worker, running in an iframe instead.`);\n    Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n  }, 2000); // forwarding messages between the worker and parent window\n\n  worker.addEventListener(\"message\", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.type === \"worker-ready\") {\n      // send config to the worker\n      worker.postMessage({\n        type: \"connectRPC\",\n        config: config\n      });\n      clearTimeout(fallbackTimeout);\n      return;\n    } else if (m.type === \"initialized\") {\n      // complete the missing fields\n      m.config = Object.assign({}, config, m.config);\n    } else if (m.type === \"imjoy_remote_api_ready\") {\n      // if it's a webworker, there will be no api object returned\n      window.dispatchEvent(new CustomEvent(\"imjoy_remote_api_ready\", {\n        detail: null\n      }));\n    } else if (m.type === \"cacheRequirements\" && typeof cache_requirements === \"function\") {\n      cache_requirements(m.requirements);\n    } else if (m.type === \"disconnect\") {\n      worker.terminate();\n    } else {\n      if (m.__transferables__) {\n        transferables = m.__transferables__;\n        delete m.__transferables__;\n      }\n    }\n\n    parent.postMessage(m, config.target_origin || \"*\", transferables);\n  });\n  window.addEventListener(\"message\", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.__transferables__) {\n      transferables = m.__transferables__;\n      delete m.__transferables__;\n    }\n\n    worker.postMessage(m, transferables);\n  });\n}\n\nasync function setupBaseFrame(config) {\n  config = config || {};\n  config.name = config.name || \"Generic RPC App\";\n  config.type = config.type || getParamValue(\"_plugin_type\") || \"window\";\n  config.allow_execution = config.allow_execution || true;\n  config.enable_service_worker = config.enable_service_worker || true;\n\n  if (config.enable_service_worker) {\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"setupServiceWorker\"])(config.target_origin, config.cache_requirements);\n  }\n\n  if (config.cache_requirements) {\n    delete config.cache_requirements;\n  }\n\n  config.forwarding_functions = config.forwarding_functions;\n\n  if (config.forwarding_functions === undefined) {\n    config.forwarding_functions = [\"close\", \"on\", \"off\", \"emit\"];\n\n    if ([\"rpc-window\", \"window\", \"web-python-window\"].includes(config.type)) {\n      config.forwarding_functions = config.forwarding_functions.concat([\"resize\", \"show\", \"hide\", \"refresh\"]);\n    }\n  } // expose the api object to window globally.\n  // note: the returned value will be null for webworker\n\n\n  window.api = await imjoyRPC.setupRPC(config);\n  return window.api;\n}\nfunction setupRPC(config) {\n  config = config || {};\n  if (!config.name) throw new Error(\"Please specify a name for your app.\");\n  config.version = config.version || \"0.1.0\";\n  config.description = config.description || `[TODO: add description for ${config.name} ]`;\n  config.type = config.type || \"rpc-window\";\n  config.id = config.id || Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])();\n  config.allow_execution = config.allow_execution || false; // remove functions\n\n  config = Object.keys(config).reduce((p, c) => {\n    if (typeof config[c] !== \"function\") p[c] = config[c];\n    return p;\n  }, {});\n  return new Promise((resolve, reject) => {\n    if (inIframe()) {\n      if (config.type === \"web-worker\") {\n        try {\n          setupWebWorker(config);\n        } catch (e) {\n          // fallback to iframe\n          Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n        }\n      } else if (config.type === \"web-python\" || config.type === \"web-python-window\") {\n        Object(_pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(config);\n      } else if ([\"rpc-window\", \"rpc-worker\", \"iframe\", \"window\"].includes(config.type)) {\n        Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n      } else {\n        console.error(\"Unsupported plugin type: \" + config.type);\n        reject(\"Unsupported plugin type: \" + config.type);\n      }\n\n      try {\n        this.handleEvent = e => {\n          // imjoy plugin api\n          resolve(e.detail);\n          window.removeEventListener(\"imjoy_remote_api_ready\", this);\n        };\n\n        window.addEventListener(\"imjoy_remote_api_ready\", this);\n      } catch (e) {\n        reject(e);\n      }\n    } else {\n      reject(new Error(\"imjoy-rpc should only run inside an iframe.\"));\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ }),

/***/ "./src/plugin.webworker.js":
/*!*********************************!*\
  !*** ./src/plugin.webworker.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = function() {\n  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ \"./node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\\"./src/plugin.webworker.js\\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\\"./src/plugin.webworker.js\\\":\\n/*!*********************************!*\\\\\\n  !*** ./src/plugin.webworker.js ***!\\n  \\\\*********************************/\\n/*! no exports provided */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \\\\\\\"./src/pluginCore.js\\\\\\\");\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \\\\\\\"./src/utils.js\\\\\\\");\\\\n/**\\\\n * Contains the routines loaded by the plugin Worker under web-browser.\\\\n *\\\\n * Initializes the web environment version of the platform-dependent\\\\n * connection object for the plugin site\\\\n */\\\\n\\\\n\\\\n\\\\n\\\\n(function() {\\\\n  // make sure this runs inside a webworker\\\\n  if (\\\\n    typeof WorkerGlobalScope === \\\\\\\"undefined\\\\\\\" ||\\\\n    !self ||\\\\n    !(self instanceof WorkerGlobalScope)\\\\n  ) {\\\\n    throw new Error(\\\\\\\"This script can only loaded in a webworker\\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Connection object provided to the RPC constructor,\\\\n   * plugin site implementation for the web-based environment.\\\\n   * Global will be then cleared to prevent exposure into the\\\\n   * Worker, so we put this local connection object into a closure\\\\n   */\\\\n  class Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"EventManager\\\\\\\"] {\\\\n    constructor(config) {\\\\n      super(config && config.debug);\\\\n      this.config = config || {};\\\\n    }\\\\n    connect() {\\\\n      self.addEventListener(\\\\\\\"message\\\\\\\", e => {\\\\n        this._fire(e.data.type, e.data);\\\\n      });\\\\n      this.emit({\\\\n        type: \\\\\\\"initialized\\\\\\\",\\\\n        config: this.config\\\\n      });\\\\n    }\\\\n    disconnect() {\\\\n      this._fire(\\\\\\\"beforeDisconnect\\\\\\\");\\\\n      self.close();\\\\n      this._fire(\\\\\\\"disconnected\\\\\\\");\\\\n    }\\\\n    emit(data) {\\\\n      let transferables = undefined;\\\\n      if (data.__transferables__) {\\\\n        transferables = data.__transferables__;\\\\n        delete data.__transferables__;\\\\n      }\\\\n      self.postMessage(data, transferables);\\\\n    }\\\\n    async execute(code) {\\\\n      if (code.type === \\\\\\\"requirements\\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\\"string\\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (!Array.isArray(code.requirements)) {\\\\n                code.requirements = [code.requirements];\\\\n              }\\\\n              for (var i = 0; i < code.requirements.length; i++) {\\\\n                if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\\".css\\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\\"css:\\\\\\\")\\\\n                ) {\\\\n                  throw \\\\\\\"unable to import css in a webworker\\\\\\\";\\\\n                } else if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\\".js\\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")\\\\n                ) {\\\\n                  if (code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")) {\\\\n                    code.requirements[i] = code.requirements[i].slice(3);\\\\n                  }\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"http\\\\\\\")) {\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"cache:\\\\\\\")) {\\\\n                  //ignore cache\\\\n                } else {\\\\n                  console.log(\\\\n                    \\\\\\\"Unprocessed requirements url: \\\\\\\" + code.requirements[i]\\\\n                  );\\\\n                }\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\\"failed to import required scripts: \\\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n        } catch (e) {\\\\n          throw e;\\\\n        }\\\\n      } else if (code.type === \\\\\\\"script\\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\\"string\\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (Array.isArray(code.requirements)) {\\\\n                for (let i = 0; i < code.requirements.length; i++) {\\\\n                  importScripts(code.requirements[i]);\\\\n                }\\\\n              } else {\\\\n                importScripts(code.requirements);\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\\"failed to import required scripts: \\\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n          eval(code.content);\\\\n        } catch (e) {\\\\n          console.error(e.message, e.stack);\\\\n          throw e;\\\\n        }\\\\n      } else {\\\\n        throw \\\\\\\"unsupported code type.\\\\\\\";\\\\n      }\\\\n      if (code.type === \\\\\\\"requirements\\\\\\\") {\\\\n        self.postMessage({\\\\n          type: \\\\\\\"cacheRequirements\\\\\\\",\\\\n          requirements: code.requirements\\\\n        });\\\\n      }\\\\n    }\\\\n  }\\\\n  const config = {\\\\n    type: \\\\\\\"web-worker\\\\\\\",\\\\n    dedicated_thread: true,\\\\n    allow_execution: true,\\\\n    lang: \\\\\\\"javascript\\\\\\\",\\\\n    api_version: _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"API_VERSION\\\\\\\"]\\\\n  };\\\\n  const conn = new Connection(config);\\\\n  conn.on(\\\\\\\"connectRPC\\\\\\\", data => {\\\\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"connectRPC\\\\\\\"])(conn, Object.assign(data.config, config));\\\\n  });\\\\n  conn.connect();\\\\n  self.postMessage({\\\\n    type: \\\\\\\"worker-ready\\\\\\\"\\\\n  });\\\\n})();\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luLndlYndvcmtlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbi53ZWJ3b3JrZXIuanM/OGM1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnRhaW5zIHRoZSByb3V0aW5lcyBsb2FkZWQgYnkgdGhlIHBsdWdpbiBXb3JrZXIgdW5kZXIgd2ViLWJyb3dzZXIuXG4gKlxuICogSW5pdGlhbGl6ZXMgdGhlIHdlYiBlbnZpcm9ubWVudCB2ZXJzaW9uIG9mIHRoZSBwbGF0Zm9ybS1kZXBlbmRlbnRcbiAqIGNvbm5lY3Rpb24gb2JqZWN0IGZvciB0aGUgcGx1Z2luIHNpdGVcbiAqL1xuaW1wb3J0IHsgY29ubmVjdFJQQyB9IGZyb20gXCIuL3BsdWdpbkNvcmUuanNcIjtcbmltcG9ydCB7IEFQSV9WRVJTSU9OIH0gZnJvbSBcIi4vcnBjLmpzXCI7XG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuXG4oZnVuY3Rpb24oKSB7XG4gIC8vIG1ha2Ugc3VyZSB0aGlzIHJ1bnMgaW5zaWRlIGEgd2Vid29ya2VyXG4gIGlmIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09IFwidW5kZWZpbmVkXCIgfHxcbiAgICAhc2VsZiB8fFxuICAgICEoc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHNjcmlwdCBjYW4gb25seSBsb2FkZWQgaW4gYSB3ZWJ3b3JrZXJcIik7XG4gIH1cbiAgLyoqXG4gICAqIENvbm5lY3Rpb24gb2JqZWN0IHByb3ZpZGVkIHRvIHRoZSBSUEMgY29uc3RydWN0b3IsXG4gICAqIHBsdWdpbiBzaXRlIGltcGxlbWVudGF0aW9uIGZvciB0aGUgd2ViLWJhc2VkIGVudmlyb25tZW50LlxuICAgKiBHbG9iYWwgd2lsbCBiZSB0aGVuIGNsZWFyZWQgdG8gcHJldmVudCBleHBvc3VyZSBpbnRvIHRoZVxuICAgKiBXb3JrZXIsIHNvIHdlIHB1dCB0aGlzIGxvY2FsIGNvbm5lY3Rpb24gb2JqZWN0IGludG8gYSBjbG9zdXJlXG4gICAqL1xuICBjbGFzcyBDb25uZWN0aW9uIGV4dGVuZHMgRXZlbnRNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgIHN1cGVyKGNvbmZpZyAmJiBjb25maWcuZGVidWcpO1xuICAgICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgfVxuICAgIGNvbm5lY3QoKSB7XG4gICAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGUgPT4ge1xuICAgICAgICB0aGlzLl9maXJlKGUuZGF0YS50eXBlLCBlLmRhdGEpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoe1xuICAgICAgICB0eXBlOiBcImluaXRpYWxpemVkXCIsXG4gICAgICAgIGNvbmZpZzogdGhpcy5jb25maWdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgdGhpcy5fZmlyZShcImJlZm9yZURpc2Nvbm5lY3RcIik7XG4gICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICB0aGlzLl9maXJlKFwiZGlzY29ubmVjdGVkXCIpO1xuICAgIH1cbiAgICBlbWl0KGRhdGEpIHtcbiAgICAgIGxldCB0cmFuc2ZlcmFibGVzID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGRhdGEuX190cmFuc2ZlcmFibGVzX18pIHtcbiAgICAgICAgdHJhbnNmZXJhYmxlcyA9IGRhdGEuX190cmFuc2ZlcmFibGVzX187XG4gICAgICAgIGRlbGV0ZSBkYXRhLl9fdHJhbnNmZXJhYmxlc19fO1xuICAgICAgfVxuICAgICAgc2VsZi5wb3N0TWVzc2FnZShkYXRhLCB0cmFuc2ZlcmFibGVzKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShjb2RlKSB7XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgPSBbY29kZS5yZXF1aXJlbWVudHNdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZS5yZXF1aXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLmNzc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNzczpcIilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IFwidW5hYmxlIHRvIGltcG9ydCBjc3MgaW4gYSB3ZWJ3b3JrZXJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcIi5qc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImpzOlwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNvZGUucmVxdWlyZW1lbnRzW2ldLnN0YXJ0c1dpdGgoXCJqczpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0gPSBjb2RlLnJlcXVpcmVtZW50c1tpXS5zbGljZSgzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNhY2hlOlwiKSkge1xuICAgICAgICAgICAgICAgICAgLy9pZ25vcmUgY2FjaGVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIFwiVW5wcm9jZXNzZWQgcmVxdWlyZW1lbnRzIHVybDogXCIgKyBjb2RlLnJlcXVpcmVtZW50c1tpXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFwiICtcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSBcInNjcmlwdFwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2RlLnJlcXVpcmVtZW50cykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvZGUucmVxdWlyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpbXBvcnRTY3JpcHRzKGNvZGUucmVxdWlyZW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFwiICtcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBldmFsKGNvZGUuY29udGVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSwgZS5zdGFjayk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJ1bnN1cHBvcnRlZCBjb2RlIHR5cGUuXCI7XG4gICAgICB9XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwiY2FjaGVSZXF1aXJlbWVudHNcIixcbiAgICAgICAgICByZXF1aXJlbWVudHM6IGNvZGUucmVxdWlyZW1lbnRzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBjb25maWcgPSB7XG4gICAgdHlwZTogXCJ3ZWItd29ya2VyXCIsXG4gICAgZGVkaWNhdGVkX3RocmVhZDogdHJ1ZSxcbiAgICBhbGxvd19leGVjdXRpb246IHRydWUsXG4gICAgbGFuZzogXCJqYXZhc2NyaXB0XCIsXG4gICAgYXBpX3ZlcnNpb246IEFQSV9WRVJTSU9OXG4gIH07XG4gIGNvbnN0IGNvbm4gPSBuZXcgQ29ubmVjdGlvbihjb25maWcpO1xuICBjb25uLm9uKFwiY29ubmVjdFJQQ1wiLCBkYXRhID0+IHtcbiAgICBjb25uZWN0UlBDKGNvbm4sIE9iamVjdC5hc3NpZ24oZGF0YS5jb25maWcsIGNvbmZpZykpO1xuICB9KTtcbiAgY29ubi5jb25uZWN0KCk7XG4gIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgIHR5cGU6IFwid29ya2VyLXJlYWR5XCJcbiAgfSk7XG59KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/pluginCore.js\\\":\\n/*!***************************!*\\\\\\n  !*** ./src/pluginCore.js ***!\\n  \\\\***************************/\\n/*! exports provided: connectRPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"connectRPC\\\\\\\", function() { return connectRPC; });\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/* harmony import */ var _pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pluginIframe.js */ \\\\\\\"./src/pluginIframe.js\\\\\\\");\\\\n/**\\\\n * Core plugin script loaded into the plugin process/thread.\\\\n *\\\\n * Initializes the plugin-site API global methods.\\\\n */\\\\n\\\\n\\\\nfunction connectRPC(connection, config) {\\\\n  config = config || {};\\\\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"RPC\\\\\\\"](connection, config);\\\\n  rpc.on(\\\\\\\"getInterface\\\\\\\", function () {\\\\n    launchConnected();\\\\n  });\\\\n  rpc.on(\\\\\\\"remoteReady\\\\\\\", function () {\\\\n    const api = rpc.getRemote() || {};\\\\n\\\\n    if (api.export) {\\\\n      throw new Error(\\\\\\\"`export` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    if (api.onload) {\\\\n      throw new Error(\\\\\\\"`onload` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    if (api.dispose) {\\\\n      throw new Error(\\\\\\\"`dispose` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    api.export = function (_interface) {\\\\n      rpc.setInterface(_interface);\\\\n    };\\\\n\\\\n    api.onLoad = function (handler) {\\\\n      handler = checkHandler(handler);\\\\n\\\\n      if (connected) {\\\\n        handler();\\\\n      } else {\\\\n        connectedHandlers.push(handler);\\\\n      }\\\\n    };\\\\n\\\\n    api.dispose = function (_interface) {\\\\n      rpc.disconnect();\\\\n    };\\\\n\\\\n    if (typeof WorkerGlobalScope !== \\\\\\\"undefined\\\\\\\" && self instanceof WorkerGlobalScope) {\\\\n      self.api = api;\\\\n      self.postMessage({\\\\n        type: \\\\\\\"imjoy_remote_api_ready\\\\\\\"\\\\n      });\\\\n    } else if (typeof window) {\\\\n      window.dispatchEvent(new CustomEvent(\\\\\\\"imjoy_remote_api_ready\\\\\\\", {\\\\n        detail: api\\\\n      }));\\\\n    }\\\\n  });\\\\n  let connected = false;\\\\n  const connectedHandlers = [];\\\\n\\\\n  const launchConnected = function () {\\\\n    if (!connected) {\\\\n      connected = true;\\\\n      let handler;\\\\n\\\\n      while (handler = connectedHandlers.pop()) {\\\\n        handler();\\\\n      }\\\\n    }\\\\n  };\\\\n\\\\n  const checkHandler = function (handler) {\\\\n    const type = typeof handler;\\\\n\\\\n    if (type !== \\\\\\\"function\\\\\\\") {\\\\n      const msg = \\\\\\\"A function may only be subsribed to the event, \\\\\\\" + type + \\\\\\\" was provided instead\\\\\\\";\\\\n      throw new Error(msg);\\\\n    }\\\\n\\\\n    return handler;\\\\n  };\\\\n\\\\n  return rpc;\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDL3NyYy9wbHVnaW5Db3JlLmpzP2E0NzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3JlIHBsdWdpbiBzY3JpcHQgbG9hZGVkIGludG8gdGhlIHBsdWdpbiBwcm9jZXNzL3RocmVhZC5cbiAqXG4gKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLXNpdGUgQVBJIGdsb2JhbCBtZXRob2RzLlxuICovXG5pbXBvcnQgeyBSUEMgfSBmcm9tIFwiLi9ycGMuanNcIjtcbmltcG9ydCB7IENvbm5lY3Rpb24gfSBmcm9tIFwiLi9wbHVnaW5JZnJhbWUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RSUEMoY29ubmVjdGlvbiwgY29uZmlnKSB7XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZyk7XG4gIHJwYy5vbihcImdldEludGVyZmFjZVwiLCBmdW5jdGlvbigpIHtcbiAgICBsYXVuY2hDb25uZWN0ZWQoKTtcbiAgfSk7XG5cbiAgcnBjLm9uKFwicmVtb3RlUmVhZHlcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgYXBpID0gcnBjLmdldFJlbW90ZSgpIHx8IHt9O1xuICAgIGlmIChhcGkuZXhwb3J0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZXhwb3J0YCBpcyBhIHJlc2VydmVkIGZ1bmN0aW9uIG5hbWVcIik7XG4gICAgfVxuICAgIGlmIChhcGkub25sb2FkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgb25sb2FkYCBpcyBhIHJlc2VydmVkIGZ1bmN0aW9uIG5hbWVcIik7XG4gICAgfVxuICAgIGlmIChhcGkuZGlzcG9zZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGRpc3Bvc2VgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgYXBpLmV4cG9ydCA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICAgIHJwYy5zZXRJbnRlcmZhY2UoX2ludGVyZmFjZSk7XG4gICAgfTtcbiAgICBhcGkub25Mb2FkID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlciA9IGNoZWNrSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgIGlmIChjb25uZWN0ZWQpIHtcbiAgICAgICAgaGFuZGxlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29ubmVjdGVkSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGFwaS5kaXNwb3NlID0gZnVuY3Rpb24oX2ludGVyZmFjZSkge1xuICAgICAgcnBjLmRpc2Nvbm5lY3QoKTtcbiAgICB9O1xuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGVcbiAgICApIHtcbiAgICAgIHNlbGYuYXBpID0gYXBpO1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cpIHtcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoXCJpbWpveV9yZW1vdGVfYXBpX3JlYWR5XCIsIHsgZGV0YWlsOiBhcGkgfSlcbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICBsZXQgY29ubmVjdGVkID0gZmFsc2U7XG4gIGNvbnN0IGNvbm5lY3RlZEhhbmRsZXJzID0gW107XG5cbiAgY29uc3QgbGF1bmNoQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgIGNvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAgIGxldCBoYW5kbGVyO1xuICAgICAgd2hpbGUgKChoYW5kbGVyID0gY29ubmVjdGVkSGFuZGxlcnMucG9wKCkpKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2hlY2tIYW5kbGVyID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgaGFuZGxlcjtcbiAgICBpZiAodHlwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCBtc2cgPVxuICAgICAgICBcIkEgZnVuY3Rpb24gbWF5IG9ubHkgYmUgc3Vic3JpYmVkIHRvIHRoZSBldmVudCwgXCIgK1xuICAgICAgICB0eXBlICtcbiAgICAgICAgXCIgd2FzIHByb3ZpZGVkIGluc3RlYWRcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbiAgICByZXR1cm4gaGFuZGxlcjtcbiAgfTtcblxuICByZXR1cm4gcnBjO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./src/pluginCore.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/pluginIframe.js\\\":\\n/*!*****************************!*\\\\\\n  !*** ./src/pluginIframe.js ***!\\n  \\\\*****************************/\\n/*! exports provided: Connection, default */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"Connection\\\\\\\", function() { return Connection; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"default\\\\\\\", function() { return setupIframe; });\\\\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \\\\\\\"./src/pluginCore.js\\\\\\\");\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \\\\\\\"./src/utils.js\\\\\\\");\\\\n/**\\\\n * Contains the routines loaded by the plugin iframe under web-browser\\\\n * in case when worker failed to initialize\\\\n *\\\\n * Initializes the web environment version of the platform-dependent\\\\n * connection object for the plugin site\\\\n */\\\\n\\\\n\\\\n // Create a new, plain <span> element\\\\n\\\\nfunction _htmlToElement(html) {\\\\n  var template = document.createElement(\\\\\\\"template\\\\\\\");\\\\n  html = html.trim(); // Never return a text node of whitespace as the result\\\\n\\\\n  template.innerHTML = html;\\\\n  return template.content.firstChild;\\\\n}\\\\n\\\\nvar _importScript = function (url) {\\\\n  //url is URL of external file, implementationCode is the code\\\\n  //to be called from the file, location is the location to\\\\n  //insert the <script> element\\\\n  return new Promise((resolve, reject) => {\\\\n    var scriptTag = document.createElement(\\\\\\\"script\\\\\\\");\\\\n    scriptTag.src = url;\\\\n    scriptTag.type = \\\\\\\"text/javascript\\\\\\\";\\\\n    scriptTag.onload = resolve;\\\\n\\\\n    scriptTag.onreadystatechange = function () {\\\\n      if (this.readyState === \\\\\\\"loaded\\\\\\\" || this.readyState === \\\\\\\"complete\\\\\\\") {\\\\n        resolve();\\\\n      }\\\\n    };\\\\n\\\\n    scriptTag.onerror = reject;\\\\n    document.head.appendChild(scriptTag);\\\\n  });\\\\n}; // support importScripts outside web worker\\\\n\\\\n\\\\nasync function importScripts() {\\\\n  var args = Array.prototype.slice.call(arguments),\\\\n      len = args.length,\\\\n      i = 0;\\\\n\\\\n  for (; i < len; i++) {\\\\n    await _importScript(args[i]);\\\\n  }\\\\n}\\\\n\\\\nclass Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"EventManager\\\\\\\"] {\\\\n  constructor(config) {\\\\n    super(config && config.debug);\\\\n    this.config = config || {};\\\\n  }\\\\n\\\\n  connect() {\\\\n    this.config.target_origin = this.config.target_origin || \\\\\\\"*\\\\\\\"; // this will call handleEvent function\\\\n\\\\n    window.addEventListener(\\\\\\\"message\\\\\\\", this);\\\\n    this.emit({\\\\n      type: \\\\\\\"initialized\\\\\\\",\\\\n      config: this.config\\\\n    });\\\\n\\\\n    this._fire(\\\\\\\"connected\\\\\\\");\\\\n  }\\\\n\\\\n  handleEvent(e) {\\\\n    if (e.type === \\\\\\\"message\\\\\\\" && this.config.target_origin === \\\\\\\"*\\\\\\\" || e.origin === this.config.target_origin) {\\\\n      this._fire(e.data.type, e.data);\\\\n    }\\\\n  }\\\\n\\\\n  disconnect() {\\\\n    this._fire(\\\\\\\"beforeDisconnect\\\\\\\");\\\\n\\\\n    window.removeEventListener(\\\\\\\"message\\\\\\\", this);\\\\n\\\\n    this._fire(\\\\\\\"disconnected\\\\\\\");\\\\n  }\\\\n\\\\n  emit(data) {\\\\n    let transferables;\\\\n\\\\n    if (data.__transferables__) {\\\\n      transferables = data.__transferables__;\\\\n      delete data.__transferables__;\\\\n    }\\\\n\\\\n    parent.postMessage(data, this.config.target_origin, transferables);\\\\n  }\\\\n\\\\n  async execute(code) {\\\\n    try {\\\\n      if (code.type === \\\\\\\"requirements\\\\\\\") {\\\\n        if (code.requirements && (Array.isArray(code.requirements) || typeof code.requirements === \\\\\\\"string\\\\\\\")) {\\\\n          try {\\\\n            var link_node;\\\\n            code.requirements = typeof code.requirements === \\\\\\\"string\\\\\\\" ? [code.requirements] : code.requirements;\\\\n\\\\n            if (Array.isArray(code.requirements)) {\\\\n              for (var i = 0; i < code.requirements.length; i++) {\\\\n                if (code.requirements[i].toLowerCase().endsWith(\\\\\\\".css\\\\\\\") || code.requirements[i].startsWith(\\\\\\\"css:\\\\\\\")) {\\\\n                  if (code.requirements[i].startsWith(\\\\\\\"css:\\\\\\\")) {\\\\n                    code.requirements[i] = code.requirements[i].slice(4);\\\\n                  }\\\\n\\\\n                  link_node = document.createElement(\\\\\\\"link\\\\\\\");\\\\n                  link_node.rel = \\\\\\\"stylesheet\\\\\\\";\\\\n                  link_node.href = code.requirements[i];\\\\n                  document.head.appendChild(link_node);\\\\n                } else if (code.requirements[i].toLowerCase().endsWith(\\\\\\\".js\\\\\\\") || code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")) {\\\\n                  if (code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")) {\\\\n                    code.requirements[i] = code.requirements[i].slice(3);\\\\n                  }\\\\n\\\\n                  await importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"http\\\\\\\")) {\\\\n                  await importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"cache:\\\\\\\")) {//ignore cache\\\\n                } else {\\\\n                  console.log(\\\\\\\"Unprocessed requirements url: \\\\\\\" + code.requirements[i]);\\\\n                }\\\\n              }\\\\n            } else {\\\\n              throw \\\\\\\"unsupported requirements definition\\\\\\\";\\\\n            }\\\\n          } catch (e) {\\\\n            throw \\\\\\\"failed to import required scripts: \\\\\\\" + code.requirements.toString();\\\\n          }\\\\n        }\\\\n      } else if (code.type === \\\\\\\"script\\\\\\\") {\\\\n        if (code.src) {\\\\n          var script_node = document.createElement(\\\\\\\"script\\\\\\\");\\\\n          script_node.setAttribute(\\\\\\\"type\\\\\\\", code.attrs.type);\\\\n          script_node.setAttribute(\\\\\\\"src\\\\\\\", code.src);\\\\n          document.head.appendChild(script_node);\\\\n        } else {\\\\n          if (code.content && (!code.attrs.type || code.attrs.type === \\\\\\\"text/javascript\\\\\\\")) {\\\\n            // document.addEventListener(\\\\\\\"DOMContentLoaded\\\\\\\", function(){\\\\n            eval(code.content); // });\\\\n          } else {\\\\n            var node = document.createElement(\\\\\\\"script\\\\\\\");\\\\n            node.setAttribute(\\\\\\\"type\\\\\\\", code.attrs.type);\\\\n            node.appendChild(document.createTextNode(code.content));\\\\n            document.body.appendChild(node);\\\\n          }\\\\n        }\\\\n      } else if (code.type === \\\\\\\"style\\\\\\\") {\\\\n        const style_node = document.createElement(\\\\\\\"style\\\\\\\");\\\\n\\\\n        if (code.src) {\\\\n          style_node.src = code.src;\\\\n        }\\\\n\\\\n        style_node.innerHTML = code.content;\\\\n        document.head.appendChild(style_node);\\\\n      } else if (code.type === \\\\\\\"link\\\\\\\") {\\\\n        const link_node_ = document.createElement(\\\\\\\"link\\\\\\\");\\\\n\\\\n        if (code.rel) {\\\\n          link_node_.rel = code.rel;\\\\n        }\\\\n\\\\n        if (code.href) {\\\\n          link_node_.href = code.href;\\\\n        }\\\\n\\\\n        if (code.attrs && code.attrs.type) {\\\\n          link_node_.type = code.attrs.type;\\\\n        }\\\\n\\\\n        document.head.appendChild(link_node_);\\\\n      } else if (code.type === \\\\\\\"html\\\\\\\") {\\\\n        document.body.appendChild(_htmlToElement(code.content));\\\\n      } else {\\\\n        throw \\\\\\\"unsupported code type.\\\\\\\";\\\\n      }\\\\n\\\\n      parent.postMessage({\\\\n        type: \\\\\\\"executed\\\\\\\"\\\\n      }, this.config.target_origin);\\\\n    } catch (e) {\\\\n      console.error(\\\\\\\"failed to execute scripts: \\\\\\\", code, e);\\\\n      parent.postMessage({\\\\n        type: \\\\\\\"executed\\\\\\\",\\\\n        error: e.stack || String(e)\\\\n      }, this.config.target_origin);\\\\n    }\\\\n  }\\\\n\\\\n}\\\\nfunction setupIframe(config) {\\\\n  config = config || {};\\\\n  config.dedicated_thread = false;\\\\n  config.lang = \\\\\\\"javascript\\\\\\\";\\\\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"API_VERSION\\\\\\\"];\\\\n  const conn = new Connection(config);\\\\n  Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"connectRPC\\\\\\\"])(conn, config);\\\\n  conn.connect();\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/pluginIframe.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/rpc.js\\\":\\n/*!********************!*\\\\\\n  !*** ./src/rpc.js ***!\\n  \\\\********************/\\n/*! exports provided: API_VERSION, RPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"API_VERSION\\\\\\\", function() { return API_VERSION; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"RPC\\\\\\\", function() { return RPC; });\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \\\\\\\"./src/utils.js\\\\\\\");\\\\n/**\\\\n * Contains the RPC object used both by the application\\\\n * site, and by each plugin\\\\n */\\\\n\\\\nconst API_VERSION = \\\\\\\"0.2.1\\\\\\\";\\\\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\\\\n\\\\nfunction _appendBuffer(buffer1, buffer2) {\\\\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\\\\n  tmp.set(new Uint8Array(buffer1), 0);\\\\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\\\\n  return tmp.buffer;\\\\n}\\\\n\\\\nfunction getKeyByValue(object, value) {\\\\n  return Object.keys(object).find(key => object[key] === value);\\\\n}\\\\n/**\\\\n * RPC object represents a single site in the\\\\n * communication protocol between the application and the plugin\\\\n *\\\\n * @param {Object} connection a special object allowing to send\\\\n * and receive messages from the opposite site (basically it\\\\n * should only provide send() and onMessage() methods)\\\\n */\\\\n\\\\n\\\\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"EventManager\\\\\\\"] {\\\\n  constructor(connection, config) {\\\\n    super(config && config.debug);\\\\n    this._connection = connection;\\\\n    this.config = config || {};\\\\n    this._interface_store = {};\\\\n    this._local_api = null; // make sure there is an execute function\\\\n\\\\n    const name = this.config.name;\\\\n\\\\n    this._connection.execute = this._connection.execute || function () {\\\\n      throw new Error(`connection.execute not implemented (in \\\\\\\"${name}\\\\\\\")`);\\\\n    };\\\\n\\\\n    this._store = new ReferenceStore();\\\\n    this._method_refs = new ReferenceStore();\\\\n\\\\n    this._method_refs.onReady(() => {\\\\n      this._fire(\\\\\\\"remoteIdle\\\\\\\");\\\\n    });\\\\n\\\\n    this._method_refs.onBusy(() => {\\\\n      this._fire(\\\\\\\"remoteBusy\\\\\\\");\\\\n    });\\\\n\\\\n    this._setupMessageHanlders();\\\\n  }\\\\n\\\\n  init() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"initialized\\\\\\\",\\\\n      config: this.config\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Set a handler to be called when received a responce from the\\\\n   * remote site reporting that the previously provided interface\\\\n   * has been successfully set as remote for that site\\\\n   *\\\\n   * @param {Function} handler\\\\n   */\\\\n\\\\n\\\\n  getRemoteCallStack() {\\\\n    return this._method_refs.getStack();\\\\n  }\\\\n  /**\\\\n   * @returns {Object} set of remote interface methods\\\\n   */\\\\n\\\\n\\\\n  getRemote() {\\\\n    return this._interface_store[\\\\\\\"_rremote\\\\\\\"];\\\\n  }\\\\n  /**\\\\n   * Sets the interface of this site making it available to the\\\\n   * remote site by sending a message with a set of methods names\\\\n   *\\\\n   * @param {Object} _interface to set\\\\n   */\\\\n\\\\n\\\\n  setInterface(_interface) {\\\\n    if (this.config.forwarding_functions) {\\\\n      for (let func_name of this.config.forwarding_functions) {\\\\n        const _remote = this._interface_store[\\\\\\\"_rremote\\\\\\\"];\\\\n\\\\n        if (_remote[func_name]) {\\\\n          if (_interface.constructor === Object) {\\\\n            if (!_interface[func_name]) {\\\\n              _interface[func_name] = (...args) => {\\\\n                _remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          } else if (_interface.constructor.constructor === Function) {\\\\n            if (!_interface.constructor.prototype[func_name]) {\\\\n              _interface.constructor.prototype[func_name] = (...args) => {\\\\n                _remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          }\\\\n        }\\\\n      }\\\\n    }\\\\n\\\\n    this._local_api = _interface;\\\\n\\\\n    this._fire(\\\\\\\"interfaceAvailable\\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Sends the actual interface to the remote site upon it was\\\\n   * updated or by a special request of the remote site\\\\n   */\\\\n\\\\n\\\\n  sendInterface() {\\\\n    if (!this._local_api) {\\\\n      throw new Error(\\\\\\\"interface is not set.\\\\\\\");\\\\n    }\\\\n\\\\n    this._local_api._rid = \\\\\\\"_rlocal\\\\\\\";\\\\n\\\\n    const api = this._encode(this._local_api, true);\\\\n\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"setInterface\\\\\\\",\\\\n      api: api\\\\n    });\\\\n  }\\\\n\\\\n  setAuthenticator(authenticator) {\\\\n    this.authenticator = authenticator;\\\\n  }\\\\n\\\\n  setAuthorizer(authorizer) {\\\\n    this.authorizer = authorizer;\\\\n  }\\\\n  /**\\\\n   * Handles a message from the remote site\\\\n   */\\\\n  // var callback_reg = new RegExp(\\\\\\\"onupdate|run$\\\\\\\")\\\\n\\\\n\\\\n  _setupMessageHanlders() {\\\\n    this._connection.on(\\\\\\\"init\\\\\\\", this.init);\\\\n\\\\n    this._connection.on(\\\\\\\"authenticate\\\\\\\", credential => {\\\\n      Promise.resolve(this.authenticator(credential)).then(result => {\\\\n        if (result === true) {\\\\n          this._connection.emit({\\\\n            type: \\\\\\\"authenticated\\\\\\\",\\\\n            token: token\\\\n          });\\\\n        } else {\\\\n          this._connection.emit({\\\\n            type: \\\\\\\"authenticated\\\\\\\",\\\\n            error: result\\\\n          });\\\\n        }\\\\n      }).catch(e => {\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"authenticated\\\\\\\",\\\\n          error: e\\\\n        });\\\\n      });\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"execute\\\\\\\", data => {\\\\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"executed\\\\\\\"\\\\n        });\\\\n      }).catch(e => {\\\\n        console.error(e);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"executed\\\\\\\",\\\\n          error: e\\\\n        });\\\\n      });\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"method\\\\\\\", data => {\\\\n      let resolve, reject, method, args, result;\\\\n      let _interface = this._interface_store[data.pid];\\\\n\\\\n      const _method_context = _interface.__this__ || _interface;\\\\n\\\\n      if (!_interface) {\\\\n        if (data.promise) {\\\\n          [resolve, reject] = this._unwrap(data.promise, false);\\\\n          reject(`plugin api function is not avaialbe in \\\\\\\"${data.pid}\\\\\\\", the plugin maybe terminated.`);\\\\n        } else {\\\\n          console.error(`plugin api function is not avaialbe in ${data.pid}, the plugin maybe terminated.`);\\\\n        }\\\\n\\\\n        return;\\\\n      }\\\\n\\\\n      method = _interface[data.name];\\\\n      args = this._unwrap(data.args, true);\\\\n\\\\n      if (data.promise) {\\\\n        [resolve, reject] = this._unwrap(data.promise, false);\\\\n\\\\n        try {\\\\n          result = method.apply(_method_context, args);\\\\n\\\\n          if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\\"AsyncFunction\\\\\\\") {\\\\n            result.then(resolve).catch(reject);\\\\n          } else {\\\\n            resolve(result);\\\\n          }\\\\n        } catch (e) {\\\\n          console.error(this.config.name, e, method);\\\\n          reject(e);\\\\n        }\\\\n      } else {\\\\n        try {\\\\n          method.apply(_method_context, args);\\\\n        } catch (e) {\\\\n          console.error(this.config.name, e, method, args);\\\\n        }\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"callback\\\\\\\", data => {\\\\n      let resolve, reject, method, args, result;\\\\n\\\\n      if (data.promise) {\\\\n        [resolve, reject] = this._unwrap(data.promise, false);\\\\n\\\\n        try {\\\\n          method = this._store.fetch(data._rindex);\\\\n          args = this._unwrap(data.args, true);\\\\n\\\\n          if (!method) {\\\\n            throw new Error(\\\\\\\"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\\");\\\\n          }\\\\n\\\\n          result = method.apply(null, args);\\\\n\\\\n          if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\\"AsyncFunction\\\\\\\") {\\\\n            result.then(resolve).catch(reject);\\\\n          } else {\\\\n            resolve(result);\\\\n          }\\\\n        } catch (e) {\\\\n          console.error(this.config.name, e, method);\\\\n          reject(e);\\\\n        }\\\\n      } else {\\\\n        try {\\\\n          method = this._store.fetch(data._rindex);\\\\n          args = this._unwrap(data.args, true);\\\\n\\\\n          if (!method) {\\\\n            throw new Error(\\\\\\\"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\\");\\\\n          }\\\\n\\\\n          method.apply(null, args);\\\\n        } catch (e) {\\\\n          console.error(this.config.name, e, method, args);\\\\n        }\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"setInterface\\\\\\\", data => {\\\\n      this._setRemoteInterface(data.api);\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"getInterface\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"getInterface\\\\\\\");\\\\n\\\\n      if (this._local_api) this.sendInterface();else this.once(\\\\\\\"interfaceAvailable\\\\\\\", this.sendInterface);\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"interfaceSetAsRemote\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"interfaceSetAsRemote\\\\\\\");\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"disconnect\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"beforeDisconnect\\\\\\\");\\\\n\\\\n      this._connection.disconnect();\\\\n\\\\n      this._fire(\\\\\\\"disconnected\\\\\\\");\\\\n    });\\\\n  }\\\\n\\\\n  async authenticate(credential) {\\\\n    this.once(\\\\\\\"authenticated\\\\\\\", result => {\\\\n      if (!result.error) {\\\\n        resolve(result);\\\\n      } else {\\\\n        reject(result.error);\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"authenticate\\\\\\\",\\\\n      credential: credential\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Sends a requests to the remote site asking it to provide its\\\\n   * current interface\\\\n   */\\\\n\\\\n\\\\n  requestRemote() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"getInterface\\\\\\\"\\\\n    });\\\\n  }\\\\n\\\\n  _ndarray(typedArray, shape, dtype) {\\\\n    var _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][typedArray.constructor.name];\\\\n\\\\n    if (dtype && dtype !== _dtype) {\\\\n      throw \\\\\\\"dtype doesn't match the type of the array: \\\\\\\" + _dtype + \\\\\\\" != \\\\\\\" + dtype;\\\\n    }\\\\n\\\\n    shape = shape || [typedArray.length];\\\\n    return {\\\\n      _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n      _rvalue: typedArray,\\\\n      _rshape: shape,\\\\n      _rdtype: _dtype\\\\n    };\\\\n  }\\\\n  /**\\\\n   * Sets the new remote interface provided by the other site\\\\n   *\\\\n   * @param {Array} names list of function names\\\\n   */\\\\n\\\\n\\\\n  _setRemoteInterface(api) {\\\\n    this._interface_store[\\\\\\\"_rremote\\\\\\\"] = this._decode(api);\\\\n\\\\n    this._fire(\\\\\\\"remoteReady\\\\\\\");\\\\n\\\\n    this._reportRemoteSet();\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * method. When the generated function is called, it will send the\\\\n   * corresponding message to the remote site asking it to execute\\\\n   * the particular method of its interface\\\\n   *\\\\n   * @param {String} name of the remote method\\\\n   *\\\\n   * @returns {Function} wrapped remote method\\\\n   */\\\\n\\\\n\\\\n  _genRemoteMethod(name, interface_id) {\\\\n    var me = this;\\\\n\\\\n    var remoteMethod = function () {\\\\n      return new Promise((resolve, reject) => {\\\\n        let id = null;\\\\n\\\\n        try {\\\\n          id = me._method_refs.put(interface_id ? interface_id + \\\\\\\"/\\\\\\\" + name : name);\\\\n\\\\n          var wrapped_resolve = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return resolve.apply(this, arguments);\\\\n          };\\\\n\\\\n          var wrapped_reject = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return reject.apply(this, arguments);\\\\n          };\\\\n\\\\n          wrapped_resolve.__jailed_pairs__ = wrapped_reject;\\\\n          wrapped_reject.__jailed_pairs__ = wrapped_resolve;\\\\n          var args = Array.prototype.slice.call(arguments);\\\\n\\\\n          if (name === \\\\\\\"register\\\\\\\" || name === \\\\\\\"export\\\\\\\" || name === \\\\\\\"on\\\\\\\") {\\\\n            args = me._wrap(args, true);\\\\n          } else {\\\\n            args = me._wrap(args);\\\\n          }\\\\n\\\\n          var transferables = args.args.__transferables__;\\\\n          if (transferables) delete args.args.__transferables__;\\\\n\\\\n          me._connection.emit({\\\\n            type: \\\\\\\"method\\\\\\\",\\\\n            name: name,\\\\n            pid: interface_id,\\\\n            args: args,\\\\n            promise: me._wrap([wrapped_resolve, wrapped_reject])\\\\n          }, transferables);\\\\n        } catch (e) {\\\\n          if (id) me._method_refs.fetch(id);\\\\n          reject(`Failed to exectue remote method (interface: ${interface_id || me.id}, method: ${name}), error: ${e}`);\\\\n        }\\\\n      });\\\\n    };\\\\n\\\\n    remoteMethod.__remote_method = true;\\\\n    return remoteMethod;\\\\n  }\\\\n  /**\\\\n   * Sends a responce reporting that interface just provided by the\\\\n   * remote site was successfully set by this site as remote\\\\n   */\\\\n\\\\n\\\\n  _reportRemoteSet() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"interfaceSetAsRemote\\\\\\\"\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Prepares the provided set of remote method arguments for\\\\n   * sending to the remote site, replaces all the callbacks with\\\\n   * identifiers\\\\n   *\\\\n   * @param {Array} args to wrap\\\\n   *\\\\n   * @returns {Array} wrapped arguments\\\\n   */\\\\n\\\\n\\\\n  _encodeInterface(aObject) {\\\\n    let v, k, keys;\\\\n    const encoded_interface = {};\\\\n    aObject[\\\\\\\"_rid\\\\\\\"] = aObject[\\\\\\\"_rid\\\\\\\"] || Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"randId\\\\\\\"])(); // an object/array\\\\n\\\\n    if (aObject.constructor === Object || Array.isArray(aObject)) {\\\\n      keys = Object.keys(aObject);\\\\n    } // a class\\\\n    else if (aObject.constructor === Function) {\\\\n        throw new Error(\\\\\\\"Please instantiate the class before exportting it.\\\\\\\");\\\\n      } // instance of a class\\\\n      else if (aObject.constructor.constructor === Function) {\\\\n          keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\\\\n        } else {\\\\n          throw Error(\\\\\\\"Unsupported interface type\\\\\\\");\\\\n        }\\\\n\\\\n    const bObject = Array.isArray(aObject) ? [] : {};\\\\n\\\\n    for (k of keys) {\\\\n      if ([\\\\\\\"hasOwnProperty\\\\\\\", \\\\\\\"constructor\\\\\\\"].includes(k)) continue;\\\\n\\\\n      if (k.startsWith(\\\\\\\"_\\\\\\\")) {\\\\n        continue;\\\\n      }\\\\n\\\\n      v = aObject[k];\\\\n\\\\n      if (typeof v === \\\\\\\"function\\\\\\\") {\\\\n        bObject[k] = {\\\\n          _rtype: \\\\\\\"interface\\\\\\\",\\\\n          _rid: aObject[\\\\\\\"_rid\\\\\\\"],\\\\n          _rvalue: k\\\\n        };\\\\n        encoded_interface[k] = v;\\\\n      } else if (Object(v) !== v) {\\\\n        bObject[k] = {\\\\n          _rtype: \\\\\\\"argument\\\\\\\",\\\\n          _rvalue: v\\\\n        };\\\\n        encoded_interface[k] = v;\\\\n      } else if (typeof v === \\\\\\\"object\\\\\\\") {\\\\n        bObject[k] = this._encodeInterface(v);\\\\n      }\\\\n    }\\\\n\\\\n    this._interface_store[aObject[\\\\\\\"_rid\\\\\\\"]] = encoded_interface; // remove interface when closed\\\\n\\\\n    if (aObject.on && typeof aObject.on === \\\\\\\"function\\\\\\\") {\\\\n      aObject.on(\\\\\\\"close\\\\\\\", () => {\\\\n        delete this._interface_store[aObject[\\\\\\\"_rid\\\\\\\"]];\\\\n      });\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  _encode(aObject, as_interface) {\\\\n    const transferables = [];\\\\n\\\\n    if (!aObject) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    const _transfer = aObject._transfer;\\\\n    let bObject, v, k;\\\\n    const isarray = Array.isArray(aObject); //skip if already encoded\\\\n\\\\n    if (typeof aObject === \\\\\\\"object\\\\\\\" && aObject._rtype && aObject._rvalue) {\\\\n      return aObject;\\\\n    } //encode interfaces\\\\n\\\\n\\\\n    if (typeof aObject === \\\\\\\"object\\\\\\\" && !Array.isArray(aObject) && (aObject._rintf || as_interface)) {\\\\n      return this._encodeInterface(aObject);\\\\n    }\\\\n\\\\n    if (as_interface) {\\\\n      aObject[\\\\\\\"_rid\\\\\\\"] = aObject[\\\\\\\"_rid\\\\\\\"] || Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"randId\\\\\\\"])();\\\\n      this._interface_store[aObject[\\\\\\\"_rid\\\\\\\"]] = this._interface_store[aObject[\\\\\\\"_rid\\\\\\\"]] || (isarray ? [] : {});\\\\n    }\\\\n\\\\n    bObject = isarray ? [] : {};\\\\n\\\\n    for (k in aObject) {\\\\n      if ([\\\\\\\"hasOwnProperty\\\\\\\", \\\\\\\"constructor\\\\\\\"].includes(k)) continue;\\\\n\\\\n      if (isarray || aObject.hasOwnProperty(k)) {\\\\n        v = aObject[k];\\\\n\\\\n        if (v && typeof this._local_api._rpc_encode === \\\\\\\"function\\\\\\\") {\\\\n          const encoded_obj = this._local_api._rpc_encode(v);\\\\n\\\\n          if (encoded_obj && encoded_obj._ctype) {\\\\n            bObject[k] = {\\\\n              _rtype: \\\\\\\"custom\\\\\\\",\\\\n              _rvalue: encoded_obj,\\\\n              _rid: aObject[\\\\\\\"_rid\\\\\\\"]\\\\n            };\\\\n            continue;\\\\n          } // if the returned object does not contain _rtype, assuming the object has been transformed\\\\n          else if (encoded_obj !== undefined) {\\\\n              v = encoded_obj;\\\\n            }\\\\n        }\\\\n\\\\n        if (typeof v === \\\\\\\"function\\\\\\\") {\\\\n          if (as_interface) {\\\\n            const encoded_interface = this._interface_store[aObject[\\\\\\\"_rid\\\\\\\"]];\\\\n            bObject[k] = {\\\\n              _rtype: \\\\\\\"interface\\\\\\\",\\\\n              _rid: aObject[\\\\\\\"_rid\\\\\\\"],\\\\n              _rvalue: k\\\\n            };\\\\n            encoded_interface[k] = v;\\\\n            continue;\\\\n          }\\\\n\\\\n          let interfaceFuncName = null;\\\\n\\\\n          for (var name in this._local_api) {\\\\n            if (this._local_api.hasOwnProperty(name)) {\\\\n              if (name.startsWith(\\\\\\\"_\\\\\\\")) continue;\\\\n\\\\n              if (this._local_api[name] === v) {\\\\n                interfaceFuncName = name;\\\\n                break;\\\\n              }\\\\n            }\\\\n          } // search for prototypes\\\\n\\\\n\\\\n          var functions = Object.getOwnPropertyNames(Object.getPrototypeOf(this._local_api));\\\\n\\\\n          for (var i = 0; i < functions.length; i++) {\\\\n            var name_ = functions[i];\\\\n            if (name_.startsWith(\\\\\\\"_\\\\\\\")) continue;\\\\n\\\\n            if (this._local_api[name_] === v) {\\\\n              interfaceFuncName = name_;\\\\n              break;\\\\n            }\\\\n          }\\\\n\\\\n          if (!interfaceFuncName) {\\\\n            var id = this._store.put(v);\\\\n\\\\n            bObject[k] = {\\\\n              _rtype: \\\\\\\"callback\\\\\\\",\\\\n              _rvalue: v.constructor && v.constructor.name || id,\\\\n              _rindex: id\\\\n            };\\\\n          } else {\\\\n            bObject[k] = {\\\\n              _rtype: \\\\\\\"interface\\\\\\\",\\\\n              _rvalue: interfaceFuncName,\\\\n              _rid: \\\\\\\"_rlocal\\\\\\\"\\\\n            };\\\\n          }\\\\n        } else if (\\\\n        /*global tf*/\\\\n        typeof tf !== \\\\\\\"undefined\\\\\\\" && tf.Tensor && v instanceof tf.Tensor) {\\\\n          const v_buffer = v.dataSync();\\\\n\\\\n          if (v._transfer || _transfer) {\\\\n            transferables.push(v_buffer.buffer);\\\\n            delete v._transfer;\\\\n          }\\\\n\\\\n          bObject[k] = {\\\\n            _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n            _rvalue: v_buffer,\\\\n            _rshape: v.shape,\\\\n            _rdtype: v.dtype\\\\n          };\\\\n        } else if (\\\\n        /*global nj*/\\\\n        typeof nj !== \\\\\\\"undefined\\\\\\\" && nj.NdArray && v instanceof nj.NdArray) {\\\\n          var dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][v.selection.data.constructor.name];\\\\n\\\\n          if (v._transfer || _transfer) {\\\\n            transferables.push(v.selection.data.buffer);\\\\n            delete v._transfer;\\\\n          }\\\\n\\\\n          bObject[k] = {\\\\n            _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n            _rvalue: v.selection.data,\\\\n            _rshape: v.shape,\\\\n            _rdtype: dtype\\\\n          };\\\\n        } else if (v instanceof Error) {\\\\n          console.error(v);\\\\n          bObject[k] = {\\\\n            _rtype: \\\\\\\"error\\\\\\\",\\\\n            _rvalue: v.toString()\\\\n          };\\\\n        } else if (typeof File !== \\\\\\\"undefined\\\\\\\" && v instanceof File) {\\\\n          bObject[k] = {\\\\n            _rtype: \\\\\\\"file\\\\\\\",\\\\n            _rvalue: v,\\\\n            _rrelative_path: v.relativePath || v.webkitRelativePath\\\\n          };\\\\n        } // send objects supported by structure clone algorithm\\\\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\\\\n        else if (v !== Object(v) || v instanceof Boolean || v instanceof String || v instanceof Date || v instanceof RegExp || v instanceof Blob || v instanceof ImageData || typeof FileList !== \\\\\\\"undefined\\\\\\\" && v instanceof FileList) {\\\\n            bObject[k] = {\\\\n              _rtype: \\\\\\\"argument\\\\\\\",\\\\n              _rvalue: v\\\\n            };\\\\n          } else if (v instanceof ArrayBuffer) {\\\\n            if (v._transfer || _transfer) {\\\\n              transferables.push(v);\\\\n              delete v._transfer;\\\\n            }\\\\n\\\\n            bObject[k] = {\\\\n              _rtype: \\\\\\\"argument\\\\\\\",\\\\n              _rvalue: v\\\\n            };\\\\n          } else if (v instanceof ArrayBufferView) {\\\\n            if (v._transfer || _transfer) {\\\\n              transferables.push(v.buffer);\\\\n              delete v._transfer;\\\\n            }\\\\n\\\\n            bObject[k] = {\\\\n              _rtype: \\\\\\\"argument\\\\\\\",\\\\n              _rvalue: v\\\\n            };\\\\n          } // TODO: support also Map and Set\\\\n          // TODO: avoid object such as DynamicPlugin instance.\\\\n          else if (v._rintf) {\\\\n              bObject[k] = this._encode(v, true);\\\\n            } else if (typeof v === \\\\\\\"object\\\\\\\") {\\\\n              bObject[k] = this._encode(v, as_interface); // move transferables to the top level object\\\\n\\\\n              if (bObject[k].__transferables__) {\\\\n                for (var t = 0; t < bObject[k].__transferables__.length; t++) {\\\\n                  transferables.push(bObject[k].__transferables__[t]);\\\\n                }\\\\n\\\\n                delete bObject[k].__transferables__;\\\\n              }\\\\n            } else {\\\\n              throw \\\\\\\"imjoy-rpc: Unsupported data type \\\\\\\" + k + \\\\\\\",\\\\\\\" + v;\\\\n            }\\\\n      }\\\\n    }\\\\n\\\\n    if (transferables.length > 0) {\\\\n      bObject.__transferables__ = transferables;\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  _decode(aObject, callbackId, withPromise) {\\\\n    if (!aObject) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    var bObject, v, k;\\\\n\\\\n    if (aObject.hasOwnProperty(\\\\\\\"_rtype\\\\\\\") && aObject.hasOwnProperty(\\\\\\\"_rvalue\\\\\\\")) {\\\\n      if (aObject._rtype === \\\\\\\"custom\\\\\\\") {\\\\n        if (aObject._rvalue && typeof this._local_api._rpc_decode === \\\\\\\"function\\\\\\\") {\\\\n          bObject = this._local_api._rpc_decode(aObject._rvalue);\\\\n\\\\n          if (bObject === undefined) {\\\\n            bObject = aObject;\\\\n          }\\\\n        } else {\\\\n          bObject = aObject;\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\\"callback\\\\\\\") {\\\\n        bObject = this._genRemoteCallback(callbackId, aObject._rindex, withPromise);\\\\n      } else if (aObject._rtype === \\\\\\\"interface\\\\\\\") {\\\\n        const intfid = aObject._rid === \\\\\\\"_rlocal\\\\\\\" ? \\\\\\\"_rrmote\\\\\\\" : aObject._rid;\\\\n        bObject = this._interface_store[intfid] && this._interface_store[intfid][aObject._rvalue] || this._genRemoteMethod(aObject._rvalue, aObject._rid);\\\\n      } else if (aObject._rtype === \\\\\\\"ndarray\\\\\\\") {\\\\n        /*global nj tf*/\\\\n        //create build array/tensor if used in the plugin\\\\n        if (typeof nj !== \\\\\\\"undefined\\\\\\\" && nj.array) {\\\\n          if (Array.isArray(aObject._rvalue)) {\\\\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          bObject = nj.array(aObject._rvalue, aObject._rdtype).reshape(aObject._rshape);\\\\n        } else if (typeof tf !== \\\\\\\"undefined\\\\\\\" && tf.Tensor) {\\\\n          if (Array.isArray(aObject._rvalue)) {\\\\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          bObject = tf.tensor(aObject._rvalue, aObject._rshape, aObject._rdtype);\\\\n        } else {\\\\n          //keep it as regular if transfered to the main app\\\\n          bObject = aObject;\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\\"error\\\\\\\") {\\\\n        bObject = new Error(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\\"file\\\\\\\") {\\\\n        bObject = aObject._rvalue; //patch relativePath\\\\n\\\\n        bObject.relativePath = aObject._rrelative_path;\\\\n      } else if (aObject._rtype === \\\\\\\"argument\\\\\\\") {\\\\n        bObject = aObject._rvalue;\\\\n      }\\\\n\\\\n      return bObject;\\\\n    } else {\\\\n      var isarray = Array.isArray(aObject);\\\\n      bObject = isarray ? [] : {};\\\\n\\\\n      for (k in aObject) {\\\\n        if (isarray || aObject.hasOwnProperty(k)) {\\\\n          v = aObject[k];\\\\n\\\\n          if (typeof v === \\\\\\\"object\\\\\\\" || Array.isArray(v)) {\\\\n            bObject[k] = this._decode(v, callbackId, withPromise);\\\\n          }\\\\n        }\\\\n      }\\\\n\\\\n      return bObject;\\\\n    }\\\\n  }\\\\n\\\\n  _wrap(args, as_interface) {\\\\n    var wrapped = this._encode(args, as_interface);\\\\n\\\\n    var result = {\\\\n      args: wrapped\\\\n    };\\\\n    return result;\\\\n  }\\\\n  /**\\\\n   * Unwraps the set of arguments delivered from the remote site,\\\\n   * replaces all callback identifiers with a function which will\\\\n   * initiate sending that callback identifier back to other site\\\\n   *\\\\n   * @param {Object} args to unwrap\\\\n   *\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Array} unwrapped args\\\\n   */\\\\n\\\\n\\\\n  _unwrap(args, withPromise) {\\\\n    // var called = false;\\\\n    // wraps each callback so that the only one could be called\\\\n    // var once(cb) {\\\\n    //     return function() {\\\\n    //         if (!called) {\\\\n    //             called = true;\\\\n    //             return cb.apply(this, arguments);\\\\n    //         } else {\\\\n    //             var msg =\\\\n    //               'A callback from this set has already been executed';\\\\n    //             throw new Error(msg);\\\\n    //         }\\\\n    //     };\\\\n    // }\\\\n    var result = this._decode(args.args, args.callbackId, withPromise);\\\\n\\\\n    return result;\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * callback. When the generated function is called, it will send\\\\n   * the corresponding message to the remote site asking it to\\\\n   * execute the particular callback previously saved during a call\\\\n   * by the remote site a method from the interface of this site\\\\n   *\\\\n   * @param {Number} id of the remote callback to execute\\\\n   * @param {Number} argNum argument index of the callback\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Function} wrapped remote callback\\\\n   */\\\\n\\\\n\\\\n  _genRemoteCallback(id, argNum, withPromise) {\\\\n    var me = this;\\\\n    var remoteCallback;\\\\n\\\\n    if (withPromise) {\\\\n      remoteCallback = function () {\\\\n        return new Promise((resolve, reject) => {\\\\n          var args = me._wrap(Array.prototype.slice.call(arguments));\\\\n\\\\n          var transferables = args.args.__transferables__;\\\\n          if (transferables) delete args.args.__transferables__;\\\\n          resolve.__jailed_pairs__ = reject;\\\\n          reject.__jailed_pairs__ = resolve;\\\\n\\\\n          try {\\\\n            me._connection.emit({\\\\n              type: \\\\\\\"callback\\\\\\\",\\\\n              id: id,\\\\n              _rindex: argNum,\\\\n              args: args,\\\\n              // pid :  me.id,\\\\n              promise: me._wrap([resolve, reject])\\\\n            }, transferables);\\\\n          } catch (e) {\\\\n            reject(`Failed to exectue remote callback (id: ${id}, argNum: ${argNum}).`);\\\\n          }\\\\n        });\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    } else {\\\\n      remoteCallback = function () {\\\\n        var args = me._wrap(Array.prototype.slice.call(arguments));\\\\n\\\\n        var transferables = args.args.__transferables__;\\\\n        if (transferables) delete args.args.__transferables__;\\\\n        return me._connection.emit({\\\\n          type: \\\\\\\"callback\\\\\\\",\\\\n          id: id,\\\\n          _rindex: argNum,\\\\n          args: args // pid :  me.id\\\\n\\\\n        }, transferables);\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Sends the notification message and breaks the connection\\\\n   */\\\\n\\\\n\\\\n  disconnect() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"disconnect\\\\\\\"\\\\n    });\\\\n\\\\n    setTimeout(() => {\\\\n      this._connection.disconnect();\\\\n    }, 2000);\\\\n  }\\\\n\\\\n}\\\\n/**\\\\n * ReferenceStore is a special object which stores other objects\\\\n * and provides the references (number) instead. This reference\\\\n * may then be sent over a json-based communication channel (IPC\\\\n * to another Node.js process or a message to the Worker). Other\\\\n * site may then provide the reference in the responce message\\\\n * implying the given object should be activated.\\\\n *\\\\n * Primary usage for the ReferenceStore is a storage for the\\\\n * callbacks, which therefore makes it possible to initiate a\\\\n * callback execution by the opposite site (which normally cannot\\\\n * directly execute functions over the communication channel).\\\\n *\\\\n * Each stored object can only be fetched once and is not\\\\n * available for the second time. Each stored object must be\\\\n * fetched, since otherwise it will remain stored forever and\\\\n * consume memory.\\\\n *\\\\n * Stored object indeces are simply the numbers, which are however\\\\n * released along with the objects, and are later reused again (in\\\\n * order to postpone the overflow, which should not likely happen,\\\\n * but anyway).\\\\n */\\\\n\\\\nclass ReferenceStore {\\\\n  constructor() {\\\\n    this._store = {}; // stored object\\\\n\\\\n    this._indices = [0]; // smallest available indices\\\\n\\\\n    this._readyHandler = function () {};\\\\n\\\\n    this._busyHandler = function () {};\\\\n\\\\n    this._readyHandler();\\\\n  }\\\\n  /**\\\\n   * call handler when the store is empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onReady(readyHandler) {\\\\n    this._readyHandler = readyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * call handler when the store is not empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onBusy(busyHandler) {\\\\n    this._busyHandler = busyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * get the length of the store\\\\n   *\\\\n   */\\\\n\\\\n\\\\n  getStack() {\\\\n    return Object.keys(this._store).length;\\\\n  }\\\\n  /**\\\\n   * @function _genId() generates the new reference id\\\\n   *\\\\n   * @returns {Number} smallest available id and reserves it\\\\n   */\\\\n\\\\n\\\\n  _genId() {\\\\n    var id;\\\\n\\\\n    if (this._indices.length === 1) {\\\\n      id = this._indices[0]++;\\\\n    } else {\\\\n      id = this._indices.shift();\\\\n    }\\\\n\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Releases the given reference id so that it will be available by\\\\n   * another object stored\\\\n   *\\\\n   * @param {Number} id to release\\\\n   */\\\\n\\\\n\\\\n  _releaseId(id) {\\\\n    for (var i = 0; i < this._indices.length; i++) {\\\\n      if (id < this._indices[i]) {\\\\n        this._indices.splice(i, 0, id);\\\\n\\\\n        break;\\\\n      }\\\\n    } // cleaning-up the sequence tail\\\\n\\\\n\\\\n    for (i = this._indices.length - 1; i >= 0; i--) {\\\\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\\\\n        this._indices.pop();\\\\n      } else {\\\\n        break;\\\\n      }\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Stores the given object and returns the refernce id instead\\\\n   *\\\\n   * @param {Object} obj to store\\\\n   *\\\\n   * @returns {Number} reference id of the stored object\\\\n   */\\\\n\\\\n\\\\n  put(obj) {\\\\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\\\\n      this._busyHandler();\\\\n    }\\\\n\\\\n    var id = this._genId();\\\\n\\\\n    this._store[id] = obj;\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Retrieves previously stored object and releases its reference\\\\n   *\\\\n   * @param {Number} id of an object to retrieve\\\\n   */\\\\n\\\\n\\\\n  fetch(id) {\\\\n    var obj = this._store[id];\\\\n\\\\n    if (obj && !obj.__remote_method) {\\\\n      delete this._store[id];\\\\n\\\\n      this._releaseId(id);\\\\n\\\\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\\\\n        this._readyHandler();\\\\n      }\\\\n    }\\\\n\\\\n    if (obj && obj.__jailed_pairs__) {\\\\n      const _id = getKeyByValue(this._store, obj.__jailed_pairs__);\\\\n\\\\n      this.fetch(_id);\\\\n    }\\\\n\\\\n    return obj;\\\\n  }\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/rpc.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/utils.js\\\":\\n/*!**********************!*\\\\\\n  !*** ./src/utils.js ***!\\n  \\\\**********************/\\n/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin, EventManager */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"randId\\\\\\\", function() { return randId; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"dtypeToTypedArray\\\\\\\", function() { return dtypeToTypedArray; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"typedArrayToDtype\\\\\\\", function() { return typedArrayToDtype; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"cacheRequirements\\\\\\\", function() { return cacheRequirements; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"setupServiceWorker\\\\\\\", function() { return setupServiceWorker; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"urlJoin\\\\\\\", function() { return urlJoin; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"EventManager\\\\\\\", function() { return EventManager; });\\\\nfunction randId() {\\\\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\\\\n}\\\\nconst dtypeToTypedArray = {\\\\n  int8: \\\\\\\"Int8Array\\\\\\\",\\\\n  int16: \\\\\\\"Int16Array\\\\\\\",\\\\n  int32: \\\\\\\"Int32Array\\\\\\\",\\\\n  uint8: \\\\\\\"Uint8Array\\\\\\\",\\\\n  uint16: \\\\\\\"Uint16Array\\\\\\\",\\\\n  uint32: \\\\\\\"Uint32Array\\\\\\\",\\\\n  float32: \\\\\\\"Float32Array\\\\\\\",\\\\n  float64: \\\\\\\"Float64Array\\\\\\\",\\\\n  array: \\\\\\\"Array\\\\\\\"\\\\n};\\\\nconst typedArrayToDtype = {\\\\n  Int8Array: \\\\\\\"int8\\\\\\\",\\\\n  Int16Array: \\\\\\\"int16\\\\\\\",\\\\n  Int32Array: \\\\\\\"int32\\\\\\\",\\\\n  Uint8Array: \\\\\\\"uint8\\\\\\\",\\\\n  Uint16Array: \\\\\\\"uint16\\\\\\\",\\\\n  Uint32Array: \\\\\\\"uint32\\\\\\\",\\\\n  Float32Array: \\\\\\\"float32\\\\\\\",\\\\n  Float64Array: \\\\\\\"float64\\\\\\\",\\\\n  Array: \\\\\\\"array\\\\\\\"\\\\n};\\\\n\\\\nfunction cacheUrlInServiceWorker(url) {\\\\n  return new Promise(function (resolve, reject) {\\\\n    const message = {\\\\n      command: \\\\\\\"add\\\\\\\",\\\\n      url: url\\\\n    };\\\\n\\\\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\\\\n      reject(\\\\\\\"Service worker is not supported.\\\\\\\");\\\\n      return;\\\\n    }\\\\n\\\\n    const messageChannel = new MessageChannel();\\\\n\\\\n    messageChannel.port1.onmessage = function (event) {\\\\n      if (event.data && event.data.error) {\\\\n        reject(event.data.error);\\\\n      } else {\\\\n        resolve(event.data && event.data.result);\\\\n      }\\\\n    };\\\\n\\\\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\\\\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\\\\n    } else {\\\\n      reject(\\\\\\\"Service worker controller is not available\\\\\\\");\\\\n    }\\\\n  });\\\\n}\\\\n\\\\nasync function cacheRequirements(requirements) {\\\\n  if (!Array.isArray(requirements)) {\\\\n    requirementsm.code.requirements = [requirements];\\\\n  }\\\\n\\\\n  if (requirements && requirements.length > 0) {\\\\n    for (let req of requirements) {\\\\n      //remove prefix\\\\n      if (req.startsWith(\\\\\\\"js:\\\\\\\")) req = req.slice(3);\\\\n      if (req.startsWith(\\\\\\\"css:\\\\\\\")) req = req.slice(4);\\\\n      if (req.startsWith(\\\\\\\"cache:\\\\\\\")) req = req.slice(6);\\\\n      if (!req.startsWith(\\\\\\\"http\\\\\\\")) continue;\\\\n      await cacheUrlInServiceWorker(req).catch(e => {\\\\n        console.error(e);\\\\n      });\\\\n    }\\\\n  }\\\\n}\\\\nfunction setupServiceWorker(targetOrigin, cacheCallback) {\\\\n  // register service worker for offline access\\\\n  if (\\\\\\\"serviceWorker\\\\\\\" in navigator) {\\\\n    window.addEventListener(\\\\\\\"load\\\\\\\", function () {\\\\n      navigator.serviceWorker.register(\\\\\\\"/plugin-service-worker.js\\\\\\\").then(function (registration) {\\\\n        // Registration was successful\\\\n        console.log(\\\\\\\"ServiceWorker registration successful with scope: \\\\\\\", registration.scope);\\\\n      }, function (err) {\\\\n        // registration failed :(\\\\n        console.log(\\\\\\\"ServiceWorker registration failed: \\\\\\\", err);\\\\n      });\\\\n      targetOrigin = targetOrigin || \\\\\\\"*\\\\\\\";\\\\n      cacheCallback = cacheCallback || cacheRequirements;\\\\n\\\\n      if (cacheCallback && typeof cacheCallback !== \\\\\\\"function\\\\\\\") {\\\\n        throw new Error(\\\\\\\"config.cache_requirements must be a function\\\\\\\");\\\\n      }\\\\n\\\\n      window.addEventListener(\\\\\\\"message\\\\\\\", function (e) {\\\\n        if (targetOrigin === \\\\\\\"*\\\\\\\" || e.origin === targetOrigin) {\\\\n          const m = e.data;\\\\n\\\\n          if (m.type === \\\\\\\"cacheRequirements\\\\\\\") {\\\\n            cacheCallback(m.requirements);\\\\n          }\\\\n        }\\\\n      });\\\\n    });\\\\n  }\\\\n} //#Source https://bit.ly/2neWfJ2\\\\n\\\\nfunction urlJoin(...args) {\\\\n  return args.join(\\\\\\\"/\\\\\\\").replace(/[\\\\\\\\/]+/g, \\\\\\\"/\\\\\\\").replace(/^(.+):\\\\\\\\//, \\\\\\\"$1://\\\\\\\").replace(/^file:/, \\\\\\\"file:/\\\\\\\").replace(/\\\\\\\\/(\\\\\\\\?|&|#[^!])/g, \\\\\\\"$1\\\\\\\").replace(/\\\\\\\\?/g, \\\\\\\"&\\\\\\\").replace(\\\\\\\"&\\\\\\\", \\\\\\\"?\\\\\\\");\\\\n}\\\\nclass EventManager {\\\\n  constructor(debug) {\\\\n    this._event_handlers = {};\\\\n    this._once_handlers = {};\\\\n    this._debug = debug;\\\\n  }\\\\n\\\\n  on(event, handler) {\\\\n    if (!this._event_handlers[event]) {\\\\n      this._event_handlers[event] = [];\\\\n    }\\\\n\\\\n    this._event_handlers[event].push(handler);\\\\n  }\\\\n\\\\n  once(event, handler) {\\\\n    handler.___event_run_once = true;\\\\n    this.on(event, handler);\\\\n  }\\\\n\\\\n  off(event, handler) {\\\\n    if (!event && !handler) {\\\\n      // remove all events handlers\\\\n      this._event_handlers = {};\\\\n    } else if (event && !handler) {\\\\n      // remove all hanlders for the event\\\\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\\\\n    } else {\\\\n      // remove a specific handler\\\\n      if (this._event_handlers[event]) {\\\\n        const idx = this._event_handlers[event].indexOf(handler);\\\\n\\\\n        if (idx >= 0) {\\\\n          this._event_handlers[event].splice(idx, 1);\\\\n        }\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  _fire(event, data) {\\\\n    if (this._event_handlers[event]) {\\\\n      var i = this._event_handlers[event].length;\\\\n\\\\n      while (i--) {\\\\n        const handler = this._event_handlers[event][i];\\\\n\\\\n        try {\\\\n          handler(data);\\\\n        } catch (e) {\\\\n          console.error(e);\\\\n        } finally {\\\\n          if (handler.___event_run_once) {\\\\n            this._event_handlers[event].splice(i, 1);\\\\n          }\\\\n        }\\\\n      }\\\\n    } else {\\\\n      if (this._debug) {\\\\n        console.warn(\\\\\\\"unhandled event\\\\\\\", event, data);\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/utils.js\\\\n\\\");\\n\\n/***/ })\\n\\n/******/ });\", null);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\n");

/***/ }),

/***/ "./src/pluginCore.js":
/*!***************************!*\
  !*** ./src/pluginCore.js ***!
  \***************************/
/*! exports provided: connectRPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"connectRPC\", function() { return connectRPC; });\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony import */ var _pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pluginIframe.js */ \"./src/pluginIframe.js\");\n/**\n * Core plugin script loaded into the plugin process/thread.\n *\n * Initializes the plugin-site API global methods.\n */\n\n\nfunction connectRPC(connection, config) {\n  config = config || {};\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\"RPC\"](connection, config);\n  rpc.on(\"getInterface\", function () {\n    launchConnected();\n  });\n  rpc.on(\"remoteReady\", function () {\n    const api = rpc.getRemote() || {};\n\n    if (api.export) {\n      throw new Error(\"`export` is a reserved function name\");\n    }\n\n    if (api.onload) {\n      throw new Error(\"`onload` is a reserved function name\");\n    }\n\n    if (api.dispose) {\n      throw new Error(\"`dispose` is a reserved function name\");\n    }\n\n    api.export = function (_interface) {\n      rpc.setInterface(_interface);\n    };\n\n    api.onLoad = function (handler) {\n      handler = checkHandler(handler);\n\n      if (connected) {\n        handler();\n      } else {\n        connectedHandlers.push(handler);\n      }\n    };\n\n    api.dispose = function (_interface) {\n      rpc.disconnect();\n    };\n\n    if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n      self.api = api;\n      self.postMessage({\n        type: \"imjoy_remote_api_ready\"\n      });\n    } else if (typeof window) {\n      window.dispatchEvent(new CustomEvent(\"imjoy_remote_api_ready\", {\n        detail: api\n      }));\n    }\n  });\n  let connected = false;\n  const connectedHandlers = [];\n\n  const launchConnected = function () {\n    if (!connected) {\n      connected = true;\n      let handler;\n\n      while (handler = connectedHandlers.pop()) {\n        handler();\n      }\n    }\n  };\n\n  const checkHandler = function (handler) {\n    const type = typeof handler;\n\n    if (type !== \"function\") {\n      const msg = \"A function may only be subsribed to the event, \" + type + \" was provided instead\";\n      throw new Error(msg);\n    }\n\n    return handler;\n  };\n\n  return rpc;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDL3NyYy9wbHVnaW5Db3JlLmpzP2E0NzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3JlIHBsdWdpbiBzY3JpcHQgbG9hZGVkIGludG8gdGhlIHBsdWdpbiBwcm9jZXNzL3RocmVhZC5cbiAqXG4gKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLXNpdGUgQVBJIGdsb2JhbCBtZXRob2RzLlxuICovXG5pbXBvcnQgeyBSUEMgfSBmcm9tIFwiLi9ycGMuanNcIjtcbmltcG9ydCB7IENvbm5lY3Rpb24gfSBmcm9tIFwiLi9wbHVnaW5JZnJhbWUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RSUEMoY29ubmVjdGlvbiwgY29uZmlnKSB7XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZyk7XG4gIHJwYy5vbihcImdldEludGVyZmFjZVwiLCBmdW5jdGlvbigpIHtcbiAgICBsYXVuY2hDb25uZWN0ZWQoKTtcbiAgfSk7XG5cbiAgcnBjLm9uKFwicmVtb3RlUmVhZHlcIiwgZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgYXBpID0gcnBjLmdldFJlbW90ZSgpIHx8IHt9O1xuICAgIGlmIChhcGkuZXhwb3J0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZXhwb3J0YCBpcyBhIHJlc2VydmVkIGZ1bmN0aW9uIG5hbWVcIik7XG4gICAgfVxuICAgIGlmIChhcGkub25sb2FkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgb25sb2FkYCBpcyBhIHJlc2VydmVkIGZ1bmN0aW9uIG5hbWVcIik7XG4gICAgfVxuICAgIGlmIChhcGkuZGlzcG9zZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGRpc3Bvc2VgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgYXBpLmV4cG9ydCA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICAgIHJwYy5zZXRJbnRlcmZhY2UoX2ludGVyZmFjZSk7XG4gICAgfTtcbiAgICBhcGkub25Mb2FkID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlciA9IGNoZWNrSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgIGlmIChjb25uZWN0ZWQpIHtcbiAgICAgICAgaGFuZGxlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29ubmVjdGVkSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGFwaS5kaXNwb3NlID0gZnVuY3Rpb24oX2ludGVyZmFjZSkge1xuICAgICAgcnBjLmRpc2Nvbm5lY3QoKTtcbiAgICB9O1xuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGVcbiAgICApIHtcbiAgICAgIHNlbGYuYXBpID0gYXBpO1xuICAgICAgc2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cpIHtcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICBuZXcgQ3VzdG9tRXZlbnQoXCJpbWpveV9yZW1vdGVfYXBpX3JlYWR5XCIsIHsgZGV0YWlsOiBhcGkgfSlcbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICBsZXQgY29ubmVjdGVkID0gZmFsc2U7XG4gIGNvbnN0IGNvbm5lY3RlZEhhbmRsZXJzID0gW107XG5cbiAgY29uc3QgbGF1bmNoQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgIGNvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAgIGxldCBoYW5kbGVyO1xuICAgICAgd2hpbGUgKChoYW5kbGVyID0gY29ubmVjdGVkSGFuZGxlcnMucG9wKCkpKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2hlY2tIYW5kbGVyID0gZnVuY3Rpb24oaGFuZGxlcikge1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgaGFuZGxlcjtcbiAgICBpZiAodHlwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCBtc2cgPVxuICAgICAgICBcIkEgZnVuY3Rpb24gbWF5IG9ubHkgYmUgc3Vic3JpYmVkIHRvIHRoZSBldmVudCwgXCIgK1xuICAgICAgICB0eXBlICtcbiAgICAgICAgXCIgd2FzIHByb3ZpZGVkIGluc3RlYWRcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbiAgICByZXR1cm4gaGFuZGxlcjtcbiAgfTtcblxuICByZXR1cm4gcnBjO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/pluginCore.js\n");

/***/ }),

/***/ "./src/pluginIframe.js":
/*!*****************************!*\
  !*** ./src/pluginIframe.js ***!
  \*****************************/
/*! exports provided: Connection, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Connection\", function() { return Connection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return setupIframe; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \"./src/pluginCore.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n // Create a new, plain <span> element\n\nfunction _htmlToElement(html) {\n  var template = document.createElement(\"template\");\n  html = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = html;\n  return template.content.firstChild;\n}\n\nvar _importScript = function (url) {\n  //url is URL of external file, implementationCode is the code\n  //to be called from the file, location is the location to\n  //insert the <script> element\n  return new Promise((resolve, reject) => {\n    var scriptTag = document.createElement(\"script\");\n    scriptTag.src = url;\n    scriptTag.type = \"text/javascript\";\n    scriptTag.onload = resolve;\n\n    scriptTag.onreadystatechange = function () {\n      if (this.readyState === \"loaded\" || this.readyState === \"complete\") {\n        resolve();\n      }\n    };\n\n    scriptTag.onerror = reject;\n    document.head.appendChild(scriptTag);\n  });\n}; // support importScripts outside web worker\n\n\nasync function importScripts() {\n  var args = Array.prototype.slice.call(arguments),\n      len = args.length,\n      i = 0;\n\n  for (; i < len; i++) {\n    await _importScript(args[i]);\n  }\n}\n\nclass Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"EventManager\"] {\n  constructor(config) {\n    super(config && config.debug);\n    this.config = config || {};\n  }\n\n  connect() {\n    this.config.target_origin = this.config.target_origin || \"*\"; // this will call handleEvent function\n\n    window.addEventListener(\"message\", this);\n    this.emit({\n      type: \"initialized\",\n      config: this.config\n    });\n\n    this._fire(\"connected\");\n  }\n\n  handleEvent(e) {\n    if (e.type === \"message\" && this.config.target_origin === \"*\" || e.origin === this.config.target_origin) {\n      this._fire(e.data.type, e.data);\n    }\n  }\n\n  disconnect() {\n    this._fire(\"beforeDisconnect\");\n\n    window.removeEventListener(\"message\", this);\n\n    this._fire(\"disconnected\");\n  }\n\n  emit(data) {\n    let transferables;\n\n    if (data.__transferables__) {\n      transferables = data.__transferables__;\n      delete data.__transferables__;\n    }\n\n    parent.postMessage(data, this.config.target_origin, transferables);\n  }\n\n  async execute(code) {\n    try {\n      if (code.type === \"requirements\") {\n        if (code.requirements && (Array.isArray(code.requirements) || typeof code.requirements === \"string\")) {\n          try {\n            var link_node;\n            code.requirements = typeof code.requirements === \"string\" ? [code.requirements] : code.requirements;\n\n            if (Array.isArray(code.requirements)) {\n              for (var i = 0; i < code.requirements.length; i++) {\n                if (code.requirements[i].toLowerCase().endsWith(\".css\") || code.requirements[i].startsWith(\"css:\")) {\n                  if (code.requirements[i].startsWith(\"css:\")) {\n                    code.requirements[i] = code.requirements[i].slice(4);\n                  }\n\n                  link_node = document.createElement(\"link\");\n                  link_node.rel = \"stylesheet\";\n                  link_node.href = code.requirements[i];\n                  document.head.appendChild(link_node);\n                } else if (code.requirements[i].toLowerCase().endsWith(\".js\") || code.requirements[i].startsWith(\"js:\")) {\n                  if (code.requirements[i].startsWith(\"js:\")) {\n                    code.requirements[i] = code.requirements[i].slice(3);\n                  }\n\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith(\"http\")) {\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith(\"cache:\")) {//ignore cache\n                } else {\n                  console.log(\"Unprocessed requirements url: \" + code.requirements[i]);\n                }\n              }\n            } else {\n              throw \"unsupported requirements definition\";\n            }\n          } catch (e) {\n            throw \"failed to import required scripts: \" + code.requirements.toString();\n          }\n        }\n      } else if (code.type === \"script\") {\n        if (code.src) {\n          var script_node = document.createElement(\"script\");\n          script_node.setAttribute(\"type\", code.attrs.type);\n          script_node.setAttribute(\"src\", code.src);\n          document.head.appendChild(script_node);\n        } else {\n          if (code.content && (!code.attrs.type || code.attrs.type === \"text/javascript\")) {\n            // document.addEventListener(\"DOMContentLoaded\", function(){\n            eval(code.content); // });\n          } else {\n            var node = document.createElement(\"script\");\n            node.setAttribute(\"type\", code.attrs.type);\n            node.appendChild(document.createTextNode(code.content));\n            document.body.appendChild(node);\n          }\n        }\n      } else if (code.type === \"style\") {\n        const style_node = document.createElement(\"style\");\n\n        if (code.src) {\n          style_node.src = code.src;\n        }\n\n        style_node.innerHTML = code.content;\n        document.head.appendChild(style_node);\n      } else if (code.type === \"link\") {\n        const link_node_ = document.createElement(\"link\");\n\n        if (code.rel) {\n          link_node_.rel = code.rel;\n        }\n\n        if (code.href) {\n          link_node_.href = code.href;\n        }\n\n        if (code.attrs && code.attrs.type) {\n          link_node_.type = code.attrs.type;\n        }\n\n        document.head.appendChild(link_node_);\n      } else if (code.type === \"html\") {\n        document.body.appendChild(_htmlToElement(code.content));\n      } else {\n        throw \"unsupported code type.\";\n      }\n\n      parent.postMessage({\n        type: \"executed\"\n      }, this.config.target_origin);\n    } catch (e) {\n      console.error(\"failed to execute scripts: \", code, e);\n      parent.postMessage({\n        type: \"executed\",\n        error: e.stack || String(e)\n      }, this.config.target_origin);\n    }\n  }\n\n}\nfunction setupIframe(config) {\n  config = config || {};\n  config.dedicated_thread = false;\n  config.lang = \"javascript\";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\"API_VERSION\"];\n  const conn = new Connection(config);\n  Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\"connectRPC\"])(conn, config);\n  conn.connect();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pluginIframe.js\n");

/***/ }),

/***/ "./src/pluginWebPython.js":
/*!********************************!*\
  !*** ./src/pluginWebPython.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return setupWebPython; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \"./src/pluginCore.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony import */ var _pluginIframe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginIframe */ \"./src/pluginIframe.js\");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n // Create a new, plain <span> element\n\nfunction _htmlToElement(html) {\n  var template = document.createElement(\"template\");\n  html = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = html;\n  return template.content.firstChild;\n}\n\nconst _importScript = function (url) {\n  //url is URL of external file, implementationCode is the code\n  //to be called from the file, location is the location to\n  //insert the <script> element\n  return new Promise((resolve, reject) => {\n    var scriptTag = document.createElement(\"script\");\n    scriptTag.src = url;\n    scriptTag.onload = resolve;\n\n    scriptTag.onreadystatechange = function () {\n      if (this.readyState === \"loaded\" || this.readyState === \"complete\") {\n        resolve();\n      }\n    };\n\n    scriptTag.onerror = reject;\n    document.head.appendChild(scriptTag);\n  });\n}; // support importScripts outside web worker\n\n\nasync function importScripts() {\n  var args = Array.prototype.slice.call(arguments),\n      len = args.length,\n      i = 0;\n\n  for (; i < len; i++) {\n    await _importScript(args[i]);\n  }\n}\n\nconst startup_script = `\nfrom js import api\nimport sys\nfrom types import ModuleType\nm = ModuleType(\"imjoy\")\nsys.modules[m.__name__] = m\nm.__file__ = m.__name__ + \".py\"\nm.api = api\n`;\nlet _export_plugin_api = null;\n\nconst execute_python_code = function (code) {\n  try {\n    if (!_export_plugin_api) {\n      _export_plugin_api = window.api.export;\n\n      window.api.export = function (p) {\n        if (typeof p === \"object\") {\n          const _api = {};\n\n          for (let k in p) {\n            if (!k.startsWith(\"_\")) {\n              _api[k] = p[k];\n            }\n          }\n\n          _export_plugin_api(_api);\n        } else if (typeof p === \"function\") {\n          const _api = {};\n          const getattr = window.pyodide.pyimport(\"getattr\");\n          const hasattr = window.pyodide.pyimport(\"hasattr\");\n\n          for (let k of Object.getOwnPropertyNames(p)) {\n            if (!k.startsWith(\"_\") && hasattr(p, k)) {\n              const func = getattr(p, k);\n\n              _api[k] = function () {\n                return func(...Array.prototype.slice.call(arguments));\n              };\n            }\n          }\n\n          _export_plugin_api(_api);\n        } else {\n          throw \"unsupported api export\";\n        }\n      };\n    }\n\n    window.pyodide.runPython(startup_script);\n    window.pyodide.runPython(code.content);\n  } catch (e) {\n    throw e;\n  }\n};\n\nfunction setupPyodide() {\n  return new Promise((resolve, reject) => {\n    window.languagePluginUrl = \"https://static.imjoy.io/pyodide/\";\n    importScripts(\"https://static.imjoy.io/pyodide/pyodide.js\").then(() => {\n      // hack for matplotlib etc.\n      window.iodide = {\n        output: {\n          element: function element(type) {\n            const div = document.createElement(type);\n            const output = document.getElementById(\"output\") || document.body;\n            output.appendChild(div);\n            return div;\n          }\n        }\n      };\n      window.languagePluginLoader.then(() => {\n        // pyodide is now ready to use...\n        console.log(window.pyodide.runPython(\"import sys\\nsys.version\"));\n        resolve();\n      }).catch(reject);\n    });\n  });\n} // connection object for the RPC constructor\n\n\nclass Connection extends _pluginIframe__WEBPACK_IMPORTED_MODULE_2__[\"Connection\"] {\n  constructor(config) {\n    super(config);\n  }\n\n  async execute(code) {\n    if (code.type === \"requirements\") {\n      if (code.requirements) {\n        code.requirements = typeof code.requirements === \"string\" ? [code.requirements] : code.requirements;\n\n        if (Array.isArray(code.requirements)) {\n          const python_packages = [];\n\n          for (var i = 0; i < code.requirements.length; i++) {\n            if (code.requirements[i].toLowerCase().endsWith(\".css\") || code.requirements[i].startsWith(\"css:\")) {\n              if (code.requirements[i].startsWith(\"css:\")) {\n                code.requirements[i] = code.requirements[i].slice(4);\n              }\n\n              link_node = document.createElement(\"link\");\n              link_node.rel = \"stylesheet\";\n              link_node.href = code.requirements[i];\n              document.head.appendChild(link_node);\n            } else if ( // code.requirements[i].toLowerCase().endsWith(\".js\") ||\n            code.requirements[i].startsWith(\"js:\")) {\n              if (code.requirements[i].startsWith(\"js:\")) {\n                code.requirements[i] = code.requirements[i].slice(3);\n              }\n\n              await importScripts(code.requirements[i]);\n            } else if (code.requirements[i].startsWith(\"cache:\")) {//ignore cache\n            } else if (code.requirements[i].toLowerCase().endsWith(\".js\") || code.requirements[i].startsWith(\"package:\")) {\n              if (code.requirements[i].startsWith(\"package:\")) {\n                code.requirements[i] = code.requirements[i].slice(8);\n              }\n\n              python_packages.push(code.requirements[i]);\n            } else if (code.requirements[i].startsWith(\"http:\") || code.requirements[i].startsWith(\"https:\")) {\n              console.log(\"Unprocessed requirements url: \" + code.requirements[i]);\n            } else {\n              python_packages.push(code.requirements[i]);\n            }\n          }\n\n          await window.pyodide.loadPackage(python_packages);\n        } else {\n          throw \"unsupported requirements definition\";\n        }\n      }\n    } else if (code.type === \"script\") {\n      if (code.src) {\n        var script_node = document.createElement(\"script\");\n        script_node.setAttribute(\"type\", code.attrs.type);\n        script_node.setAttribute(\"src\", code.src);\n        document.head.appendChild(script_node);\n      } else {\n        if (code.content && code.lang === \"python\") {\n          execute_python_code(code);\n        } else if (code.content && code.lang === \"javascript\") {\n          try {\n            eval(code.content);\n          } catch (e) {\n            console.error(e.message, e.stack);\n            throw e;\n          }\n        } else {\n          const node = document.createElement(\"script\");\n          node.setAttribute(\"type\", code.attrs.type);\n          node.appendChild(document.createTextNode(code.content));\n          document.body.appendChild(node);\n        }\n      }\n    } else if (code.type === \"style\") {\n      const style_node = document.createElement(\"style\");\n\n      if (code.src) {\n        style_node.src = code.src;\n      }\n\n      style_node.innerHTML = code.content;\n      document.head.appendChild(style_node);\n    } else if (code.type === \"link\") {\n      const link_node = document.createElement(\"link\");\n\n      if (code.rel) {\n        link_node.rel = code.rel;\n      }\n\n      if (code.href) {\n        link_node.href = code.href;\n      }\n\n      if (code.attrs && code.attrs.type) {\n        link_node.type = code.attrs.type;\n      }\n\n      document.head.appendChild(link_node);\n    } else if (code.type === \"html\") {\n      document.body.appendChild(_htmlToElement(code.content));\n    } else {\n      throw \"unsupported code type.\";\n    }\n  }\n\n}\n\nfunction setupWebPython(config) {\n  config = config || {};\n  config.debug = true;\n  config.dedicated_thread = false;\n  config.lang = \"python\";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\"API_VERSION\"];\n  const conn = new Connection(config);\n  setupPyodide().then(() => {\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\"connectRPC\"])(conn, config);\n    conn.connect();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pluginWebPython.js\n");

/***/ }),

/***/ "./src/rpc.js":
/*!********************!*\
  !*** ./src/rpc.js ***!
  \********************/
/*! exports provided: API_VERSION, RPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"API_VERSION\", function() { return API_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return RPC; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/**\n * Contains the RPC object used both by the application\n * site, and by each plugin\n */\n\nconst API_VERSION = \"0.2.1\";\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\n\nfunction _appendBuffer(buffer1, buffer2) {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find(key => object[key] === value);\n}\n/**\n * RPC object represents a single site in the\n * communication protocol between the application and the plugin\n *\n * @param {Object} connection a special object allowing to send\n * and receive messages from the opposite site (basically it\n * should only provide send() and onMessage() methods)\n */\n\n\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"EventManager\"] {\n  constructor(connection, config) {\n    super(config && config.debug);\n    this._connection = connection;\n    this.config = config || {};\n    this._interface_store = {};\n    this._local_api = null; // make sure there is an execute function\n\n    const name = this.config.name;\n\n    this._connection.execute = this._connection.execute || function () {\n      throw new Error(`connection.execute not implemented (in \"${name}\")`);\n    };\n\n    this._store = new ReferenceStore();\n    this._method_refs = new ReferenceStore();\n\n    this._method_refs.onReady(() => {\n      this._fire(\"remoteIdle\");\n    });\n\n    this._method_refs.onBusy(() => {\n      this._fire(\"remoteBusy\");\n    });\n\n    this._setupMessageHanlders();\n  }\n\n  init() {\n    this._connection.emit({\n      type: \"initialized\",\n      config: this.config\n    });\n  }\n  /**\n   * Set a handler to be called when received a responce from the\n   * remote site reporting that the previously provided interface\n   * has been successfully set as remote for that site\n   *\n   * @param {Function} handler\n   */\n\n\n  getRemoteCallStack() {\n    return this._method_refs.getStack();\n  }\n  /**\n   * @returns {Object} set of remote interface methods\n   */\n\n\n  getRemote() {\n    return this._interface_store[\"_rremote\"];\n  }\n  /**\n   * Sets the interface of this site making it available to the\n   * remote site by sending a message with a set of methods names\n   *\n   * @param {Object} _interface to set\n   */\n\n\n  setInterface(_interface) {\n    if (this.config.forwarding_functions) {\n      for (let func_name of this.config.forwarding_functions) {\n        const _remote = this._interface_store[\"_rremote\"];\n\n        if (_remote[func_name]) {\n          if (_interface.constructor === Object) {\n            if (!_interface[func_name]) {\n              _interface[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          } else if (_interface.constructor.constructor === Function) {\n            if (!_interface.constructor.prototype[func_name]) {\n              _interface.constructor.prototype[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          }\n        }\n      }\n    }\n\n    this._local_api = _interface;\n\n    this._fire(\"interfaceAvailable\");\n  }\n  /**\n   * Sends the actual interface to the remote site upon it was\n   * updated or by a special request of the remote site\n   */\n\n\n  sendInterface() {\n    if (!this._local_api) {\n      throw new Error(\"interface is not set.\");\n    }\n\n    this._local_api._rid = \"_rlocal\";\n\n    const api = this._encode(this._local_api, true);\n\n    this._connection.emit({\n      type: \"setInterface\",\n      api: api\n    });\n  }\n\n  setAuthenticator(authenticator) {\n    this.authenticator = authenticator;\n  }\n\n  setAuthorizer(authorizer) {\n    this.authorizer = authorizer;\n  }\n  /**\n   * Handles a message from the remote site\n   */\n  // var callback_reg = new RegExp(\"onupdate|run$\")\n\n\n  _setupMessageHanlders() {\n    this._connection.on(\"init\", this.init);\n\n    this._connection.on(\"authenticate\", credential => {\n      Promise.resolve(this.authenticator(credential)).then(result => {\n        if (result === true) {\n          this._connection.emit({\n            type: \"authenticated\",\n            token: token\n          });\n        } else {\n          this._connection.emit({\n            type: \"authenticated\",\n            error: result\n          });\n        }\n      }).catch(e => {\n        this._connection.emit({\n          type: \"authenticated\",\n          error: e\n        });\n      });\n    });\n\n    this._connection.on(\"execute\", data => {\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\n        this._connection.emit({\n          type: \"executed\"\n        });\n      }).catch(e => {\n        console.error(e);\n\n        this._connection.emit({\n          type: \"executed\",\n          error: e\n        });\n      });\n    });\n\n    this._connection.on(\"method\", data => {\n      let resolve, reject, method, args, result;\n      let _interface = this._interface_store[data.pid];\n\n      const _method_context = _interface.__this__ || _interface;\n\n      if (!_interface) {\n        if (data.promise) {\n          [resolve, reject] = this._unwrap(data.promise, false);\n          reject(`plugin api function is not avaialbe in \"${data.pid}\", the plugin maybe terminated.`);\n        } else {\n          console.error(`plugin api function is not avaialbe in ${data.pid}, the plugin maybe terminated.`);\n        }\n\n        return;\n      }\n\n      method = _interface[data.name];\n      args = this._unwrap(data.args, true);\n\n      if (data.promise) {\n        [resolve, reject] = this._unwrap(data.promise, false);\n\n        try {\n          result = method.apply(_method_context, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === \"AsyncFunction\") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } catch (e) {\n          console.error(this.config.name, e, method);\n          reject(e);\n        }\n      } else {\n        try {\n          method.apply(_method_context, args);\n        } catch (e) {\n          console.error(this.config.name, e, method, args);\n        }\n      }\n    });\n\n    this._connection.on(\"callback\", data => {\n      let resolve, reject, method, args, result;\n\n      if (data.promise) {\n        [resolve, reject] = this._unwrap(data.promise, false);\n\n        try {\n          method = this._store.fetch(data._rindex);\n          args = this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error(\"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\");\n          }\n\n          result = method.apply(null, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === \"AsyncFunction\") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } catch (e) {\n          console.error(this.config.name, e, method);\n          reject(e);\n        }\n      } else {\n        try {\n          method = this._store.fetch(data._rindex);\n          args = this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error(\"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\");\n          }\n\n          method.apply(null, args);\n        } catch (e) {\n          console.error(this.config.name, e, method, args);\n        }\n      }\n    });\n\n    this._connection.on(\"setInterface\", data => {\n      this._setRemoteInterface(data.api);\n    });\n\n    this._connection.on(\"getInterface\", () => {\n      this._fire(\"getInterface\");\n\n      if (this._local_api) this.sendInterface();else this.once(\"interfaceAvailable\", this.sendInterface);\n    });\n\n    this._connection.on(\"interfaceSetAsRemote\", () => {\n      this._fire(\"interfaceSetAsRemote\");\n    });\n\n    this._connection.on(\"disconnect\", () => {\n      this._fire(\"beforeDisconnect\");\n\n      this._connection.disconnect();\n\n      this._fire(\"disconnected\");\n    });\n  }\n\n  async authenticate(credential) {\n    this.once(\"authenticated\", result => {\n      if (!result.error) {\n        resolve(result);\n      } else {\n        reject(result.error);\n      }\n    });\n\n    this._connection.emit({\n      type: \"authenticate\",\n      credential: credential\n    });\n  }\n  /**\n   * Sends a requests to the remote site asking it to provide its\n   * current interface\n   */\n\n\n  requestRemote() {\n    this._connection.emit({\n      type: \"getInterface\"\n    });\n  }\n\n  _ndarray(typedArray, shape, dtype) {\n    var _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][typedArray.constructor.name];\n\n    if (dtype && dtype !== _dtype) {\n      throw \"dtype doesn't match the type of the array: \" + _dtype + \" != \" + dtype;\n    }\n\n    shape = shape || [typedArray.length];\n    return {\n      _rtype: \"ndarray\",\n      _rvalue: typedArray,\n      _rshape: shape,\n      _rdtype: _dtype\n    };\n  }\n  /**\n   * Sets the new remote interface provided by the other site\n   *\n   * @param {Array} names list of function names\n   */\n\n\n  _setRemoteInterface(api) {\n    this._interface_store[\"_rremote\"] = this._decode(api);\n\n    this._fire(\"remoteReady\");\n\n    this._reportRemoteSet();\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * method. When the generated function is called, it will send the\n   * corresponding message to the remote site asking it to execute\n   * the particular method of its interface\n   *\n   * @param {String} name of the remote method\n   *\n   * @returns {Function} wrapped remote method\n   */\n\n\n  _genRemoteMethod(name, interface_id) {\n    var me = this;\n\n    var remoteMethod = function () {\n      return new Promise((resolve, reject) => {\n        let id = null;\n\n        try {\n          id = me._method_refs.put(interface_id ? interface_id + \"/\" + name : name);\n\n          var wrapped_resolve = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return resolve.apply(this, arguments);\n          };\n\n          var wrapped_reject = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return reject.apply(this, arguments);\n          };\n\n          wrapped_resolve.__jailed_pairs__ = wrapped_reject;\n          wrapped_reject.__jailed_pairs__ = wrapped_resolve;\n          var args = Array.prototype.slice.call(arguments);\n\n          if (name === \"register\" || name === \"export\" || name === \"on\") {\n            args = me._wrap(args, true);\n          } else {\n            args = me._wrap(args);\n          }\n\n          var transferables = args.args.__transferables__;\n          if (transferables) delete args.args.__transferables__;\n\n          me._connection.emit({\n            type: \"method\",\n            name: name,\n            pid: interface_id,\n            args: args,\n            promise: me._wrap([wrapped_resolve, wrapped_reject])\n          }, transferables);\n        } catch (e) {\n          if (id) me._method_refs.fetch(id);\n          reject(`Failed to exectue remote method (interface: ${interface_id || me.id}, method: ${name}), error: ${e}`);\n        }\n      });\n    };\n\n    remoteMethod.__remote_method = true;\n    return remoteMethod;\n  }\n  /**\n   * Sends a responce reporting that interface just provided by the\n   * remote site was successfully set by this site as remote\n   */\n\n\n  _reportRemoteSet() {\n    this._connection.emit({\n      type: \"interfaceSetAsRemote\"\n    });\n  }\n  /**\n   * Prepares the provided set of remote method arguments for\n   * sending to the remote site, replaces all the callbacks with\n   * identifiers\n   *\n   * @param {Array} args to wrap\n   *\n   * @returns {Array} wrapped arguments\n   */\n\n\n  _encodeInterface(aObject) {\n    let v, k, keys;\n    const encoded_interface = {};\n    aObject[\"_rid\"] = aObject[\"_rid\"] || Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"randId\"])(); // an object/array\n\n    if (aObject.constructor === Object || Array.isArray(aObject)) {\n      keys = Object.keys(aObject);\n    } // a class\n    else if (aObject.constructor === Function) {\n        throw new Error(\"Please instantiate the class before exportting it.\");\n      } // instance of a class\n      else if (aObject.constructor.constructor === Function) {\n          keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\n        } else {\n          throw Error(\"Unsupported interface type\");\n        }\n\n    const bObject = Array.isArray(aObject) ? [] : {};\n\n    for (k of keys) {\n      if ([\"hasOwnProperty\", \"constructor\"].includes(k)) continue;\n\n      if (k.startsWith(\"_\")) {\n        continue;\n      }\n\n      v = aObject[k];\n\n      if (typeof v === \"function\") {\n        bObject[k] = {\n          _rtype: \"interface\",\n          _rid: aObject[\"_rid\"],\n          _rvalue: k\n        };\n        encoded_interface[k] = v;\n      } else if (Object(v) !== v) {\n        bObject[k] = {\n          _rtype: \"argument\",\n          _rvalue: v\n        };\n        encoded_interface[k] = v;\n      } else if (typeof v === \"object\") {\n        bObject[k] = this._encodeInterface(v);\n      }\n    }\n\n    this._interface_store[aObject[\"_rid\"]] = encoded_interface; // remove interface when closed\n\n    if (aObject.on && typeof aObject.on === \"function\") {\n      aObject.on(\"close\", () => {\n        delete this._interface_store[aObject[\"_rid\"]];\n      });\n    }\n\n    return bObject;\n  }\n\n  _encode(aObject, as_interface) {\n    const transferables = [];\n\n    if (!aObject) {\n      return aObject;\n    }\n\n    const _transfer = aObject._transfer;\n    let bObject, v, k;\n    const isarray = Array.isArray(aObject); //skip if already encoded\n\n    if (typeof aObject === \"object\" && aObject._rtype && aObject._rvalue) {\n      return aObject;\n    } //encode interfaces\n\n\n    if (typeof aObject === \"object\" && !Array.isArray(aObject) && (aObject._rintf || as_interface)) {\n      return this._encodeInterface(aObject);\n    }\n\n    if (as_interface) {\n      aObject[\"_rid\"] = aObject[\"_rid\"] || Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"randId\"])();\n      this._interface_store[aObject[\"_rid\"]] = this._interface_store[aObject[\"_rid\"]] || (isarray ? [] : {});\n    }\n\n    bObject = isarray ? [] : {};\n\n    for (k in aObject) {\n      if ([\"hasOwnProperty\", \"constructor\"].includes(k)) continue;\n\n      if (isarray || aObject.hasOwnProperty(k)) {\n        v = aObject[k];\n\n        if (v && typeof this._local_api._rpc_encode === \"function\") {\n          const encoded_obj = this._local_api._rpc_encode(v);\n\n          if (encoded_obj && encoded_obj._ctype) {\n            bObject[k] = {\n              _rtype: \"custom\",\n              _rvalue: encoded_obj,\n              _rid: aObject[\"_rid\"]\n            };\n            continue;\n          } // if the returned object does not contain _rtype, assuming the object has been transformed\n          else if (encoded_obj !== undefined) {\n              v = encoded_obj;\n            }\n        }\n\n        if (typeof v === \"function\") {\n          if (as_interface) {\n            const encoded_interface = this._interface_store[aObject[\"_rid\"]];\n            bObject[k] = {\n              _rtype: \"interface\",\n              _rid: aObject[\"_rid\"],\n              _rvalue: k\n            };\n            encoded_interface[k] = v;\n            continue;\n          }\n\n          let interfaceFuncName = null;\n\n          for (var name in this._local_api) {\n            if (this._local_api.hasOwnProperty(name)) {\n              if (name.startsWith(\"_\")) continue;\n\n              if (this._local_api[name] === v) {\n                interfaceFuncName = name;\n                break;\n              }\n            }\n          } // search for prototypes\n\n\n          var functions = Object.getOwnPropertyNames(Object.getPrototypeOf(this._local_api));\n\n          for (var i = 0; i < functions.length; i++) {\n            var name_ = functions[i];\n            if (name_.startsWith(\"_\")) continue;\n\n            if (this._local_api[name_] === v) {\n              interfaceFuncName = name_;\n              break;\n            }\n          }\n\n          if (!interfaceFuncName) {\n            var id = this._store.put(v);\n\n            bObject[k] = {\n              _rtype: \"callback\",\n              _rvalue: v.constructor && v.constructor.name || id,\n              _rindex: id\n            };\n          } else {\n            bObject[k] = {\n              _rtype: \"interface\",\n              _rvalue: interfaceFuncName,\n              _rid: \"_rlocal\"\n            };\n          }\n        } else if (\n        /*global tf*/\n        typeof tf !== \"undefined\" && tf.Tensor && v instanceof tf.Tensor) {\n          const v_buffer = v.dataSync();\n\n          if (v._transfer || _transfer) {\n            transferables.push(v_buffer.buffer);\n            delete v._transfer;\n          }\n\n          bObject[k] = {\n            _rtype: \"ndarray\",\n            _rvalue: v_buffer,\n            _rshape: v.shape,\n            _rdtype: v.dtype\n          };\n        } else if (\n        /*global nj*/\n        typeof nj !== \"undefined\" && nj.NdArray && v instanceof nj.NdArray) {\n          var dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][v.selection.data.constructor.name];\n\n          if (v._transfer || _transfer) {\n            transferables.push(v.selection.data.buffer);\n            delete v._transfer;\n          }\n\n          bObject[k] = {\n            _rtype: \"ndarray\",\n            _rvalue: v.selection.data,\n            _rshape: v.shape,\n            _rdtype: dtype\n          };\n        } else if (v instanceof Error) {\n          console.error(v);\n          bObject[k] = {\n            _rtype: \"error\",\n            _rvalue: v.toString()\n          };\n        } else if (typeof File !== \"undefined\" && v instanceof File) {\n          bObject[k] = {\n            _rtype: \"file\",\n            _rvalue: v,\n            _rrelative_path: v.relativePath || v.webkitRelativePath\n          };\n        } // send objects supported by structure clone algorithm\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n        else if (v !== Object(v) || v instanceof Boolean || v instanceof String || v instanceof Date || v instanceof RegExp || v instanceof Blob || v instanceof ImageData || typeof FileList !== \"undefined\" && v instanceof FileList) {\n            bObject[k] = {\n              _rtype: \"argument\",\n              _rvalue: v\n            };\n          } else if (v instanceof ArrayBuffer) {\n            if (v._transfer || _transfer) {\n              transferables.push(v);\n              delete v._transfer;\n            }\n\n            bObject[k] = {\n              _rtype: \"argument\",\n              _rvalue: v\n            };\n          } else if (v instanceof ArrayBufferView) {\n            if (v._transfer || _transfer) {\n              transferables.push(v.buffer);\n              delete v._transfer;\n            }\n\n            bObject[k] = {\n              _rtype: \"argument\",\n              _rvalue: v\n            };\n          } // TODO: support also Map and Set\n          // TODO: avoid object such as DynamicPlugin instance.\n          else if (v._rintf) {\n              bObject[k] = this._encode(v, true);\n            } else if (typeof v === \"object\") {\n              bObject[k] = this._encode(v, as_interface); // move transferables to the top level object\n\n              if (bObject[k].__transferables__) {\n                for (var t = 0; t < bObject[k].__transferables__.length; t++) {\n                  transferables.push(bObject[k].__transferables__[t]);\n                }\n\n                delete bObject[k].__transferables__;\n              }\n            } else {\n              throw \"imjoy-rpc: Unsupported data type \" + k + \",\" + v;\n            }\n      }\n    }\n\n    if (transferables.length > 0) {\n      bObject.__transferables__ = transferables;\n    }\n\n    return bObject;\n  }\n\n  _decode(aObject, callbackId, withPromise) {\n    if (!aObject) {\n      return aObject;\n    }\n\n    var bObject, v, k;\n\n    if (aObject.hasOwnProperty(\"_rtype\") && aObject.hasOwnProperty(\"_rvalue\")) {\n      if (aObject._rtype === \"custom\") {\n        if (aObject._rvalue && typeof this._local_api._rpc_decode === \"function\") {\n          bObject = this._local_api._rpc_decode(aObject._rvalue);\n\n          if (bObject === undefined) {\n            bObject = aObject;\n          }\n        } else {\n          bObject = aObject;\n        }\n      } else if (aObject._rtype === \"callback\") {\n        bObject = this._genRemoteCallback(callbackId, aObject._rindex, withPromise);\n      } else if (aObject._rtype === \"interface\") {\n        const intfid = aObject._rid === \"_rlocal\" ? \"_rrmote\" : aObject._rid;\n        bObject = this._interface_store[intfid] && this._interface_store[intfid][aObject._rvalue] || this._genRemoteMethod(aObject._rvalue, aObject._rid);\n      } else if (aObject._rtype === \"ndarray\") {\n        /*global nj tf*/\n        //create build array/tensor if used in the plugin\n        if (typeof nj !== \"undefined\" && nj.array) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          bObject = nj.array(aObject._rvalue, aObject._rdtype).reshape(aObject._rshape);\n        } else if (typeof tf !== \"undefined\" && tf.Tensor) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          bObject = tf.tensor(aObject._rvalue, aObject._rshape, aObject._rdtype);\n        } else {\n          //keep it as regular if transfered to the main app\n          bObject = aObject;\n        }\n      } else if (aObject._rtype === \"error\") {\n        bObject = new Error(aObject._rvalue);\n      } else if (aObject._rtype === \"file\") {\n        bObject = aObject._rvalue; //patch relativePath\n\n        bObject.relativePath = aObject._rrelative_path;\n      } else if (aObject._rtype === \"argument\") {\n        bObject = aObject._rvalue;\n      }\n\n      return bObject;\n    } else {\n      var isarray = Array.isArray(aObject);\n      bObject = isarray ? [] : {};\n\n      for (k in aObject) {\n        if (isarray || aObject.hasOwnProperty(k)) {\n          v = aObject[k];\n\n          if (typeof v === \"object\" || Array.isArray(v)) {\n            bObject[k] = this._decode(v, callbackId, withPromise);\n          }\n        }\n      }\n\n      return bObject;\n    }\n  }\n\n  _wrap(args, as_interface) {\n    var wrapped = this._encode(args, as_interface);\n\n    var result = {\n      args: wrapped\n    };\n    return result;\n  }\n  /**\n   * Unwraps the set of arguments delivered from the remote site,\n   * replaces all callback identifiers with a function which will\n   * initiate sending that callback identifier back to other site\n   *\n   * @param {Object} args to unwrap\n   *\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Array} unwrapped args\n   */\n\n\n  _unwrap(args, withPromise) {\n    // var called = false;\n    // wraps each callback so that the only one could be called\n    // var once(cb) {\n    //     return function() {\n    //         if (!called) {\n    //             called = true;\n    //             return cb.apply(this, arguments);\n    //         } else {\n    //             var msg =\n    //               'A callback from this set has already been executed';\n    //             throw new Error(msg);\n    //         }\n    //     };\n    // }\n    var result = this._decode(args.args, args.callbackId, withPromise);\n\n    return result;\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * callback. When the generated function is called, it will send\n   * the corresponding message to the remote site asking it to\n   * execute the particular callback previously saved during a call\n   * by the remote site a method from the interface of this site\n   *\n   * @param {Number} id of the remote callback to execute\n   * @param {Number} argNum argument index of the callback\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Function} wrapped remote callback\n   */\n\n\n  _genRemoteCallback(id, argNum, withPromise) {\n    var me = this;\n    var remoteCallback;\n\n    if (withPromise) {\n      remoteCallback = function () {\n        return new Promise((resolve, reject) => {\n          var args = me._wrap(Array.prototype.slice.call(arguments));\n\n          var transferables = args.args.__transferables__;\n          if (transferables) delete args.args.__transferables__;\n          resolve.__jailed_pairs__ = reject;\n          reject.__jailed_pairs__ = resolve;\n\n          try {\n            me._connection.emit({\n              type: \"callback\",\n              id: id,\n              _rindex: argNum,\n              args: args,\n              // pid :  me.id,\n              promise: me._wrap([resolve, reject])\n            }, transferables);\n          } catch (e) {\n            reject(`Failed to exectue remote callback (id: ${id}, argNum: ${argNum}).`);\n          }\n        });\n      };\n\n      return remoteCallback;\n    } else {\n      remoteCallback = function () {\n        var args = me._wrap(Array.prototype.slice.call(arguments));\n\n        var transferables = args.args.__transferables__;\n        if (transferables) delete args.args.__transferables__;\n        return me._connection.emit({\n          type: \"callback\",\n          id: id,\n          _rindex: argNum,\n          args: args // pid :  me.id\n\n        }, transferables);\n      };\n\n      return remoteCallback;\n    }\n  }\n  /**\n   * Sends the notification message and breaks the connection\n   */\n\n\n  disconnect() {\n    this._connection.emit({\n      type: \"disconnect\"\n    });\n\n    setTimeout(() => {\n      this._connection.disconnect();\n    }, 2000);\n  }\n\n}\n/**\n * ReferenceStore is a special object which stores other objects\n * and provides the references (number) instead. This reference\n * may then be sent over a json-based communication channel (IPC\n * to another Node.js process or a message to the Worker). Other\n * site may then provide the reference in the responce message\n * implying the given object should be activated.\n *\n * Primary usage for the ReferenceStore is a storage for the\n * callbacks, which therefore makes it possible to initiate a\n * callback execution by the opposite site (which normally cannot\n * directly execute functions over the communication channel).\n *\n * Each stored object can only be fetched once and is not\n * available for the second time. Each stored object must be\n * fetched, since otherwise it will remain stored forever and\n * consume memory.\n *\n * Stored object indeces are simply the numbers, which are however\n * released along with the objects, and are later reused again (in\n * order to postpone the overflow, which should not likely happen,\n * but anyway).\n */\n\nclass ReferenceStore {\n  constructor() {\n    this._store = {}; // stored object\n\n    this._indices = [0]; // smallest available indices\n\n    this._readyHandler = function () {};\n\n    this._busyHandler = function () {};\n\n    this._readyHandler();\n  }\n  /**\n   * call handler when the store is empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onReady(readyHandler) {\n    this._readyHandler = readyHandler || function () {};\n  }\n  /**\n   * call handler when the store is not empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onBusy(busyHandler) {\n    this._busyHandler = busyHandler || function () {};\n  }\n  /**\n   * get the length of the store\n   *\n   */\n\n\n  getStack() {\n    return Object.keys(this._store).length;\n  }\n  /**\n   * @function _genId() generates the new reference id\n   *\n   * @returns {Number} smallest available id and reserves it\n   */\n\n\n  _genId() {\n    var id;\n\n    if (this._indices.length === 1) {\n      id = this._indices[0]++;\n    } else {\n      id = this._indices.shift();\n    }\n\n    return id;\n  }\n  /**\n   * Releases the given reference id so that it will be available by\n   * another object stored\n   *\n   * @param {Number} id to release\n   */\n\n\n  _releaseId(id) {\n    for (var i = 0; i < this._indices.length; i++) {\n      if (id < this._indices[i]) {\n        this._indices.splice(i, 0, id);\n\n        break;\n      }\n    } // cleaning-up the sequence tail\n\n\n    for (i = this._indices.length - 1; i >= 0; i--) {\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\n        this._indices.pop();\n      } else {\n        break;\n      }\n    }\n  }\n  /**\n   * Stores the given object and returns the refernce id instead\n   *\n   * @param {Object} obj to store\n   *\n   * @returns {Number} reference id of the stored object\n   */\n\n\n  put(obj) {\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\n      this._busyHandler();\n    }\n\n    var id = this._genId();\n\n    this._store[id] = obj;\n    return id;\n  }\n  /**\n   * Retrieves previously stored object and releases its reference\n   *\n   * @param {Number} id of an object to retrieve\n   */\n\n\n  fetch(id) {\n    var obj = this._store[id];\n\n    if (obj && !obj.__remote_method) {\n      delete this._store[id];\n\n      this._releaseId(id);\n\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\n        this._readyHandler();\n      }\n    }\n\n    if (obj && obj.__jailed_pairs__) {\n      const _id = getKeyByValue(this._store, obj.__jailed_pairs__);\n\n      this.fetch(_id);\n    }\n\n    return obj;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/rpc.js\n");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin, EventManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randId\", function() { return randId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dtypeToTypedArray\", function() { return dtypeToTypedArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"typedArrayToDtype\", function() { return typedArrayToDtype; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cacheRequirements\", function() { return cacheRequirements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupServiceWorker\", function() { return setupServiceWorker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"urlJoin\", function() { return urlJoin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventManager\", function() { return EventManager; });\nfunction randId() {\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\n}\nconst dtypeToTypedArray = {\n  int8: \"Int8Array\",\n  int16: \"Int16Array\",\n  int32: \"Int32Array\",\n  uint8: \"Uint8Array\",\n  uint16: \"Uint16Array\",\n  uint32: \"Uint32Array\",\n  float32: \"Float32Array\",\n  float64: \"Float64Array\",\n  array: \"Array\"\n};\nconst typedArrayToDtype = {\n  Int8Array: \"int8\",\n  Int16Array: \"int16\",\n  Int32Array: \"int32\",\n  Uint8Array: \"uint8\",\n  Uint16Array: \"uint16\",\n  Uint32Array: \"uint32\",\n  Float32Array: \"float32\",\n  Float64Array: \"float64\",\n  Array: \"array\"\n};\n\nfunction cacheUrlInServiceWorker(url) {\n  return new Promise(function (resolve, reject) {\n    const message = {\n      command: \"add\",\n      url: url\n    };\n\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\n      reject(\"Service worker is not supported.\");\n      return;\n    }\n\n    const messageChannel = new MessageChannel();\n\n    messageChannel.port1.onmessage = function (event) {\n      if (event.data && event.data.error) {\n        reject(event.data.error);\n      } else {\n        resolve(event.data && event.data.result);\n      }\n    };\n\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n    } else {\n      reject(\"Service worker controller is not available\");\n    }\n  });\n}\n\nasync function cacheRequirements(requirements) {\n  if (!Array.isArray(requirements)) {\n    requirementsm.code.requirements = [requirements];\n  }\n\n  if (requirements && requirements.length > 0) {\n    for (let req of requirements) {\n      //remove prefix\n      if (req.startsWith(\"js:\")) req = req.slice(3);\n      if (req.startsWith(\"css:\")) req = req.slice(4);\n      if (req.startsWith(\"cache:\")) req = req.slice(6);\n      if (!req.startsWith(\"http\")) continue;\n      await cacheUrlInServiceWorker(req).catch(e => {\n        console.error(e);\n      });\n    }\n  }\n}\nfunction setupServiceWorker(targetOrigin, cacheCallback) {\n  // register service worker for offline access\n  if (\"serviceWorker\" in navigator) {\n    window.addEventListener(\"load\", function () {\n      navigator.serviceWorker.register(\"/plugin-service-worker.js\").then(function (registration) {\n        // Registration was successful\n        console.log(\"ServiceWorker registration successful with scope: \", registration.scope);\n      }, function (err) {\n        // registration failed :(\n        console.log(\"ServiceWorker registration failed: \", err);\n      });\n      targetOrigin = targetOrigin || \"*\";\n      cacheCallback = cacheCallback || cacheRequirements;\n\n      if (cacheCallback && typeof cacheCallback !== \"function\") {\n        throw new Error(\"config.cache_requirements must be a function\");\n      }\n\n      window.addEventListener(\"message\", function (e) {\n        if (targetOrigin === \"*\" || e.origin === targetOrigin) {\n          const m = e.data;\n\n          if (m.type === \"cacheRequirements\") {\n            cacheCallback(m.requirements);\n          }\n        }\n      });\n    });\n  }\n} //#Source https://bit.ly/2neWfJ2\n\nfunction urlJoin(...args) {\n  return args.join(\"/\").replace(/[\\/]+/g, \"/\").replace(/^(.+):\\//, \"$1://\").replace(/^file:/, \"file:/\").replace(/\\/(\\?|&|#[^!])/g, \"$1\").replace(/\\?/g, \"&\").replace(\"&\", \"?\");\n}\nclass EventManager {\n  constructor(debug) {\n    this._event_handlers = {};\n    this._once_handlers = {};\n    this._debug = debug;\n  }\n\n  on(event, handler) {\n    if (!this._event_handlers[event]) {\n      this._event_handlers[event] = [];\n    }\n\n    this._event_handlers[event].push(handler);\n  }\n\n  once(event, handler) {\n    handler.___event_run_once = true;\n    this.on(event, handler);\n  }\n\n  off(event, handler) {\n    if (!event && !handler) {\n      // remove all events handlers\n      this._event_handlers = {};\n    } else if (event && !handler) {\n      // remove all hanlders for the event\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\n    } else {\n      // remove a specific handler\n      if (this._event_handlers[event]) {\n        const idx = this._event_handlers[event].indexOf(handler);\n\n        if (idx >= 0) {\n          this._event_handlers[event].splice(idx, 1);\n        }\n      }\n    }\n  }\n\n  _fire(event, data) {\n    if (this._event_handlers[event]) {\n      var i = this._event_handlers[event].length;\n\n      while (i--) {\n        const handler = this._event_handlers[event][i];\n\n        try {\n          handler(data);\n        } catch (e) {\n          console.error(e);\n        } finally {\n          if (handler.___event_run_once) {\n            this._event_handlers[event].splice(i, 1);\n          }\n        }\n      }\n    } else {\n      if (this._debug) {\n        console.warn(\"unhandled event\", event, data);\n      }\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils.js\n");

/***/ })

/******/ });