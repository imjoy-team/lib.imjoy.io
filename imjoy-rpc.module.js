module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/worker-loader/dist/workers/InlineWorker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/workers/InlineWorker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzPzc3ODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMzQzOTEzL2hvdy10by1jcmVhdGUtYS13ZWItd29ya2VyLWZyb20tYS1zdHJpbmdcblxudmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgdXJsKSB7XG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW5kb3cuTW96QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1TQmxvYkJ1aWxkZXI7XG5cbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuXG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuXG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGhlIHByb3Bvc2VkIEFQSVxuICAgICAgICBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoJ2RhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCwnICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0lubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/workers/InlineWorker.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, module, scripts, repository, keywords, author, license, bugs, homepage, dependencies, devDependencies, eslintConfig, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"imjoy-rpc\\\",\\\"version\\\":\\\"0.1.17\\\",\\\"description\\\":\\\"Remote procedure calls for ImJoy.\\\",\\\"module\\\":\\\"index.js\\\",\\\"scripts\\\":{\\\"build\\\":\\\"rm -rf dist && npm run build-umd && npm run build-module\\\",\\\"build-umd\\\":\\\"webpack --config webpack.config.js --mode development --filename imjoy-rpc.js && webpack --config webpack.config.js --mode production --devtool source-map --filename imjoy-rpc.min.js\\\",\\\"build-module\\\":\\\"webpack --config webpack.config.js --mode development --libraryTarget commonjs2 --filename imjoy-rpc.module.js\\\",\\\"watch\\\":\\\"webpack --watch --progress --config webpack.config.js --mode development --libraryTarget commonjs2 --filename imjoy-rpc.module.js\\\",\\\"serve\\\":\\\"webpack-dev-server --filename imjoy-rpc.js\\\",\\\"stats\\\":\\\"webpack --profile --json > stats.json\\\",\\\"stats-prod\\\":\\\"webpack --profile --json --mode production > stats-prod.json\\\",\\\"analyze\\\":\\\"webpack-bundle-analyzer -p 9999 stats.json\\\",\\\"analyze-prod\\\":\\\"webpack-bundle-analyzer -p 9999 stats-prod.json\\\",\\\"clean\\\":\\\"rimraf dist/*\\\",\\\"deploy\\\":\\\"npm run build && node deploy-site.js\\\",\\\"format\\\":\\\"prettier --write \\\\\\\"{src,tests}/**/**\\\\\\\"\\\",\\\"check-format\\\":\\\"prettier --check \\\\\\\"{src,tests}/**/**\\\\\\\"\\\",\\\"test\\\":\\\"karma start --single-run --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/imjoy-team/imjoy-rpc.git\\\"},\\\"keywords\\\":[\\\"imjoy\\\",\\\"rpc\\\"],\\\"author\\\":\\\"imjoy-team <imjoy.team@gmail.com>\\\",\\\"license\\\":\\\"MIT\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/imjoy-team/imjoy-rpc/issues\\\"},\\\"homepage\\\":\\\"https://github.com/imjoy-team/imjoy-rpc\\\",\\\"dependencies\\\":{},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/plugin-syntax-dynamic-import\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/polyfill\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/preset-env\\\":\\\"^7.0.0-beta.39\\\",\\\"@types/requirejs\\\":\\\"^2.1.28\\\",\\\"babel-core\\\":\\\"^6.26.0\\\",\\\"babel-eslint\\\":\\\"^10.1.0\\\",\\\"babel-loader\\\":\\\"8.0.0-beta.2\\\",\\\"babel-runtime\\\":\\\"^6.26.0\\\",\\\"chai\\\":\\\"^4.2.0\\\",\\\"clean-webpack-plugin\\\":\\\"^0.1.19\\\",\\\"copy-webpack-plugin\\\":\\\"^5.0.5\\\",\\\"eslint\\\":\\\"^6.8.0\\\",\\\"eslint-config-prettier\\\":\\\"^4.2.0\\\",\\\"eslint-loader\\\":\\\"^4.0.2\\\",\\\"file-loader\\\":\\\"^0.11.2\\\",\\\"fs-extra\\\":\\\"^0.30.0\\\",\\\"gh-pages\\\":\\\"^2.0.1\\\",\\\"html-loader\\\":\\\"^0.5.5\\\",\\\"html-webpack-plugin\\\":\\\"^3.2.0\\\",\\\"json-loader\\\":\\\"^0.5.4\\\",\\\"karma\\\":\\\"^4.4.1\\\",\\\"karma-chrome-launcher\\\":\\\"^3.1.0\\\",\\\"karma-firefox-launcher\\\":\\\"^1.3.0\\\",\\\"karma-mocha\\\":\\\"^1.3.0\\\",\\\"karma-webpack\\\":\\\"^4.0.2\\\",\\\"lerna\\\":\\\"^3.8.0\\\",\\\"lodash.debounce\\\":\\\"^4.0.8\\\",\\\"mocha\\\":\\\"^7.1.2\\\",\\\"postcss\\\":\\\"^6.0.2\\\",\\\"prettier\\\":\\\"^1.6.1\\\",\\\"rimraf\\\":\\\"^2.6.2\\\",\\\"schema-utils\\\":\\\"^0.4.3\\\",\\\"style-loader\\\":\\\"^0.18.1\\\",\\\"url-loader\\\":\\\"^0.5.9\\\",\\\"webpack\\\":\\\"^4.0.0\\\",\\\"webpack-bundle-analyzer\\\":\\\"^3.3.2\\\",\\\"webpack-cli\\\":\\\"^3.1.2\\\",\\\"webpack-dev-server\\\":\\\"^3.1.1\\\",\\\"webpack-merge\\\":\\\"^4.1.1\\\",\\\"worker-loader\\\":\\\"^2.0.0\\\",\\\"write-file-webpack-plugin\\\":\\\"^4.5.1\\\"},\\\"eslintConfig\\\":{\\\"globals\\\":{\\\"document\\\":true,\\\"window\\\":true}}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./package.json\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! exports provided: RPC, API_VERSION, VERSION, setupBaseFrame, setupRPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupBaseFrame\", function() { return setupBaseFrame; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupRPC\", function() { return setupRPC; });\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugin.webworker.js */ \"./src/plugin.webworker.js\");\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pluginIframe.js */ \"./src/pluginIframe.js\");\n/* harmony import */ var _pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginWebPython.js */ \"./src/pluginWebPython.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__[\"RPC\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"API_VERSION\", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__[\"API_VERSION\"]; });\n\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ \"./package.json\", 1);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return _package_json__WEBPACK_IMPORTED_MODULE_5__[\"version\"]; });\n\n/**\n * Contains the code executed in the sandboxed frame under web-browser\n *\n * Tries to create a Web-Worker inside the frame and set up the\n * communication between the worker and the parent window. Some\n * browsers restrict creating a worker inside a sandboxed iframe - if\n * this happens, the plugin initialized right inside the frame (in the\n * same thread)\n */\n\n\n\n\n\n\n\nfunction inIframe() {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\n\nfunction getParamValue(paramName) {\n  const url = window.location.search.substring(1); //get rid of \"?\" in querystring\n\n  const qArray = url.split(\"&\"); //get key-value pairs\n\n  for (let i = 0; i < qArray.length; i++) {\n    const pArr = qArray[i].split(\"=\"); //split key and value\n\n    if (pArr[0] === paramName) return pArr[1]; //return value\n  }\n}\n/**\n * Initializes the plugin inside a web worker. May throw an exception\n * in case this was not permitted by the browser.\n */\n\n\nfunction setupWebWorker(config) {\n  if (!config.allow_execution) throw new Error(\"web-worker plugin can only work with allow_execution=true\");\n  const worker = new _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default.a(); // mixed content warning in Chrome silently skips worker\n  // initialization without exception, handling this with timeout\n\n  const fallbackTimeout = setTimeout(function () {\n    worker.terminate();\n    console.warn(`Plugin failed to start as a web-worker, running in an iframe instead.`);\n    Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n  }, 2000); // forwarding messages between the worker and parent window\n\n  worker.addEventListener(\"message\", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.type === \"initialized\") {\n      // send config to the worker\n      worker.postMessage({\n        type: \"connectRPC\",\n        config: config\n      });\n      clearTimeout(fallbackTimeout); // complete the missing fields\n\n      m.config = Object.assign({}, config, m.config);\n    } else if (m.type === \"imjoy_remote_api_ready\") {\n      // if it's a webworker, there will be no api object returned\n      window.dispatchEvent(new CustomEvent(\"imjoy_remote_api_ready\", {\n        detail: null\n      }));\n    } else if (m.type === \"cacheRequirements\" && typeof cache_requirements === \"function\") {\n      cache_requirements(m.requirements);\n    } else if (m.type === \"disconnect\") {\n      worker.terminate();\n    } else {\n      if (m.__transferables__) {\n        transferables = m.__transferables__;\n        delete m.__transferables__;\n      }\n    }\n\n    parent.postMessage(m, \"*\", transferables);\n  });\n  window.addEventListener(\"message\", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.__transferables__) {\n      transferables = m.__transferables__;\n      delete m.__transferables__;\n    }\n\n    worker.postMessage(m, transferables);\n  });\n}\n\nasync function setupBaseFrame(config) {\n  config = config || {};\n  config.name = config.name || \"Generic RPC App\";\n  config.type = config.type || getParamValue(\"_plugin_type\") || \"window\";\n  config.allow_execution = config.allow_execution || true;\n  config.enable_service_worker = config.enable_service_worker || true;\n\n  if (config.enable_service_worker) {\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"setupServiceWorker\"])(config.target_origin, config.cache_requirements);\n  }\n\n  if (config.cache_requirements) {\n    delete config.cache_requirements;\n  }\n\n  config.forwarding_functions = config.forwarding_functions;\n\n  if (config.forwarding_functions === undefined) {\n    config.forwarding_functions = [\"close\", \"on\", \"off\", \"emit\"];\n\n    if ([\"rpc-window\", \"window\", \"web-python-window\"].includes(config.type)) {\n      config.forwarding_functions = config.forwarding_functions.concat([\"resize\", \"show\", \"hide\", \"refresh\"]);\n    }\n  } // expose the api object to window globally.\n  // note: the returned value will be null for webworker\n\n\n  window.api = await imjoyRPC.setupRPC(config);\n  return window.api;\n}\nfunction setupRPC(config) {\n  config = config || {};\n  if (!config.name) throw new Error(\"Please specify a name for your app.\");\n  config.version = config.version || \"0.1.0\";\n  config.description = config.description || `[TODO: add description for ${config.name} ]`;\n  config.type = config.type || \"rpc-window\";\n  config.id = config.id || Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])();\n  config.allow_execution = config.allow_execution || false;\n  config.token = config.token || Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])(); // remove functions\n\n  config = Object.keys(config).reduce((p, c) => {\n    if (typeof config[c] !== \"function\") p[c] = config[c];\n    return p;\n  }, {});\n  return new Promise((resolve, reject) => {\n    if (inIframe()) {\n      if (config.type === \"web-worker\") {\n        try {\n          setupWebWorker(config);\n        } catch (e) {\n          // fallback to iframe\n          Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n        }\n      } else if (config.type === \"web-python\" || config.type === \"web-python-window\") {\n        Object(_pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(config);\n      } else if ([\"rpc-window\", \"rpc-worker\", \"iframe\", \"window\"].includes(config.type)) {\n        Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n      } else {\n        console.error(\"Unsupported plugin type: \" + config.type);\n        reject(\"Unsupported plugin type: \" + config.type);\n      }\n\n      try {\n        window.addEventListener(\"imjoy_remote_api_ready\", e => {\n          // imjoy plugin api\n          resolve(e.detail);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    } else {\n      reject(new Error(\"imjoy-rpc should only run inside an iframe.\"));\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ }),

/***/ "./src/plugin.webworker.js":
/*!*********************************!*\
  !*** ./src/plugin.webworker.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = function() {\n  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ \"./node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\\"./src/plugin.webworker.js\\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\\"./src/plugin.webworker.js\\\":\\n/*!*********************************!*\\\\\\n  !*** ./src/plugin.webworker.js ***!\\n  \\\\*********************************/\\n/*! no exports provided */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \\\\\\\"./src/pluginCore.js\\\\\\\");\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/**\\\\n * Contains the routines loaded by the plugin Worker under web-browser.\\\\n *\\\\n * Initializes the web environment version of the platform-dependent\\\\n * connection object for the plugin site\\\\n */\\\\n\\\\n\\\\n\\\\n(function() {\\\\n  // make sure this runs inside a webworker\\\\n  if (\\\\n    typeof WorkerGlobalScope === \\\\\\\"undefined\\\\\\\" ||\\\\n    !self ||\\\\n    !(self instanceof WorkerGlobalScope)\\\\n  ) {\\\\n    throw new Error(\\\\\\\"This script can only loaded in a webworker\\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Executes the given code in a jailed environment. For web\\\\n   * implementation, we're already jailed in the iframe and the\\\\n   * worker, so simply eval()\\\\n   *\\\\n   * @param {String} code code to execute\\\\n   */\\\\n  var execute = function(code) {\\\\n    try {\\\\n      if (code.type === \\\\\\\"requirements\\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\\"string\\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (!Array.isArray(code.requirements)) {\\\\n                code.requirements = [code.requirements];\\\\n              }\\\\n              for (var i = 0; i < code.requirements.length; i++) {\\\\n                if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\\".css\\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\\"css:\\\\\\\")\\\\n                ) {\\\\n                  throw \\\\\\\"unable to import css in a webworker\\\\\\\";\\\\n                } else if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\\".js\\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")\\\\n                ) {\\\\n                  if (code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")) {\\\\n                    code.requirements[i] = code.requirements[i].slice(3);\\\\n                  }\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"http\\\\\\\")) {\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"cache:\\\\\\\")) {\\\\n                  //ignore cache\\\\n                } else {\\\\n                  console.log(\\\\n                    \\\\\\\"Unprocessed requirements url: \\\\\\\" + code.requirements[i]\\\\n                  );\\\\n                }\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\\"failed to import required scripts: \\\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n        } catch (e) {\\\\n          throw e;\\\\n        }\\\\n      } else if (code.type === \\\\\\\"script\\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\\"string\\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (Array.isArray(code.requirements)) {\\\\n                for (let i = 0; i < code.requirements.length; i++) {\\\\n                  importScripts(code.requirements[i]);\\\\n                }\\\\n              } else {\\\\n                importScripts(code.requirements);\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\\"failed to import required scripts: \\\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n          eval(code.content);\\\\n        } catch (e) {\\\\n          console.error(e.message, e.stack);\\\\n          throw e;\\\\n        }\\\\n      } else {\\\\n        throw \\\\\\\"unsupported code type.\\\\\\\";\\\\n      }\\\\n      self.postMessage({ type: \\\\\\\"executeSuccess\\\\\\\" });\\\\n    } catch (e) {\\\\n      console.error(\\\\\\\"failed to execute scripts: \\\\\\\", code, e);\\\\n      self.postMessage({ type: \\\\\\\"executeFailure\\\\\\\", error: e.stack || String(e) });\\\\n    }\\\\n  };\\\\n\\\\n  /**\\\\n   * Connection object provided to the RPC constructor,\\\\n   * plugin site implementation for the web-based environment.\\\\n   * Global will be then cleared to prevent exposure into the\\\\n   * Worker, so we put this local connection object into a closure\\\\n   */\\\\n  const conn = {\\\\n    disconnect: function() {\\\\n      self.close();\\\\n    },\\\\n    send: function(data, transferables) {\\\\n      data.__transferables__ = transferables;\\\\n      self.postMessage(data, transferables);\\\\n    },\\\\n    onMessage: function(h) {\\\\n      conn._messageHandler = h;\\\\n    },\\\\n    _messageHandler: function() {},\\\\n    onDisconnect: function() {}\\\\n  };\\\\n\\\\n  const config = {\\\\n    type: \\\\\\\"web-worker\\\\\\\",\\\\n    dedicated_thread: true,\\\\n    allow_execution: true,\\\\n    lang: \\\\\\\"javascript\\\\\\\",\\\\n    api_version: _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"API_VERSION\\\\\\\"]\\\\n  };\\\\n\\\\n  /**\\\\n   * Event lisener for the plugin message\\\\n   */\\\\n  self.addEventListener(\\\\\\\"message\\\\\\\", function(e) {\\\\n    const m = e.data;\\\\n    switch (m && m.type) {\\\\n      case \\\\\\\"getConfig\\\\\\\":\\\\n        self.postMessage({\\\\n          type: \\\\\\\"config\\\\\\\",\\\\n          config: config\\\\n        });\\\\n        break;\\\\n      case \\\\\\\"execute\\\\\\\":\\\\n        execute(m.code);\\\\n        if (m.code.type === \\\\\\\"requirements\\\\\\\") {\\\\n          if (!Array.isArray(m.code.requirements)) {\\\\n            m.code.requirements = [m.code.requirements];\\\\n          }\\\\n          self.postMessage({\\\\n            type: \\\\\\\"cacheRequirements\\\\\\\",\\\\n            requirements: m.code.requirements\\\\n          });\\\\n        }\\\\n        break;\\\\n      // for webworker only\\\\n      case \\\\\\\"connectRPC\\\\\\\":\\\\n        Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"connectRPC\\\\\\\"])(conn, m.config);\\\\n        break;\\\\n      default:\\\\n        conn._messageHandler(m);\\\\n    }\\\\n  });\\\\n  self.postMessage({\\\\n    type: \\\\\\\"initialized\\\\\\\",\\\\n    config: config\\\\n  });\\\\n})();\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/pluginCore.js\\\":\\n/*!***************************!*\\\\\\n  !*** ./src/pluginCore.js ***!\\n  \\\\***************************/\\n/*! exports provided: connectRPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"connectRPC\\\\\\\", function() { return connectRPC; });\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/**\\\\n * Core plugin script loaded into the plugin process/thread.\\\\n *\\\\n * Initializes the plugin-site API global methods.\\\\n */\\\\n\\\\nfunction connectRPC(connection, config) {\\\\n  const application = {};\\\\n  config = config || {};\\\\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"RPC\\\\\\\"](connection, config);\\\\n  rpc.onGetInterface(function () {\\\\n    launchConnected();\\\\n  });\\\\n  rpc.onRemoteUpdate(function () {\\\\n    application.remote = rpc.getRemote();\\\\n    if (!application.remote) return;\\\\n    const api = application.remote || {};\\\\n\\\\n    if (api.export) {\\\\n      console.error(\\\\\\\"WARNING: overwriting function 'export'.\\\\\\\");\\\\n    }\\\\n\\\\n    if (api.onload) {\\\\n      console.error(\\\\\\\"WARNING: overwriting function 'onload'.\\\\\\\");\\\\n    }\\\\n\\\\n    if (api.dispose) {\\\\n      console.error(\\\\\\\"WARNING: overwriting function 'dispose'.\\\\\\\");\\\\n    }\\\\n\\\\n    api.export = application.setInterface;\\\\n    api.onLoad = application.whenConnected;\\\\n    api.dispose = application.disconnect;\\\\n\\\\n    if (typeof WorkerGlobalScope !== \\\\\\\"undefined\\\\\\\" && self instanceof WorkerGlobalScope) {\\\\n      self.api = api;\\\\n      self.postMessage({\\\\n        type: \\\\\\\"imjoy_remote_api_ready\\\\\\\"\\\\n      });\\\\n    } else if (typeof window) {\\\\n      window.dispatchEvent(new CustomEvent(\\\\\\\"imjoy_remote_api_ready\\\\\\\", {\\\\n        detail: api\\\\n      }));\\\\n    }\\\\n  });\\\\n  var connected = false;\\\\n  var connectedHandlers = [];\\\\n\\\\n  var launchConnected = function () {\\\\n    if (!connected) {\\\\n      connected = true;\\\\n      var handler;\\\\n\\\\n      while (handler = connectedHandlers.pop()) {\\\\n        handler();\\\\n      }\\\\n    }\\\\n  };\\\\n\\\\n  var checkHandler = function (handler) {\\\\n    var type = typeof handler;\\\\n\\\\n    if (type !== \\\\\\\"function\\\\\\\") {\\\\n      var msg = \\\\\\\"A function may only be subsribed to the event, \\\\\\\" + type + \\\\\\\" was provided instead\\\\\\\";\\\\n      throw new Error(msg);\\\\n    }\\\\n\\\\n    return handler;\\\\n  };\\\\n  /**\\\\n   * Sets a function executed after the connection to the\\\\n   * application is estaplished, and the initial interface-exchange\\\\n   * messaging is completed\\\\n   *\\\\n   * @param {Function} handler to be called upon initialization\\\\n   */\\\\n\\\\n\\\\n  application.whenConnected = function (handler) {\\\\n    handler = checkHandler(handler);\\\\n\\\\n    if (connected) {\\\\n      handler();\\\\n    } else {\\\\n      connectedHandlers.push(handler);\\\\n    }\\\\n  };\\\\n  /**\\\\n   * Sets the plugin interface available to the application\\\\n   *\\\\n   * @param {Object} _interface to set\\\\n   */\\\\n\\\\n\\\\n  application.setInterface = function (_interface) {\\\\n    rpc.setInterface(_interface);\\\\n  };\\\\n  /**\\\\n   * Disconnects the plugin from the application (sending\\\\n   * notification message) and destroys itself\\\\n   */\\\\n\\\\n\\\\n  application.disconnect = function (_interface) {\\\\n    rpc.disconnect();\\\\n  };\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDL3NyYy9wbHVnaW5Db3JlLmpzP2E0NzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3JlIHBsdWdpbiBzY3JpcHQgbG9hZGVkIGludG8gdGhlIHBsdWdpbiBwcm9jZXNzL3RocmVhZC5cbiAqXG4gKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLXNpdGUgQVBJIGdsb2JhbCBtZXRob2RzLlxuICovXG5pbXBvcnQgeyBSUEMgfSBmcm9tIFwiLi9ycGMuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RSUEMoY29ubmVjdGlvbiwgY29uZmlnKSB7XG4gIGNvbnN0IGFwcGxpY2F0aW9uID0ge307XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZyk7XG4gIHJwYy5vbkdldEludGVyZmFjZShmdW5jdGlvbigpIHtcbiAgICBsYXVuY2hDb25uZWN0ZWQoKTtcbiAgfSk7XG5cbiAgcnBjLm9uUmVtb3RlVXBkYXRlKGZ1bmN0aW9uKCkge1xuICAgIGFwcGxpY2F0aW9uLnJlbW90ZSA9IHJwYy5nZXRSZW1vdGUoKTtcbiAgICBpZiAoIWFwcGxpY2F0aW9uLnJlbW90ZSkgcmV0dXJuO1xuICAgIGNvbnN0IGFwaSA9IGFwcGxpY2F0aW9uLnJlbW90ZSB8fCB7fTtcbiAgICBpZiAoYXBpLmV4cG9ydCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIldBUk5JTkc6IG92ZXJ3cml0aW5nIGZ1bmN0aW9uICdleHBvcnQnLlwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5vbmxvYWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJXQVJOSU5HOiBvdmVyd3JpdGluZyBmdW5jdGlvbiAnb25sb2FkJy5cIik7XG4gICAgfVxuICAgIGlmIChhcGkuZGlzcG9zZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIldBUk5JTkc6IG92ZXJ3cml0aW5nIGZ1bmN0aW9uICdkaXNwb3NlJy5cIik7XG4gICAgfVxuICAgIGFwaS5leHBvcnQgPSBhcHBsaWNhdGlvbi5zZXRJbnRlcmZhY2U7XG4gICAgYXBpLm9uTG9hZCA9IGFwcGxpY2F0aW9uLndoZW5Db25uZWN0ZWQ7XG4gICAgYXBpLmRpc3Bvc2UgPSBhcHBsaWNhdGlvbi5kaXNjb25uZWN0O1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlXG4gICAgKSB7XG4gICAgICBzZWxmLmFwaSA9IGFwaTtcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImltam95X3JlbW90ZV9hcGlfcmVhZHlcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93KSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiLCB7IGRldGFpbDogYXBpIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGNvbm5lY3RlZCA9IGZhbHNlO1xuICB2YXIgY29ubmVjdGVkSGFuZGxlcnMgPSBbXTtcblxuICB2YXIgbGF1bmNoQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgIGNvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAgIHZhciBoYW5kbGVyO1xuICAgICAgd2hpbGUgKChoYW5kbGVyID0gY29ubmVjdGVkSGFuZGxlcnMucG9wKCkpKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGNoZWNrSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBoYW5kbGVyO1xuICAgIGlmICh0eXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHZhciBtc2cgPVxuICAgICAgICBcIkEgZnVuY3Rpb24gbWF5IG9ubHkgYmUgc3Vic3JpYmVkIHRvIHRoZSBldmVudCwgXCIgK1xuICAgICAgICB0eXBlICtcbiAgICAgICAgXCIgd2FzIHByb3ZpZGVkIGluc3RlYWRcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cblxuICAgIHJldHVybiBoYW5kbGVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGEgZnVuY3Rpb24gZXhlY3V0ZWQgYWZ0ZXIgdGhlIGNvbm5lY3Rpb24gdG8gdGhlXG4gICAqIGFwcGxpY2F0aW9uIGlzIGVzdGFwbGlzaGVkLCBhbmQgdGhlIGluaXRpYWwgaW50ZXJmYWNlLWV4Y2hhbmdlXG4gICAqIG1lc3NhZ2luZyBpcyBjb21wbGV0ZWRcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciB0byBiZSBjYWxsZWQgdXBvbiBpbml0aWFsaXphdGlvblxuICAgKi9cbiAgYXBwbGljYXRpb24ud2hlbkNvbm5lY3RlZCA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBoYW5kbGVyID0gY2hlY2tIYW5kbGVyKGhhbmRsZXIpO1xuICAgIGlmIChjb25uZWN0ZWQpIHtcbiAgICAgIGhhbmRsZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29ubmVjdGVkSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBsdWdpbiBpbnRlcmZhY2UgYXZhaWxhYmxlIHRvIHRoZSBhcHBsaWNhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gX2ludGVyZmFjZSB0byBzZXRcbiAgICovXG4gIGFwcGxpY2F0aW9uLnNldEludGVyZmFjZSA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICBycGMuc2V0SW50ZXJmYWNlKF9pbnRlcmZhY2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyB0aGUgcGx1Z2luIGZyb20gdGhlIGFwcGxpY2F0aW9uIChzZW5kaW5nXG4gICAqIG5vdGlmaWNhdGlvbiBtZXNzYWdlKSBhbmQgZGVzdHJveXMgaXRzZWxmXG4gICAqL1xuICBhcHBsaWNhdGlvbi5kaXNjb25uZWN0ID0gZnVuY3Rpb24oX2ludGVyZmFjZSkge1xuICAgIHJwYy5kaXNjb25uZWN0KCk7XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQUtBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///./src/pluginCore.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/rpc.js\\\":\\n/*!********************!*\\\\\\n  !*** ./src/rpc.js ***!\\n  \\\\********************/\\n/*! exports provided: API_VERSION, RPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"API_VERSION\\\\\\\", function() { return API_VERSION; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"RPC\\\\\\\", function() { return RPC; });\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \\\\\\\"./src/utils.js\\\\\\\");\\\\n/**\\\\n * Contains the RPC object used both by the application\\\\n * site, and by each plugin\\\\n */\\\\n\\\\nconst API_VERSION = \\\\\\\"0.2.0\\\\\\\";\\\\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\\\\n\\\\nfunction _appendBuffer(buffer1, buffer2) {\\\\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\\\\n  tmp.set(new Uint8Array(buffer1), 0);\\\\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\\\\n  return tmp.buffer;\\\\n}\\\\n\\\\nfunction getKeyByValue(object, value) {\\\\n  return Object.keys(object).find(key => object[key] === value);\\\\n}\\\\n/**\\\\n * RPC object represents a single site in the\\\\n * communication protocol between the application and the plugin\\\\n *\\\\n * @param {Object} connection a special object allowing to send\\\\n * and receive messages from the opposite site (basically it\\\\n * should only provide send() and onMessage() methods)\\\\n */\\\\n\\\\n\\\\nclass RPC {\\\\n  constructor(connection, config) {\\\\n    this._connection = connection;\\\\n    this.config = config || {};\\\\n    this._interface = {};\\\\n    this._plugin_interfaces = {};\\\\n    this._remote = null;\\\\n\\\\n    this._remoteUpdateHandler = function () {};\\\\n\\\\n    this._getInterfaceHandler = function () {};\\\\n\\\\n    this._interfaceSetAsRemoteHandler = null;\\\\n\\\\n    this._disconnectHandler = function () {};\\\\n\\\\n    this._store = new ReferenceStore();\\\\n    this._method_refs = new ReferenceStore();\\\\n    this._connection = connection;\\\\n    let me = this;\\\\n\\\\n    this._connection.onMessage(function (data) {\\\\n      me._processMessage(data);\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Set a handler to be called when the remote site updates its\\\\n   * interface\\\\n   *\\\\n   * @param {Function} handler\\\\n   */\\\\n\\\\n\\\\n  onRemoteUpdate(handler) {\\\\n    this._remoteUpdateHandler = handler;\\\\n  }\\\\n  /**\\\\n   * Set a handler to be called when received a responce from the\\\\n   * remote site reporting that the previously provided interface\\\\n   * has been successfully set as remote for that site\\\\n   *\\\\n   * @param {Function} handler\\\\n   */\\\\n\\\\n\\\\n  onRemoteReady(handler) {\\\\n    this._method_refs.onReady(handler);\\\\n  }\\\\n\\\\n  onRemoteBusy(handler) {\\\\n    this._method_refs.onBusy(handler);\\\\n  }\\\\n\\\\n  getRemoteCallStack() {\\\\n    return this._method_refs.getStack();\\\\n  }\\\\n  /**\\\\n   * Set a handler to be called when the remote site requests to\\\\n   * (re)send the interface. Used to detect an initialzation\\\\n   * completion without sending additional request, since in fact\\\\n   * 'getInterface' request is only sent by application at the last\\\\n   * step of the plugin initialization\\\\n   *\\\\n   * @param {Function} handler\\\\n   */\\\\n\\\\n\\\\n  onGetInterface(handler) {\\\\n    this._getInterfaceHandler = handler;\\\\n  }\\\\n  /**\\\\n   * @returns {Object} set of remote interface methods\\\\n   */\\\\n\\\\n\\\\n  getRemote() {\\\\n    return this._remote;\\\\n  }\\\\n  /**\\\\n   * Sets the interface of this site making it available to the\\\\n   * remote site by sending a message with a set of methods names\\\\n   *\\\\n   * @param {Object} _interface to set\\\\n   */\\\\n\\\\n\\\\n  setInterface(_interface) {\\\\n    if (this.config.forwarding_functions) {\\\\n      for (let func_name of this.config.forwarding_functions) {\\\\n        if (this._remote[func_name]) {\\\\n          if (_interface.constructor === Object) {\\\\n            if (!_interface[func_name]) {\\\\n              _interface[func_name] = (...args) => {\\\\n                this._remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          } else if (_interface.constructor.constructor === Function) {\\\\n            if (!_interface.constructor.prototype[func_name]) {\\\\n              _interface.constructor.prototype[func_name] = (...args) => {\\\\n                this._remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          }\\\\n        }\\\\n      }\\\\n    }\\\\n\\\\n    this._interface = _interface;\\\\n  }\\\\n  /**\\\\n   * Sends the actual interface to the remote site upon it was\\\\n   * updated or by a special request of the remote site\\\\n   */\\\\n\\\\n\\\\n  sendInterface() {\\\\n    return new Promise(resolve => {\\\\n      var names = [];\\\\n\\\\n      if (!this._interface) {\\\\n        throw new Error(\\\\\\\"interface is not set.\\\\\\\");\\\\n      }\\\\n\\\\n      if (this._interface.constructor === Object) {\\\\n        for (var name of Object.keys(this._interface)) {\\\\n          if (name.startsWith(\\\\\\\"_\\\\\\\")) continue;\\\\n\\\\n          if (typeof this._interface[name] === \\\\\\\"function\\\\\\\") {\\\\n            names.push({\\\\n              name: name,\\\\n              data: null,\\\\n              type: \\\\\\\"function\\\\\\\"\\\\n            });\\\\n          } else {\\\\n            var data = this._interface[name];\\\\n\\\\n            if (data !== null && typeof data === \\\\\\\"object\\\\\\\") {\\\\n              var data2 = {};\\\\n\\\\n              for (var k of Object.keys(data)) {\\\\n                if (typeof data[k] === \\\\\\\"function\\\\\\\") {\\\\n                  data2[k] = \\\\\\\"rpc_method::\\\\\\\" + k;\\\\n                } else {\\\\n                  data2[k] = data[k];\\\\n                }\\\\n              }\\\\n\\\\n              names.push({\\\\n                name: name,\\\\n                data: data2,\\\\n                type: \\\\\\\"object\\\\\\\"\\\\n              });\\\\n            } else if (Object(data) !== data) {\\\\n              names.push({\\\\n                name: name,\\\\n                data: data,\\\\n                type: \\\\\\\"data\\\\\\\"\\\\n              });\\\\n            }\\\\n          }\\\\n        }\\\\n      } // a class\\\\n      else if (this._interface.constructor === Function) {\\\\n          throw new Error(\\\\\\\"Please instantiate the class before exportting it.\\\\\\\");\\\\n        } // instance of a class\\\\n        else if (this._interface.constructor.constructor === Function) {\\\\n            var functions = Object.getOwnPropertyNames(Object.getPrototypeOf(this._interface)).concat(Object.keys(this._interface));\\\\n\\\\n            for (var i = 0; i < functions.length; i++) {\\\\n              var name_ = functions[i];\\\\n              if (name_.startsWith(\\\\\\\"_\\\\\\\") || name_ === \\\\\\\"constructor\\\\\\\") continue;\\\\n\\\\n              if (typeof this._interface[name_] === \\\\\\\"function\\\\\\\") {\\\\n                names.push({\\\\n                  name: name_,\\\\n                  data: null\\\\n                });\\\\n              }\\\\n            }\\\\n          } else {\\\\n            throw Error(\\\\\\\"Unsupported interface type\\\\\\\");\\\\n          }\\\\n\\\\n      this._interfaceSetAsRemoteHandler = resolve;\\\\n\\\\n      this._connection.send({\\\\n        type: \\\\\\\"setInterface\\\\\\\",\\\\n        api: names\\\\n      });\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Handles a message from the remote site\\\\n   */\\\\n  // var callback_reg = new RegExp(\\\\\\\"onupdate|run$\\\\\\\")\\\\n\\\\n\\\\n  _processMessage(data) {\\\\n    var resolve, reject, method, args, result;\\\\n\\\\n    switch (data.type) {\\\\n      case \\\\\\\"method\\\\\\\":\\\\n        var _interface = this._interface;\\\\n\\\\n        var _method_context = _interface.__this__ || _interface;\\\\n\\\\n        if (data.pid) {\\\\n          _interface = this._plugin_interfaces[data.pid];\\\\n\\\\n          if (!_interface) {\\\\n            if (data.promise) {\\\\n              [resolve, reject] = this._unwrap(data.promise, false);\\\\n              reject(`plugin api function is not avaialbe in \\\\\\\"${data.pid}\\\\\\\", the plugin maybe terminated.`);\\\\n            } else {\\\\n              console.error(`plugin api function is not avaialbe in ${data.pid}, the plugin maybe terminated.`);\\\\n            }\\\\n\\\\n            return;\\\\n          }\\\\n        }\\\\n\\\\n        if (data.name.indexOf(\\\\\\\".\\\\\\\") !== -1) {\\\\n          var names = data.name.split(\\\\\\\".\\\\\\\");\\\\n          method = _interface[names[0]][names[1]];\\\\n        } else {\\\\n          method = _interface[data.name];\\\\n        }\\\\n\\\\n        args = this._unwrap(data.args, true);\\\\n\\\\n        if (data.promise) {\\\\n          [resolve, reject] = this._unwrap(data.promise, false);\\\\n\\\\n          try {\\\\n            result = method.apply(_method_context, args);\\\\n\\\\n            if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\\"AsyncFunction\\\\\\\") {\\\\n              result.then(resolve).catch(reject);\\\\n            } else {\\\\n              resolve(result);\\\\n            }\\\\n          } catch (e) {\\\\n            console.error(e, method);\\\\n            reject(e);\\\\n          }\\\\n        } else {\\\\n          try {\\\\n            method.apply(_method_context, args);\\\\n          } catch (e) {\\\\n            console.error(e, method, args);\\\\n          }\\\\n        }\\\\n\\\\n        break;\\\\n\\\\n      case \\\\\\\"callback\\\\\\\":\\\\n        if (data.promise) {\\\\n          [resolve, reject] = this._unwrap(data.promise, false);\\\\n\\\\n          try {\\\\n            method = this._store.fetch(data.num);\\\\n            args = this._unwrap(data.args, true);\\\\n\\\\n            if (!method) {\\\\n              throw \\\\\\\"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\\";\\\\n            }\\\\n\\\\n            result = method.apply(null, args);\\\\n\\\\n            if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\\"AsyncFunction\\\\\\\") {\\\\n              result.then(resolve).catch(reject);\\\\n            } else {\\\\n              resolve(result);\\\\n            }\\\\n          } catch (e) {\\\\n            console.error(e, method);\\\\n            reject(e);\\\\n          }\\\\n        } else {\\\\n          try {\\\\n            method = this._store.fetch(data.num);\\\\n            args = this._unwrap(data.args, true);\\\\n\\\\n            if (!method) {\\\\n              throw \\\\\\\"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\\";\\\\n            }\\\\n\\\\n            method.apply(null, args);\\\\n          } catch (e) {\\\\n            console.error(e, method, args);\\\\n          }\\\\n        }\\\\n\\\\n        break;\\\\n\\\\n      case \\\\\\\"setInterface\\\\\\\":\\\\n        this._setRemote(data.api);\\\\n\\\\n        break;\\\\n\\\\n      case \\\\\\\"getInterface\\\\\\\":\\\\n        this.sendInterface();\\\\n\\\\n        this._getInterfaceHandler();\\\\n\\\\n        break;\\\\n\\\\n      case \\\\\\\"interfaceSetAsRemote\\\\\\\":\\\\n        if (typeof this._interfaceSetAsRemoteHandler === \\\\\\\"function\\\\\\\") {\\\\n          this._interfaceSetAsRemoteHandler();\\\\n\\\\n          this._interfaceSetAsRemoteHandler === null;\\\\n        }\\\\n\\\\n        break;\\\\n\\\\n      case \\\\\\\"disconnect\\\\\\\":\\\\n        this._disconnectHandler();\\\\n\\\\n        this._connection.disconnect();\\\\n\\\\n        break;\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Sends a requests to the remote site asking it to provide its\\\\n   * current interface\\\\n   */\\\\n\\\\n\\\\n  requestRemote() {\\\\n    this._connection.send({\\\\n      type: \\\\\\\"getInterface\\\\\\\"\\\\n    });\\\\n  }\\\\n\\\\n  _ndarray(typedArray, shape, dtype) {\\\\n    var _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][typedArray.constructor.name];\\\\n\\\\n    if (dtype && dtype !== _dtype) {\\\\n      throw \\\\\\\"dtype doesn't match the type of the array: \\\\\\\" + _dtype + \\\\\\\" != \\\\\\\" + dtype;\\\\n    }\\\\n\\\\n    shape = shape || [typedArray.length];\\\\n    return {\\\\n      __jailed_type__: \\\\\\\"ndarray\\\\\\\",\\\\n      __value__: typedArray,\\\\n      __shape__: shape,\\\\n      __dtype__: _dtype\\\\n    };\\\\n  }\\\\n  /**\\\\n   * Sets the new remote interface provided by the other site\\\\n   *\\\\n   * @param {Array} names list of function names\\\\n   */\\\\n\\\\n\\\\n  _setRemote(api) {\\\\n    this._remote = {};\\\\n    var i, name, data, type;\\\\n\\\\n    for (i = 0; i < api.length; i++) {\\\\n      name = api[i].name;\\\\n      data = api[i].data;\\\\n      type = api[i].type;\\\\n\\\\n      if (type === \\\\\\\"data\\\\\\\") {\\\\n        this._remote[name] = data;\\\\n      } else if (data) {\\\\n        if (typeof data === \\\\\\\"object\\\\\\\") {\\\\n          var data2 = {};\\\\n\\\\n          for (var key in data) {\\\\n            if (data.hasOwnProperty(key)) {\\\\n              if (data[key] === \\\\\\\"rpc_method::\\\\\\\" + key) {\\\\n                data2[key] = this._genRemoteMethod(name + \\\\\\\".\\\\\\\" + key);\\\\n              } else {\\\\n                data2[key] = data[key];\\\\n              }\\\\n            }\\\\n          }\\\\n\\\\n          this._remote[name] = data2;\\\\n        } else {\\\\n          this._remote[name] = data;\\\\n        }\\\\n      } else {\\\\n        this._remote[name] = this._genRemoteMethod(name);\\\\n      }\\\\n    }\\\\n\\\\n    this._remoteUpdateHandler();\\\\n\\\\n    this._reportRemoteSet();\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * method. When the generated function is called, it will send the\\\\n   * corresponding message to the remote site asking it to execute\\\\n   * the particular method of its interface\\\\n   *\\\\n   * @param {String} name of the remote method\\\\n   *\\\\n   * @returns {Function} wrapped remote method\\\\n   */\\\\n\\\\n\\\\n  _genRemoteMethod(name, plugin_id) {\\\\n    var me = this;\\\\n\\\\n    var remoteMethod = function () {\\\\n      return new Promise((resolve, reject) => {\\\\n        let id = null;\\\\n\\\\n        try {\\\\n          id = me._method_refs.put(plugin_id ? plugin_id + \\\\\\\"/\\\\\\\" + name : name);\\\\n\\\\n          var wrapped_resolve = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return resolve.apply(this, arguments);\\\\n          };\\\\n\\\\n          var wrapped_reject = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return reject.apply(this, arguments);\\\\n          };\\\\n\\\\n          wrapped_resolve.__jailed_pairs__ = wrapped_reject;\\\\n          wrapped_reject.__jailed_pairs__ = wrapped_resolve;\\\\n          var args = Array.prototype.slice.call(arguments);\\\\n\\\\n          if (name === \\\\\\\"register\\\\\\\" || name === \\\\\\\"export\\\\\\\" || name === \\\\\\\"on\\\\\\\") {\\\\n            args = me._wrap(args, true);\\\\n          } else {\\\\n            args = me._wrap(args);\\\\n          }\\\\n\\\\n          var transferables = args.args.__transferables__;\\\\n          if (transferables) delete args.args.__transferables__;\\\\n\\\\n          me._connection.send({\\\\n            type: \\\\\\\"method\\\\\\\",\\\\n            name: name,\\\\n            pid: plugin_id,\\\\n            args: args,\\\\n            promise: me._wrap([wrapped_resolve, wrapped_reject])\\\\n          }, transferables);\\\\n        } catch (e) {\\\\n          if (id) me._method_refs.fetch(id);\\\\n          reject(`Failed to exectue remote method (plugin: ${plugin_id || me.id}, method: ${name}), error: ${e}`);\\\\n        }\\\\n      });\\\\n    };\\\\n\\\\n    remoteMethod.__remote_method = true;\\\\n    return remoteMethod;\\\\n  }\\\\n  /**\\\\n   * Sends a responce reporting that interface just provided by the\\\\n   * remote site was successfully set by this site as remote\\\\n   */\\\\n\\\\n\\\\n  _reportRemoteSet() {\\\\n    this._connection.send({\\\\n      type: \\\\\\\"interfaceSetAsRemote\\\\\\\"\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Prepares the provided set of remote method arguments for\\\\n   * sending to the remote site, replaces all the callbacks with\\\\n   * identifiers\\\\n   *\\\\n   * @param {Array} args to wrap\\\\n   *\\\\n   * @returns {Array} wrapped arguments\\\\n   */\\\\n\\\\n\\\\n  _encode_interface(aObject, bObject) {\\\\n    var v, k;\\\\n    const encoded_interface = {};\\\\n    aObject[\\\\\\\"__id__\\\\\\\"] = aObject[\\\\\\\"__id__\\\\\\\"] || Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"randId\\\\\\\"])();\\\\n\\\\n    for (k in aObject) {\\\\n      if (k === \\\\\\\"hasOwnProperty\\\\\\\") continue;\\\\n\\\\n      if (aObject.hasOwnProperty(k)) {\\\\n        if (k.startsWith(\\\\\\\"_\\\\\\\")) {\\\\n          continue;\\\\n        }\\\\n\\\\n        v = aObject[k];\\\\n\\\\n        if (typeof v === \\\\\\\"function\\\\\\\") {\\\\n          bObject[k] = {\\\\n            __jailed_type__: \\\\\\\"plugin_interface\\\\\\\",\\\\n            __plugin_id__: aObject[\\\\\\\"__id__\\\\\\\"],\\\\n            __value__: k,\\\\n            num: null\\\\n          };\\\\n          encoded_interface[k] = v;\\\\n        } else if (Object(v) !== v) {\\\\n          bObject[k] = {\\\\n            __jailed_type__: \\\\\\\"argument\\\\\\\",\\\\n            __value__: v\\\\n          };\\\\n          encoded_interface[k] = v;\\\\n        } else if (typeof v === \\\\\\\"object\\\\\\\") {\\\\n          bObject[k] = Array.isArray(v) ? [] : {};\\\\n\\\\n          this._encode_interface(v, bObject[k]);\\\\n        }\\\\n      }\\\\n    }\\\\n\\\\n    this._plugin_interfaces[aObject[\\\\\\\"__id__\\\\\\\"]] = encoded_interface;\\\\n\\\\n    if (aObject.on) {\\\\n      aObject.on(\\\\\\\"close\\\\\\\", () => {\\\\n        delete this._plugin_interfaces[aObject[\\\\\\\"__id__\\\\\\\"]];\\\\n      });\\\\n    }\\\\n  }\\\\n\\\\n  _encode(aObject, as_interface) {\\\\n    var transferables = [];\\\\n\\\\n    if (!aObject) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    var _transfer = aObject._transfer;\\\\n    var bObject, v, k;\\\\n    var isarray = Array.isArray(aObject);\\\\n    bObject = isarray ? [] : {}; //skip if already encoded\\\\n\\\\n    if (typeof aObject === \\\\\\\"object\\\\\\\" && aObject.__jailed_type__ && aObject.__value__) {\\\\n      return aObject;\\\\n    } //encode interfaces\\\\n\\\\n\\\\n    if (typeof aObject === \\\\\\\"object\\\\\\\" && !Array.isArray(aObject) && (aObject.__as_interface__ || as_interface)) {\\\\n      this._encode_interface(aObject, bObject);\\\\n\\\\n      return bObject;\\\\n    }\\\\n\\\\n    if (as_interface) {\\\\n      aObject[\\\\\\\"__id__\\\\\\\"] = aObject[\\\\\\\"__id__\\\\\\\"] || Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"randId\\\\\\\"])();\\\\n      this._plugin_interfaces[aObject[\\\\\\\"__id__\\\\\\\"]] = this._plugin_interfaces[aObject[\\\\\\\"__id__\\\\\\\"]] || {};\\\\n    }\\\\n\\\\n    for (k in aObject) {\\\\n      if (k === \\\\\\\"hasOwnProperty\\\\\\\") continue;\\\\n\\\\n      if (isarray || aObject.hasOwnProperty(k)) {\\\\n        v = aObject[k];\\\\n\\\\n        if (typeof this._interface._rpcEncode === \\\\\\\"function\\\\\\\") {\\\\n          const encoded_obj = this._interface._rpcEncode(v);\\\\n\\\\n          if (encoded_obj && encoded_obj.__rpc_dtype__) {\\\\n            bObject[k] = {\\\\n              __jailed_type__: \\\\\\\"custom_encoding\\\\\\\",\\\\n              __value__: encoded_obj\\\\n            };\\\\n            continue;\\\\n          } // if the returned object does not contain __jailed_type__, assuming the object has been transformed\\\\n          else {\\\\n              v = encoded_obj;\\\\n            }\\\\n        }\\\\n\\\\n        if (typeof v === \\\\\\\"function\\\\\\\") {\\\\n          if (as_interface) {\\\\n            const encoded_interface = this._plugin_interfaces[aObject[\\\\\\\"__id__\\\\\\\"]];\\\\n            bObject[k] = {\\\\n              __jailed_type__: \\\\\\\"plugin_interface\\\\\\\",\\\\n              __plugin_id__: aObject[\\\\\\\"__id__\\\\\\\"],\\\\n              __value__: k,\\\\n              num: null\\\\n            };\\\\n            encoded_interface[k] = v;\\\\n            continue;\\\\n          }\\\\n\\\\n          let interfaceFuncName = null;\\\\n\\\\n          for (var name in this._interface) {\\\\n            if (this._interface.hasOwnProperty(name)) {\\\\n              if (name.startsWith(\\\\\\\"_\\\\\\\")) continue;\\\\n\\\\n              if (this._interface[name] === v) {\\\\n                interfaceFuncName = name;\\\\n                break;\\\\n              }\\\\n            }\\\\n          } // search for prototypes\\\\n\\\\n\\\\n          var functions = Object.getOwnPropertyNames(Object.getPrototypeOf(this._interface));\\\\n\\\\n          for (var i = 0; i < functions.length; i++) {\\\\n            var name_ = functions[i];\\\\n            if (name_.startsWith(\\\\\\\"_\\\\\\\")) continue;\\\\n\\\\n            if (this._interface[name_] === v) {\\\\n              interfaceFuncName = name_;\\\\n              break;\\\\n            }\\\\n          }\\\\n\\\\n          if (!interfaceFuncName) {\\\\n            var id = this._store.put(v);\\\\n\\\\n            bObject[k] = {\\\\n              __jailed_type__: \\\\\\\"callback\\\\\\\",\\\\n              __value__: v.constructor && v.constructor.name || id,\\\\n              num: id\\\\n            };\\\\n          } else {\\\\n            bObject[k] = {\\\\n              __jailed_type__: \\\\\\\"interface\\\\\\\",\\\\n              __value__: interfaceFuncName,\\\\n              num: null\\\\n            };\\\\n          }\\\\n        } else if (\\\\n        /*global tf*/\\\\n        typeof tf !== \\\\\\\"undefined\\\\\\\" && tf.Tensor && v instanceof tf.Tensor) {\\\\n          const v_buffer = v.dataSync();\\\\n\\\\n          if (v._transfer || _transfer) {\\\\n            transferables.push(v_buffer.buffer);\\\\n            delete v._transfer;\\\\n          }\\\\n\\\\n          bObject[k] = {\\\\n            __jailed_type__: \\\\\\\"ndarray\\\\\\\",\\\\n            __value__: v_buffer,\\\\n            __shape__: v.shape,\\\\n            __dtype__: v.dtype\\\\n          };\\\\n        } else if (\\\\n        /*global nj*/\\\\n        typeof nj !== \\\\\\\"undefined\\\\\\\" && nj.NdArray && v instanceof nj.NdArray) {\\\\n          var dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][v.selection.data.constructor.name];\\\\n\\\\n          if (v._transfer || _transfer) {\\\\n            transferables.push(v.selection.data.buffer);\\\\n            delete v._transfer;\\\\n          }\\\\n\\\\n          bObject[k] = {\\\\n            __jailed_type__: \\\\\\\"ndarray\\\\\\\",\\\\n            __value__: v.selection.data,\\\\n            __shape__: v.shape,\\\\n            __dtype__: dtype\\\\n          };\\\\n        } else if (v instanceof Error) {\\\\n          console.error(v);\\\\n          bObject[k] = {\\\\n            __jailed_type__: \\\\\\\"error\\\\\\\",\\\\n            __value__: v.toString()\\\\n          };\\\\n        } else if (typeof File !== \\\\\\\"undefined\\\\\\\" && v instanceof File) {\\\\n          bObject[k] = {\\\\n            __jailed_type__: \\\\\\\"file\\\\\\\",\\\\n            __value__: v,\\\\n            __relative_path__: v.relativePath || v.webkitRelativePath\\\\n          };\\\\n        } // send objects supported by structure clone algorithm\\\\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\\\\n        else if (v !== Object(v) || v instanceof Boolean || v instanceof String || v instanceof Date || v instanceof RegExp || v instanceof Blob || v instanceof ImageData || typeof FileList !== \\\\\\\"undefined\\\\\\\" && v instanceof FileList) {\\\\n            bObject[k] = {\\\\n              __jailed_type__: \\\\\\\"argument\\\\\\\",\\\\n              __value__: v\\\\n            };\\\\n          } else if (v instanceof ArrayBuffer) {\\\\n            if (v._transfer || _transfer) {\\\\n              transferables.push(v);\\\\n              delete v._transfer;\\\\n            }\\\\n\\\\n            bObject[k] = {\\\\n              __jailed_type__: \\\\\\\"argument\\\\\\\",\\\\n              __value__: v\\\\n            };\\\\n          } else if (v instanceof ArrayBufferView) {\\\\n            if (v._transfer || _transfer) {\\\\n              transferables.push(v.buffer);\\\\n              delete v._transfer;\\\\n            }\\\\n\\\\n            bObject[k] = {\\\\n              __jailed_type__: \\\\\\\"argument\\\\\\\",\\\\n              __value__: v\\\\n            };\\\\n          } // TODO: support also Map and Set\\\\n          // TODO: avoid object such as DynamicPlugin instance.\\\\n          else if (v.__as_interface__) {\\\\n              bObject[k] = this._encode(v, true);\\\\n            } else if (typeof v === \\\\\\\"object\\\\\\\" || Array.isArray(v)) {\\\\n              bObject[k] = this._encode(v, as_interface); // move transferables to the top level object\\\\n\\\\n              if (bObject[k].__transferables__) {\\\\n                for (var t = 0; t < bObject[k].__transferables__.length; t++) {\\\\n                  transferables.push(bObject[k].__transferables__[t]);\\\\n                }\\\\n\\\\n                delete bObject[k].__transferables__;\\\\n              }\\\\n            } else if (typeof v === \\\\\\\"object\\\\\\\" && v.constructor) {\\\\n              throw \\\\\\\"Unsupported data type for transferring between the plugin and the main app: \\\\\\\" + k + \\\\\\\" : \\\\\\\" + v.constructor.name;\\\\n            } else {\\\\n              throw \\\\\\\"Unsupported data type for transferring between the plugin and the main app: \\\\\\\" + k + \\\\\\\",\\\\\\\" + v;\\\\n            }\\\\n      }\\\\n    }\\\\n\\\\n    if (transferables.length > 0) {\\\\n      bObject.__transferables__ = transferables;\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  _decode(aObject, callbackId, withPromise) {\\\\n    if (!aObject) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    var bObject, v, k;\\\\n\\\\n    if (aObject.hasOwnProperty(\\\\\\\"__jailed_type__\\\\\\\") && aObject.hasOwnProperty(\\\\\\\"__value__\\\\\\\")) {\\\\n      if (aObject.__jailed_type__.startsWith(\\\\\\\"custom_encoding\\\\\\\")) {\\\\n        if (typeof this._interface._rpcDecode === \\\\\\\"function\\\\\\\") {\\\\n          const decodedObj = this._interface._rpcDecode(aObject.__value__);\\\\n\\\\n          bObject = decodedObj;\\\\n        } else {\\\\n          bObject = aObject;\\\\n        }\\\\n      } else if (aObject.__jailed_type__ === \\\\\\\"callback\\\\\\\") {\\\\n        bObject = this._genRemoteCallback(callbackId, aObject.num, withPromise);\\\\n      } else if (aObject.__jailed_type__ === \\\\\\\"interface\\\\\\\") {\\\\n        bObject = this._remote[aObject.__value__] || this._genRemoteMethod(aObject.__value__);\\\\n      } else if (aObject.__jailed_type__ === \\\\\\\"plugin_interface\\\\\\\") {\\\\n        bObject = this._genRemoteMethod(aObject.__value__, aObject.__plugin_id__);\\\\n      } else if (aObject.__jailed_type__ === \\\\\\\"ndarray\\\\\\\") {\\\\n        /*global nj tf*/\\\\n        //create build array/tensor if used in the plugin\\\\n        if (this.id === \\\\\\\"__plugin__\\\\\\\" && typeof nj !== \\\\\\\"undefined\\\\\\\" && nj.array) {\\\\n          if (Array.isArray(aObject.__value__)) {\\\\n            aObject.__value__ = aObject.__value__.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          bObject = nj.array(aObject.__value__, aObject.__dtype__).reshape(aObject.__shape__);\\\\n        } else if (this.id === \\\\\\\"__plugin__\\\\\\\" && typeof tf !== \\\\\\\"undefined\\\\\\\" && tf.Tensor) {\\\\n          if (Array.isArray(aObject.__value__)) {\\\\n            aObject.__value__ = aObject.__value__.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          bObject = tf.tensor(aObject.__value__, aObject.__shape__, aObject.__dtype__);\\\\n        } else {\\\\n          //keep it as regular if transfered to the main app\\\\n          bObject = aObject;\\\\n        }\\\\n      } else if (aObject.__jailed_type__ === \\\\\\\"error\\\\\\\") {\\\\n        bObject = new Error(aObject.__value__);\\\\n      } else if (aObject.__jailed_type__ === \\\\\\\"file\\\\\\\") {\\\\n        bObject = aObject.__value__; //patch relativePath\\\\n\\\\n        bObject.relativePath = aObject.__relative_path__;\\\\n      } else if (aObject.__jailed_type__ === \\\\\\\"argument\\\\\\\") {\\\\n        bObject = aObject.__value__;\\\\n      }\\\\n\\\\n      return bObject;\\\\n    } else {\\\\n      var isarray = Array.isArray(aObject);\\\\n      bObject = isarray ? [] : {};\\\\n\\\\n      for (k in aObject) {\\\\n        if (isarray || aObject.hasOwnProperty(k)) {\\\\n          v = aObject[k];\\\\n\\\\n          if (typeof v === \\\\\\\"object\\\\\\\" || Array.isArray(v)) {\\\\n            bObject[k] = this._decode(v, callbackId, withPromise);\\\\n          }\\\\n        }\\\\n      }\\\\n\\\\n      return bObject;\\\\n    }\\\\n  }\\\\n\\\\n  _wrap(args, as_interface) {\\\\n    var wrapped = this._encode(args, as_interface);\\\\n\\\\n    var result = {\\\\n      args: wrapped\\\\n    };\\\\n    return result;\\\\n  }\\\\n  /**\\\\n   * Unwraps the set of arguments delivered from the remote site,\\\\n   * replaces all callback identifiers with a function which will\\\\n   * initiate sending that callback identifier back to other site\\\\n   *\\\\n   * @param {Object} args to unwrap\\\\n   *\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Array} unwrapped args\\\\n   */\\\\n\\\\n\\\\n  _unwrap(args, withPromise) {\\\\n    // var called = false;\\\\n    // wraps each callback so that the only one could be called\\\\n    // var once(cb) {\\\\n    //     return function() {\\\\n    //         if (!called) {\\\\n    //             called = true;\\\\n    //             return cb.apply(this, arguments);\\\\n    //         } else {\\\\n    //             var msg =\\\\n    //               'A callback from this set has already been executed';\\\\n    //             throw new Error(msg);\\\\n    //         }\\\\n    //     };\\\\n    // }\\\\n    var result = this._decode(args.args, args.callbackId, withPromise);\\\\n\\\\n    return result;\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * callback. When the generated function is called, it will send\\\\n   * the corresponding message to the remote site asking it to\\\\n   * execute the particular callback previously saved during a call\\\\n   * by the remote site a method from the interface of this site\\\\n   *\\\\n   * @param {Number} id of the remote callback to execute\\\\n   * @param {Number} argNum argument index of the callback\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Function} wrapped remote callback\\\\n   */\\\\n\\\\n\\\\n  _genRemoteCallback(id, argNum, withPromise) {\\\\n    var me = this;\\\\n    var remoteCallback;\\\\n\\\\n    if (withPromise) {\\\\n      remoteCallback = function () {\\\\n        return new Promise((resolve, reject) => {\\\\n          var args = me._wrap(Array.prototype.slice.call(arguments));\\\\n\\\\n          var transferables = args.args.__transferables__;\\\\n          if (transferables) delete args.args.__transferables__;\\\\n          resolve.__jailed_pairs__ = reject;\\\\n          reject.__jailed_pairs__ = resolve;\\\\n\\\\n          try {\\\\n            me._connection.send({\\\\n              type: \\\\\\\"callback\\\\\\\",\\\\n              id: id,\\\\n              num: argNum,\\\\n              args: args,\\\\n              // pid :  me.id,\\\\n              promise: me._wrap([resolve, reject])\\\\n            }, transferables);\\\\n          } catch (e) {\\\\n            reject(`Failed to exectue remote callback (id: ${id}, argNum: ${argNum}).`);\\\\n          }\\\\n        });\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    } else {\\\\n      remoteCallback = function () {\\\\n        var args = me._wrap(Array.prototype.slice.call(arguments));\\\\n\\\\n        var transferables = args.args.__transferables__;\\\\n        if (transferables) delete args.args.__transferables__;\\\\n        return me._connection.send({\\\\n          type: \\\\\\\"callback\\\\\\\",\\\\n          id: id,\\\\n          num: argNum,\\\\n          args: args // pid :  me.id\\\\n\\\\n        }, transferables);\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Sends the notification message and breaks the connection\\\\n   */\\\\n\\\\n\\\\n  disconnect() {\\\\n    this._connection.send({\\\\n      type: \\\\\\\"disconnect\\\\\\\"\\\\n    });\\\\n\\\\n    setTimeout(this._connection.disconnect, 2000);\\\\n  }\\\\n  /**\\\\n   * Set a handler to be called when received a disconnect message\\\\n   * from the remote site\\\\n   *\\\\n   * @param {Function} handler\\\\n   */\\\\n\\\\n\\\\n  onDisconnect(handler) {\\\\n    this._disconnectHandler = handler;\\\\n  }\\\\n\\\\n}\\\\n/**\\\\n * ReferenceStore is a special object which stores other objects\\\\n * and provides the references (number) instead. This reference\\\\n * may then be sent over a json-based communication channel (IPC\\\\n * to another Node.js process or a message to the Worker). Other\\\\n * site may then provide the reference in the responce message\\\\n * implying the given object should be activated.\\\\n *\\\\n * Primary usage for the ReferenceStore is a storage for the\\\\n * callbacks, which therefore makes it possible to initiate a\\\\n * callback execution by the opposite site (which normally cannot\\\\n * directly execute functions over the communication channel).\\\\n *\\\\n * Each stored object can only be fetched once and is not\\\\n * available for the second time. Each stored object must be\\\\n * fetched, since otherwise it will remain stored forever and\\\\n * consume memory.\\\\n *\\\\n * Stored object indeces are simply the numbers, which are however\\\\n * released along with the objects, and are later reused again (in\\\\n * order to postpone the overflow, which should not likely happen,\\\\n * but anyway).\\\\n */\\\\n\\\\nclass ReferenceStore {\\\\n  constructor() {\\\\n    this._store = {}; // stored object\\\\n\\\\n    this._indices = [0]; // smallest available indices\\\\n\\\\n    this._readyHandler = function () {};\\\\n\\\\n    this._busyHandler = function () {};\\\\n\\\\n    this._readyHandler();\\\\n  }\\\\n  /**\\\\n   * call handler when the store is empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onReady(readyHandler) {\\\\n    this._readyHandler = readyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * call handler when the store is not empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onBusy(busyHandler) {\\\\n    this._busyHandler = busyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * get the length of the store\\\\n   *\\\\n   */\\\\n\\\\n\\\\n  getStack() {\\\\n    return Object.keys(this._store).length;\\\\n  }\\\\n  /**\\\\n   * @function _genId() generates the new reference id\\\\n   *\\\\n   * @returns {Number} smallest available id and reserves it\\\\n   */\\\\n\\\\n\\\\n  _genId() {\\\\n    var id;\\\\n\\\\n    if (this._indices.length === 1) {\\\\n      id = this._indices[0]++;\\\\n    } else {\\\\n      id = this._indices.shift();\\\\n    }\\\\n\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Releases the given reference id so that it will be available by\\\\n   * another object stored\\\\n   *\\\\n   * @param {Number} id to release\\\\n   */\\\\n\\\\n\\\\n  _releaseId(id) {\\\\n    for (var i = 0; i < this._indices.length; i++) {\\\\n      if (id < this._indices[i]) {\\\\n        this._indices.splice(i, 0, id);\\\\n\\\\n        break;\\\\n      }\\\\n    } // cleaning-up the sequence tail\\\\n\\\\n\\\\n    for (i = this._indices.length - 1; i >= 0; i--) {\\\\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\\\\n        this._indices.pop();\\\\n      } else {\\\\n        break;\\\\n      }\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Stores the given object and returns the refernce id instead\\\\n   *\\\\n   * @param {Object} obj to store\\\\n   *\\\\n   * @returns {Number} reference id of the stored object\\\\n   */\\\\n\\\\n\\\\n  put(obj) {\\\\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\\\\n      this._busyHandler();\\\\n    }\\\\n\\\\n    var id = this._genId();\\\\n\\\\n    this._store[id] = obj;\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Retrieves previously stored object and releases its reference\\\\n   *\\\\n   * @param {Number} id of an object to retrieve\\\\n   */\\\\n\\\\n\\\\n  fetch(id) {\\\\n    var obj = this._store[id];\\\\n\\\\n    if (obj && !obj.__remote_method) {\\\\n      delete this._store[id];\\\\n\\\\n      this._releaseId(id);\\\\n\\\\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\\\\n        this._readyHandler();\\\\n      }\\\\n    }\\\\n\\\\n    if (obj && obj.__jailed_pairs__) {\\\\n      const _id = getKeyByValue(this._store, obj.__jailed_pairs__);\\\\n\\\\n      this.fetch(_id);\\\\n    }\\\\n\\\\n    return obj;\\\\n  }\\\\n  /**\\\\n   * Retrieves previously stored object\\\\n   *\\\\n   * @param {Number} id of an object to retrieve\\\\n   */\\\\n  // retrieve(id) {\\\\n  //     var obj = this._store[id];\\\\n  //     return obj;\\\\n  // }\\\\n\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/rpc.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/utils.js\\\":\\n/*!**********************!*\\\\\\n  !*** ./src/utils.js ***!\\n  \\\\**********************/\\n/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"randId\\\\\\\", function() { return randId; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"dtypeToTypedArray\\\\\\\", function() { return dtypeToTypedArray; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"typedArrayToDtype\\\\\\\", function() { return typedArrayToDtype; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"cacheRequirements\\\\\\\", function() { return cacheRequirements; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"setupServiceWorker\\\\\\\", function() { return setupServiceWorker; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"urlJoin\\\\\\\", function() { return urlJoin; });\\\\nfunction randId() {\\\\n  return Math.random().toString(36).substr(2, 10);\\\\n}\\\\nconst dtypeToTypedArray = {\\\\n  int8: \\\\\\\"Int8Array\\\\\\\",\\\\n  int16: \\\\\\\"Int16Array\\\\\\\",\\\\n  int32: \\\\\\\"Int32Array\\\\\\\",\\\\n  uint8: \\\\\\\"Uint8Array\\\\\\\",\\\\n  uint16: \\\\\\\"Uint16Array\\\\\\\",\\\\n  uint32: \\\\\\\"Uint32Array\\\\\\\",\\\\n  float32: \\\\\\\"Float32Array\\\\\\\",\\\\n  float64: \\\\\\\"Float64Array\\\\\\\",\\\\n  array: \\\\\\\"Array\\\\\\\"\\\\n};\\\\nconst typedArrayToDtype = {\\\\n  Int8Array: \\\\\\\"int8\\\\\\\",\\\\n  Int16Array: \\\\\\\"int16\\\\\\\",\\\\n  Int32Array: \\\\\\\"int32\\\\\\\",\\\\n  Uint8Array: \\\\\\\"uint8\\\\\\\",\\\\n  Uint16Array: \\\\\\\"uint16\\\\\\\",\\\\n  Uint32Array: \\\\\\\"uint32\\\\\\\",\\\\n  Float32Array: \\\\\\\"float32\\\\\\\",\\\\n  Float64Array: \\\\\\\"float64\\\\\\\",\\\\n  Array: \\\\\\\"array\\\\\\\"\\\\n};\\\\n\\\\nfunction cacheUrlInServiceWorker(url) {\\\\n  return new Promise(function (resolve, reject) {\\\\n    const message = {\\\\n      command: \\\\\\\"add\\\\\\\",\\\\n      url: url\\\\n    };\\\\n\\\\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\\\\n      reject(\\\\\\\"Service worker is not supported.\\\\\\\");\\\\n      return;\\\\n    }\\\\n\\\\n    const messageChannel = new MessageChannel();\\\\n\\\\n    messageChannel.port1.onmessage = function (event) {\\\\n      if (event.data && event.data.error) {\\\\n        reject(event.data.error);\\\\n      } else {\\\\n        resolve(event.data && event.data.result);\\\\n      }\\\\n    };\\\\n\\\\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\\\\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\\\\n    } else {\\\\n      reject(\\\\\\\"Service worker controller is not available\\\\\\\");\\\\n    }\\\\n  });\\\\n}\\\\n\\\\nasync function cacheRequirements(requirements) {\\\\n  if (requirements && requirements.length > 0) {\\\\n    for (let req of requirements) {\\\\n      //remove prefix\\\\n      if (req.startsWith(\\\\\\\"js:\\\\\\\")) req = req.slice(3);\\\\n      if (req.startsWith(\\\\\\\"css:\\\\\\\")) req = req.slice(4);\\\\n      if (req.startsWith(\\\\\\\"cache:\\\\\\\")) req = req.slice(6);\\\\n      if (!req.startsWith(\\\\\\\"http\\\\\\\")) continue;\\\\n      await cacheUrlInServiceWorker(req).catch(e => {\\\\n        console.error(e);\\\\n      });\\\\n    }\\\\n  }\\\\n}\\\\nfunction setupServiceWorker(targetOrigin, cacheCallback) {\\\\n  // register service worker for offline access\\\\n  if (\\\\\\\"serviceWorker\\\\\\\" in navigator) {\\\\n    window.addEventListener(\\\\\\\"load\\\\\\\", function () {\\\\n      navigator.serviceWorker.register(\\\\\\\"/plugin-service-worker.js\\\\\\\").then(function (registration) {\\\\n        // Registration was successful\\\\n        console.log(\\\\\\\"ServiceWorker registration successful with scope: \\\\\\\", registration.scope);\\\\n      }, function (err) {\\\\n        // registration failed :(\\\\n        console.log(\\\\\\\"ServiceWorker registration failed: \\\\\\\", err);\\\\n      });\\\\n      targetOrigin = targetOrigin || \\\\\\\"*\\\\\\\";\\\\n      cacheCallback = cacheCallback || cacheRequirements;\\\\n\\\\n      if (cacheCallback && typeof cacheCallback !== \\\\\\\"function\\\\\\\") {\\\\n        throw new Error(\\\\\\\"config.cache_requirements must be a function\\\\\\\");\\\\n      }\\\\n\\\\n      window.addEventListener(\\\\\\\"message\\\\\\\", function (e) {\\\\n        if (targetOrigin === \\\\\\\"*\\\\\\\" || e.origin === targetOrigin) {\\\\n          const m = e.data;\\\\n\\\\n          if (m.type === \\\\\\\"cacheRequirements\\\\\\\") {\\\\n            cacheCallback(m.requirements);\\\\n          }\\\\n        }\\\\n      });\\\\n    });\\\\n  }\\\\n} //#Source https://bit.ly/2neWfJ2\\\\n\\\\nfunction urlJoin(...args) {\\\\n  return args.join(\\\\\\\"/\\\\\\\").replace(/[\\\\\\\\/]+/g, \\\\\\\"/\\\\\\\").replace(/^(.+):\\\\\\\\//, \\\\\\\"$1://\\\\\\\").replace(/^file:/, \\\\\\\"file:/\\\\\\\").replace(/\\\\\\\\/(\\\\\\\\?|&|#[^!])/g, \\\\\\\"$1\\\\\\\").replace(/\\\\\\\\?/g, \\\\\\\"&\\\\\\\").replace(\\\\\\\"&\\\\\\\", \\\\\\\"?\\\\\\\");\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWpveVJQQy9zcmMvdXRpbHMuanM/YTMwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmFuZElkKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKVxuICAgIC50b1N0cmluZygzNilcbiAgICAuc3Vic3RyKDIsIDEwKTtcbn1cblxuZXhwb3J0IGNvbnN0IGR0eXBlVG9UeXBlZEFycmF5ID0ge1xuICBpbnQ4OiBcIkludDhBcnJheVwiLFxuICBpbnQxNjogXCJJbnQxNkFycmF5XCIsXG4gIGludDMyOiBcIkludDMyQXJyYXlcIixcbiAgdWludDg6IFwiVWludDhBcnJheVwiLFxuICB1aW50MTY6IFwiVWludDE2QXJyYXlcIixcbiAgdWludDMyOiBcIlVpbnQzMkFycmF5XCIsXG4gIGZsb2F0MzI6IFwiRmxvYXQzMkFycmF5XCIsXG4gIGZsb2F0NjQ6IFwiRmxvYXQ2NEFycmF5XCIsXG4gIGFycmF5OiBcIkFycmF5XCJcbn07XG5leHBvcnQgY29uc3QgdHlwZWRBcnJheVRvRHR5cGUgPSB7XG4gIEludDhBcnJheTogXCJpbnQ4XCIsXG4gIEludDE2QXJyYXk6IFwiaW50MTZcIixcbiAgSW50MzJBcnJheTogXCJpbnQzMlwiLFxuICBVaW50OEFycmF5OiBcInVpbnQ4XCIsXG4gIFVpbnQxNkFycmF5OiBcInVpbnQxNlwiLFxuICBVaW50MzJBcnJheTogXCJ1aW50MzJcIixcbiAgRmxvYXQzMkFycmF5OiBcImZsb2F0MzJcIixcbiAgRmxvYXQ2NEFycmF5OiBcImZsb2F0NjRcIixcbiAgQXJyYXk6IFwiYXJyYXlcIlxufTtcblxuZnVuY3Rpb24gY2FjaGVVcmxJblNlcnZpY2VXb3JrZXIodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgY29tbWFuZDogXCJhZGRcIixcbiAgICAgIHVybDogdXJsXG4gICAgfTtcbiAgICBpZiAoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyIHx8ICFuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcikge1xuICAgICAgcmVqZWN0KFwiU2VydmljZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2VDaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgbWVzc2FnZUNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kYXRhICYmIGV2ZW50LmRhdGEuZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGV2ZW50LmRhdGEuZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShldmVudC5kYXRhICYmIGV2ZW50LmRhdGEucmVzdWx0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyICYmIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgW1xuICAgICAgICBtZXNzYWdlQ2hhbm5lbC5wb3J0MlxuICAgICAgXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdChcIlNlcnZpY2Ugd29ya2VyIGNvbnRyb2xsZXIgaXMgbm90IGF2YWlsYWJsZVwiKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2FjaGVSZXF1aXJlbWVudHMocmVxdWlyZW1lbnRzKSB7XG4gIGlmIChyZXF1aXJlbWVudHMgJiYgcmVxdWlyZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKGxldCByZXEgb2YgcmVxdWlyZW1lbnRzKSB7XG4gICAgICAvL3JlbW92ZSBwcmVmaXhcbiAgICAgIGlmIChyZXEuc3RhcnRzV2l0aChcImpzOlwiKSkgcmVxID0gcmVxLnNsaWNlKDMpO1xuICAgICAgaWYgKHJlcS5zdGFydHNXaXRoKFwiY3NzOlwiKSkgcmVxID0gcmVxLnNsaWNlKDQpO1xuICAgICAgaWYgKHJlcS5zdGFydHNXaXRoKFwiY2FjaGU6XCIpKSByZXEgPSByZXEuc2xpY2UoNik7XG4gICAgICBpZiAoIXJlcS5zdGFydHNXaXRoKFwiaHR0cFwiKSkgY29udGludWU7XG5cbiAgICAgIGF3YWl0IGNhY2hlVXJsSW5TZXJ2aWNlV29ya2VyKHJlcSkuY2F0Y2goZSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU2VydmljZVdvcmtlcih0YXJnZXRPcmlnaW4sIGNhY2hlQ2FsbGJhY2spIHtcbiAgLy8gcmVnaXN0ZXIgc2VydmljZSB3b3JrZXIgZm9yIG9mZmxpbmUgYWNjZXNzXG4gIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihcIi9wbHVnaW4tc2VydmljZS13b3JrZXIuanNcIikudGhlbihcbiAgICAgICAgZnVuY3Rpb24ocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgLy8gUmVnaXN0cmF0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBcIlNlcnZpY2VXb3JrZXIgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwgd2l0aCBzY29wZTogXCIsXG4gICAgICAgICAgICByZWdpc3RyYXRpb24uc2NvcGVcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAvLyByZWdpc3RyYXRpb24gZmFpbGVkIDooXG4gICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlV29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6IFwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGFyZ2V0T3JpZ2luID0gdGFyZ2V0T3JpZ2luIHx8IFwiKlwiO1xuICAgICAgY2FjaGVDYWxsYmFjayA9IGNhY2hlQ2FsbGJhY2sgfHwgY2FjaGVSZXF1aXJlbWVudHM7XG4gICAgICBpZiAoY2FjaGVDYWxsYmFjayAmJiB0eXBlb2YgY2FjaGVDYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbmZpZy5jYWNoZV9yZXF1aXJlbWVudHMgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKHRhcmdldE9yaWdpbiA9PT0gXCIqXCIgfHwgZS5vcmlnaW4gPT09IHRhcmdldE9yaWdpbikge1xuICAgICAgICAgIGNvbnN0IG0gPSBlLmRhdGE7XG4gICAgICAgICAgaWYgKG0udHlwZSA9PT0gXCJjYWNoZVJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgICAgICBjYWNoZUNhbGxiYWNrKG0ucmVxdWlyZW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbi8vI1NvdXJjZSBodHRwczovL2JpdC5seS8ybmVXZkoyXG5leHBvcnQgZnVuY3Rpb24gdXJsSm9pbiguLi5hcmdzKSB7XG4gIHJldHVybiBhcmdzXG4gICAgLmpvaW4oXCIvXCIpXG4gICAgLnJlcGxhY2UoL1tcXC9dKy9nLCBcIi9cIilcbiAgICAucmVwbGFjZSgvXiguKyk6XFwvLywgXCIkMTovL1wiKVxuICAgIC5yZXBsYWNlKC9eZmlsZTovLCBcImZpbGU6L1wiKVxuICAgIC5yZXBsYWNlKC9cXC8oXFw/fCZ8I1teIV0pL2csIFwiJDFcIilcbiAgICAucmVwbGFjZSgvXFw/L2csIFwiJlwiKVxuICAgIC5yZXBsYWNlKFwiJlwiLCBcIj9cIik7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFRQSIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./src/utils.js\\\\n\\\");\\n\\n/***/ })\\n\\n/******/ });\", null);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\n");

/***/ }),

/***/ "./src/pluginCore.js":
/*!***************************!*\
  !*** ./src/pluginCore.js ***!
  \***************************/
/*! exports provided: connectRPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"connectRPC\", function() { return connectRPC; });\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/**\n * Core plugin script loaded into the plugin process/thread.\n *\n * Initializes the plugin-site API global methods.\n */\n\nfunction connectRPC(connection, config) {\n  const application = {};\n  config = config || {};\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\"RPC\"](connection, config);\n  rpc.onGetInterface(function () {\n    launchConnected();\n  });\n  rpc.onRemoteUpdate(function () {\n    application.remote = rpc.getRemote();\n    if (!application.remote) return;\n    const api = application.remote || {};\n\n    if (api.export) {\n      console.error(\"WARNING: overwriting function 'export'.\");\n    }\n\n    if (api.onload) {\n      console.error(\"WARNING: overwriting function 'onload'.\");\n    }\n\n    if (api.dispose) {\n      console.error(\"WARNING: overwriting function 'dispose'.\");\n    }\n\n    api.export = application.setInterface;\n    api.onLoad = application.whenConnected;\n    api.dispose = application.disconnect;\n\n    if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n      self.api = api;\n      self.postMessage({\n        type: \"imjoy_remote_api_ready\"\n      });\n    } else if (typeof window) {\n      window.dispatchEvent(new CustomEvent(\"imjoy_remote_api_ready\", {\n        detail: api\n      }));\n    }\n  });\n  var connected = false;\n  var connectedHandlers = [];\n\n  var launchConnected = function () {\n    if (!connected) {\n      connected = true;\n      var handler;\n\n      while (handler = connectedHandlers.pop()) {\n        handler();\n      }\n    }\n  };\n\n  var checkHandler = function (handler) {\n    var type = typeof handler;\n\n    if (type !== \"function\") {\n      var msg = \"A function may only be subsribed to the event, \" + type + \" was provided instead\";\n      throw new Error(msg);\n    }\n\n    return handler;\n  };\n  /**\n   * Sets a function executed after the connection to the\n   * application is estaplished, and the initial interface-exchange\n   * messaging is completed\n   *\n   * @param {Function} handler to be called upon initialization\n   */\n\n\n  application.whenConnected = function (handler) {\n    handler = checkHandler(handler);\n\n    if (connected) {\n      handler();\n    } else {\n      connectedHandlers.push(handler);\n    }\n  };\n  /**\n   * Sets the plugin interface available to the application\n   *\n   * @param {Object} _interface to set\n   */\n\n\n  application.setInterface = function (_interface) {\n    rpc.setInterface(_interface);\n  };\n  /**\n   * Disconnects the plugin from the application (sending\n   * notification message) and destroys itself\n   */\n\n\n  application.disconnect = function (_interface) {\n    rpc.disconnect();\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDL3NyYy9wbHVnaW5Db3JlLmpzP2E0NzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3JlIHBsdWdpbiBzY3JpcHQgbG9hZGVkIGludG8gdGhlIHBsdWdpbiBwcm9jZXNzL3RocmVhZC5cbiAqXG4gKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLXNpdGUgQVBJIGdsb2JhbCBtZXRob2RzLlxuICovXG5pbXBvcnQgeyBSUEMgfSBmcm9tIFwiLi9ycGMuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RSUEMoY29ubmVjdGlvbiwgY29uZmlnKSB7XG4gIGNvbnN0IGFwcGxpY2F0aW9uID0ge307XG4gIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZyk7XG4gIHJwYy5vbkdldEludGVyZmFjZShmdW5jdGlvbigpIHtcbiAgICBsYXVuY2hDb25uZWN0ZWQoKTtcbiAgfSk7XG5cbiAgcnBjLm9uUmVtb3RlVXBkYXRlKGZ1bmN0aW9uKCkge1xuICAgIGFwcGxpY2F0aW9uLnJlbW90ZSA9IHJwYy5nZXRSZW1vdGUoKTtcbiAgICBpZiAoIWFwcGxpY2F0aW9uLnJlbW90ZSkgcmV0dXJuO1xuICAgIGNvbnN0IGFwaSA9IGFwcGxpY2F0aW9uLnJlbW90ZSB8fCB7fTtcbiAgICBpZiAoYXBpLmV4cG9ydCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIldBUk5JTkc6IG92ZXJ3cml0aW5nIGZ1bmN0aW9uICdleHBvcnQnLlwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5vbmxvYWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJXQVJOSU5HOiBvdmVyd3JpdGluZyBmdW5jdGlvbiAnb25sb2FkJy5cIik7XG4gICAgfVxuICAgIGlmIChhcGkuZGlzcG9zZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIldBUk5JTkc6IG92ZXJ3cml0aW5nIGZ1bmN0aW9uICdkaXNwb3NlJy5cIik7XG4gICAgfVxuICAgIGFwaS5leHBvcnQgPSBhcHBsaWNhdGlvbi5zZXRJbnRlcmZhY2U7XG4gICAgYXBpLm9uTG9hZCA9IGFwcGxpY2F0aW9uLndoZW5Db25uZWN0ZWQ7XG4gICAgYXBpLmRpc3Bvc2UgPSBhcHBsaWNhdGlvbi5kaXNjb25uZWN0O1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlXG4gICAgKSB7XG4gICAgICBzZWxmLmFwaSA9IGFwaTtcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImltam95X3JlbW90ZV9hcGlfcmVhZHlcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93KSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiLCB7IGRldGFpbDogYXBpIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGNvbm5lY3RlZCA9IGZhbHNlO1xuICB2YXIgY29ubmVjdGVkSGFuZGxlcnMgPSBbXTtcblxuICB2YXIgbGF1bmNoQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICAgIGNvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAgIHZhciBoYW5kbGVyO1xuICAgICAgd2hpbGUgKChoYW5kbGVyID0gY29ubmVjdGVkSGFuZGxlcnMucG9wKCkpKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGNoZWNrSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBoYW5kbGVyO1xuICAgIGlmICh0eXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHZhciBtc2cgPVxuICAgICAgICBcIkEgZnVuY3Rpb24gbWF5IG9ubHkgYmUgc3Vic3JpYmVkIHRvIHRoZSBldmVudCwgXCIgK1xuICAgICAgICB0eXBlICtcbiAgICAgICAgXCIgd2FzIHByb3ZpZGVkIGluc3RlYWRcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cblxuICAgIHJldHVybiBoYW5kbGVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGEgZnVuY3Rpb24gZXhlY3V0ZWQgYWZ0ZXIgdGhlIGNvbm5lY3Rpb24gdG8gdGhlXG4gICAqIGFwcGxpY2F0aW9uIGlzIGVzdGFwbGlzaGVkLCBhbmQgdGhlIGluaXRpYWwgaW50ZXJmYWNlLWV4Y2hhbmdlXG4gICAqIG1lc3NhZ2luZyBpcyBjb21wbGV0ZWRcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciB0byBiZSBjYWxsZWQgdXBvbiBpbml0aWFsaXphdGlvblxuICAgKi9cbiAgYXBwbGljYXRpb24ud2hlbkNvbm5lY3RlZCA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBoYW5kbGVyID0gY2hlY2tIYW5kbGVyKGhhbmRsZXIpO1xuICAgIGlmIChjb25uZWN0ZWQpIHtcbiAgICAgIGhhbmRsZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29ubmVjdGVkSGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBsdWdpbiBpbnRlcmZhY2UgYXZhaWxhYmxlIHRvIHRoZSBhcHBsaWNhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gX2ludGVyZmFjZSB0byBzZXRcbiAgICovXG4gIGFwcGxpY2F0aW9uLnNldEludGVyZmFjZSA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICBycGMuc2V0SW50ZXJmYWNlKF9pbnRlcmZhY2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyB0aGUgcGx1Z2luIGZyb20gdGhlIGFwcGxpY2F0aW9uIChzZW5kaW5nXG4gICAqIG5vdGlmaWNhdGlvbiBtZXNzYWdlKSBhbmQgZGVzdHJveXMgaXRzZWxmXG4gICAqL1xuICBhcHBsaWNhdGlvbi5kaXNjb25uZWN0ID0gZnVuY3Rpb24oX2ludGVyZmFjZSkge1xuICAgIHJwYy5kaXNjb25uZWN0KCk7XG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQUtBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/pluginCore.js\n");

/***/ }),

/***/ "./src/pluginIframe.js":
/*!*****************************!*\
  !*** ./src/pluginIframe.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return setupIframe; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \"./src/pluginCore.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\nfunction setupIframe(config) {\n  config = config || {};\n  const targetOrigin = config.target_origin || \"*\"; // Create a new, plain <span> element\n\n  function _htmlToElement(html) {\n    var template = document.createElement(\"template\");\n    html = html.trim(); // Never return a text node of whitespace as the result\n\n    template.innerHTML = html;\n    return template.content.firstChild;\n  }\n\n  var _importScript = function (url) {\n    //url is URL of external file, implementationCode is the code\n    //to be called from the file, location is the location to\n    //insert the <script> element\n    return new Promise((resolve, reject) => {\n      var scriptTag = document.createElement(\"script\");\n      scriptTag.src = url;\n      scriptTag.type = \"text/javascript\";\n      scriptTag.onload = resolve;\n\n      scriptTag.onreadystatechange = function () {\n        if (this.readyState === \"loaded\" || this.readyState === \"complete\") {\n          resolve();\n        }\n      };\n\n      scriptTag.onerror = reject;\n      document.head.appendChild(scriptTag);\n    });\n  }; // support importScripts outside web worker\n\n\n  async function importScripts() {\n    var args = Array.prototype.slice.call(arguments),\n        len = args.length,\n        i = 0;\n\n    for (; i < len; i++) {\n      await _importScript(args[i]);\n    }\n  } // evaluates the provided string\n\n\n  var execute = async function (code) {\n    try {\n      if (code.type === \"requirements\") {\n        if (code.requirements && (Array.isArray(code.requirements) || typeof code.requirements === \"string\")) {\n          try {\n            var link_node;\n            code.requirements = typeof code.requirements === \"string\" ? [code.requirements] : code.requirements;\n\n            if (Array.isArray(code.requirements)) {\n              for (var i = 0; i < code.requirements.length; i++) {\n                if (code.requirements[i].toLowerCase().endsWith(\".css\") || code.requirements[i].startsWith(\"css:\")) {\n                  if (code.requirements[i].startsWith(\"css:\")) {\n                    code.requirements[i] = code.requirements[i].slice(4);\n                  }\n\n                  link_node = document.createElement(\"link\");\n                  link_node.rel = \"stylesheet\";\n                  link_node.href = code.requirements[i];\n                  document.head.appendChild(link_node);\n                } else if (code.requirements[i].toLowerCase().endsWith(\".js\") || code.requirements[i].startsWith(\"js:\")) {\n                  if (code.requirements[i].startsWith(\"js:\")) {\n                    code.requirements[i] = code.requirements[i].slice(3);\n                  }\n\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith(\"http\")) {\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith(\"cache:\")) {//ignore cache\n                } else {\n                  console.log(\"Unprocessed requirements url: \" + code.requirements[i]);\n                }\n              }\n            } else {\n              throw \"unsupported requirements definition\";\n            }\n          } catch (e) {\n            throw \"failed to import required scripts: \" + code.requirements.toString();\n          }\n        }\n      } else if (code.type === \"script\") {\n        if (code.src) {\n          var script_node = document.createElement(\"script\");\n          script_node.setAttribute(\"type\", code.attrs.type);\n          script_node.setAttribute(\"src\", code.src);\n          document.head.appendChild(script_node);\n        } else {\n          if (code.content && (!code.attrs.type || code.attrs.type === \"text/javascript\")) {\n            // document.addEventListener(\"DOMContentLoaded\", function(){\n            eval(code.content); // });\n          } else {\n            var node = document.createElement(\"script\");\n            node.setAttribute(\"type\", code.attrs.type);\n            node.appendChild(document.createTextNode(code.content));\n            document.body.appendChild(node);\n          }\n        }\n      } else if (code.type === \"style\") {\n        var style_node = document.createElement(\"style\");\n\n        if (code.src) {\n          style_node.src = code.src;\n        }\n\n        style_node.innerHTML = code.content;\n        document.head.appendChild(style_node);\n      } else if (code.type === \"link\") {\n        var link_node_ = document.createElement(\"link\");\n\n        if (code.rel) {\n          link_node_.rel = code.rel;\n        }\n\n        if (code.href) {\n          link_node_.href = code.href;\n        }\n\n        if (code.attrs && code.attrs.type) {\n          link_node_.type = code.attrs.type;\n        }\n\n        document.head.appendChild(link_node_);\n      } else if (code.type === \"html\") {\n        document.body.appendChild(_htmlToElement(code.content));\n      } else {\n        throw \"unsupported code type.\";\n      }\n\n      parent.postMessage({\n        type: \"executeSuccess\"\n      }, targetOrigin);\n    } catch (e) {\n      console.error(\"failed to execute scripts: \", code, e);\n      parent.postMessage({\n        type: \"executeFailure\",\n        error: e.stack || String(e)\n      }, targetOrigin);\n    }\n  }; // connection object for the RPC constructor\n\n\n  const conn = {\n    disconnect: function () {},\n    send: function (data, transferables) {\n      parent.postMessage(data, targetOrigin, transferables);\n    },\n    onMessage: function (h) {\n      conn._messageHandler = h;\n    },\n    _messageHandler: function () {},\n    onDisconnect: function () {}\n  };\n  config.dedicated_thread = false;\n  config.lang = \"javascript\";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\"API_VERSION\"]; // event listener for the plugin message\n\n  window.addEventListener(\"message\", function (e) {\n    if (targetOrigin === \"*\" || e.origin === targetOrigin) {\n      const m = e.data;\n\n      switch (m && m.type) {\n        case \"getConfig\":\n          parent.postMessage({\n            type: \"config\",\n            config: config\n          }, targetOrigin);\n          break;\n\n        case \"execute\":\n          if (config.allow_execution) {\n            execute(m.code);\n\n            if (m.code.type === \"requirements\") {\n              if (!Array.isArray(m.code.requirements)) {\n                m.code.requirements = [m.code.requirements];\n              }\n            }\n          } else {\n            console.warn(\"import script is not allowed (allow_execution=false)\");\n          }\n\n          break;\n\n        default:\n          conn._messageHandler(m);\n\n      }\n    }\n  });\n  Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\"connectRPC\"])(conn, {\n    forwarding_functions: config.forwarding_functions\n  });\n  parent.postMessage({\n    type: \"initialized\",\n    config: config\n  }, targetOrigin);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luSWZyYW1lLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvc3JjL3BsdWdpbklmcmFtZS5qcz9lNmFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29udGFpbnMgdGhlIHJvdXRpbmVzIGxvYWRlZCBieSB0aGUgcGx1Z2luIGlmcmFtZSB1bmRlciB3ZWItYnJvd3NlclxuICogaW4gY2FzZSB3aGVuIHdvcmtlciBmYWlsZWQgdG8gaW5pdGlhbGl6ZVxuICpcbiAqIEluaXRpYWxpemVzIHRoZSB3ZWIgZW52aXJvbm1lbnQgdmVyc2lvbiBvZiB0aGUgcGxhdGZvcm0tZGVwZW5kZW50XG4gKiBjb25uZWN0aW9uIG9iamVjdCBmb3IgdGhlIHBsdWdpbiBzaXRlXG4gKi9cbmltcG9ydCB7IGNvbm5lY3RSUEMgfSBmcm9tIFwiLi9wbHVnaW5Db3JlLmpzXCI7XG5pbXBvcnQgeyBBUElfVkVSU0lPTiB9IGZyb20gXCIuL3JwYy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR1cElmcmFtZShjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25zdCB0YXJnZXRPcmlnaW4gPSBjb25maWcudGFyZ2V0X29yaWdpbiB8fCBcIipcIjtcbiAgLy8gQ3JlYXRlIGEgbmV3LCBwbGFpbiA8c3Bhbj4gZWxlbWVudFxuICBmdW5jdGlvbiBfaHRtbFRvRWxlbWVudChodG1sKSB7XG4gICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgIGh0bWwgPSBodG1sLnRyaW0oKTsgLy8gTmV2ZXIgcmV0dXJuIGEgdGV4dCBub2RlIG9mIHdoaXRlc3BhY2UgYXMgdGhlIHJlc3VsdFxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgfVxuXG4gIHZhciBfaW1wb3J0U2NyaXB0ID0gZnVuY3Rpb24odXJsKSB7XG4gICAgLy91cmwgaXMgVVJMIG9mIGV4dGVybmFsIGZpbGUsIGltcGxlbWVudGF0aW9uQ29kZSBpcyB0aGUgY29kZVxuICAgIC8vdG8gYmUgY2FsbGVkIGZyb20gdGhlIGZpbGUsIGxvY2F0aW9uIGlzIHRoZSBsb2NhdGlvbiB0b1xuICAgIC8vaW5zZXJ0IHRoZSA8c2NyaXB0PiBlbGVtZW50XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHZhciBzY3JpcHRUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgc2NyaXB0VGFnLnNyYyA9IHVybDtcbiAgICAgIHNjcmlwdFRhZy50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICAgIHNjcmlwdFRhZy5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgc2NyaXB0VGFnLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBcImxvYWRlZFwiIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgc2NyaXB0VGFnLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdFRhZyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gc3VwcG9ydCBpbXBvcnRTY3JpcHRzIG91dHNpZGUgd2ViIHdvcmtlclxuXG4gIGFzeW5jIGZ1bmN0aW9uIGltcG9ydFNjcmlwdHMoKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgbGVuID0gYXJncy5sZW5ndGgsXG4gICAgICBpID0gMDtcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhd2FpdCBfaW1wb3J0U2NyaXB0KGFyZ3NbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGV2YWx1YXRlcyB0aGUgcHJvdmlkZWQgc3RyaW5nXG4gIHZhciBleGVjdXRlID0gYXN5bmMgZnVuY3Rpb24oY29kZSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cyAmJlxuICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgdHlwZW9mIGNvZGUucmVxdWlyZW1lbnRzID09PSBcInN0cmluZ1wiKVxuICAgICAgICApIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGxpbmtfbm9kZTtcbiAgICAgICAgICAgIGNvZGUucmVxdWlyZW1lbnRzID1cbiAgICAgICAgICAgICAgdHlwZW9mIGNvZGUucmVxdWlyZW1lbnRzID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgPyBbY29kZS5yZXF1aXJlbWVudHNdXG4gICAgICAgICAgICAgICAgOiBjb2RlLnJlcXVpcmVtZW50cztcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGUucmVxdWlyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcIi5jc3NcIikgfHxcbiAgICAgICAgICAgICAgICAgIGNvZGUucmVxdWlyZW1lbnRzW2ldLnN0YXJ0c1dpdGgoXCJjc3M6XCIpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNzczpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0gPSBjb2RlLnJlcXVpcmVtZW50c1tpXS5zbGljZSg0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGxpbmtfbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgICAgICAgICAgICAgbGlua19ub2RlLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuICAgICAgICAgICAgICAgICAgbGlua19ub2RlLmhyZWYgPSBjb2RlLnJlcXVpcmVtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua19ub2RlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcIi5qc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImpzOlwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNvZGUucmVxdWlyZW1lbnRzW2ldLnN0YXJ0c1dpdGgoXCJqczpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0gPSBjb2RlLnJlcXVpcmVtZW50c1tpXS5zbGljZSgzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGF3YWl0IGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNhY2hlOlwiKSkge1xuICAgICAgICAgICAgICAgICAgLy9pZ25vcmUgY2FjaGVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIFwiVW5wcm9jZXNzZWQgcmVxdWlyZW1lbnRzIHVybDogXCIgKyBjb2RlLnJlcXVpcmVtZW50c1tpXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IFwidW5zdXBwb3J0ZWQgcmVxdWlyZW1lbnRzIGRlZmluaXRpb25cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBcImZhaWxlZCB0byBpbXBvcnQgcmVxdWlyZWQgc2NyaXB0czogXCIgK1xuICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb2RlLnR5cGUgPT09IFwic2NyaXB0XCIpIHtcbiAgICAgICAgaWYgKGNvZGUuc3JjKSB7XG4gICAgICAgICAgdmFyIHNjcmlwdF9ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICBzY3JpcHRfbm9kZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIGNvZGUuYXR0cnMudHlwZSk7XG4gICAgICAgICAgc2NyaXB0X25vZGUuc2V0QXR0cmlidXRlKFwic3JjXCIsIGNvZGUuc3JjKTtcbiAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdF9ub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb2RlLmNvbnRlbnQgJiZcbiAgICAgICAgICAgICghY29kZS5hdHRycy50eXBlIHx8IGNvZGUuYXR0cnMudHlwZSA9PT0gXCJ0ZXh0L2phdmFzY3JpcHRcIilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBldmFsKGNvZGUuY29udGVudCk7XG4gICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIGNvZGUuYXR0cnMudHlwZSk7XG4gICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvZGUuY29udGVudCkpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgdmFyIHN0eWxlX25vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIGlmIChjb2RlLnNyYykge1xuICAgICAgICAgIHN0eWxlX25vZGUuc3JjID0gY29kZS5zcmM7XG4gICAgICAgIH1cbiAgICAgICAgc3R5bGVfbm9kZS5pbm5lckhUTUwgPSBjb2RlLmNvbnRlbnQ7XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVfbm9kZSk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUudHlwZSA9PT0gXCJsaW5rXCIpIHtcbiAgICAgICAgdmFyIGxpbmtfbm9kZV8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgaWYgKGNvZGUucmVsKSB7XG4gICAgICAgICAgbGlua19ub2RlXy5yZWwgPSBjb2RlLnJlbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZS5ocmVmKSB7XG4gICAgICAgICAgbGlua19ub2RlXy5ocmVmID0gY29kZS5ocmVmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlLmF0dHJzICYmIGNvZGUuYXR0cnMudHlwZSkge1xuICAgICAgICAgIGxpbmtfbm9kZV8udHlwZSA9IGNvZGUuYXR0cnMudHlwZTtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtfbm9kZV8pO1xuICAgICAgfSBlbHNlIGlmIChjb2RlLnR5cGUgPT09IFwiaHRtbFwiKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoX2h0bWxUb0VsZW1lbnQoY29kZS5jb250ZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBcInVuc3VwcG9ydGVkIGNvZGUgdHlwZS5cIjtcbiAgICAgIH1cbiAgICAgIHBhcmVudC5wb3N0TWVzc2FnZSh7IHR5cGU6IFwiZXhlY3V0ZVN1Y2Nlc3NcIiB9LCB0YXJnZXRPcmlnaW4pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJmYWlsZWQgdG8gZXhlY3V0ZSBzY3JpcHRzOiBcIiwgY29kZSwgZSk7XG4gICAgICBwYXJlbnQucG9zdE1lc3NhZ2UoXG4gICAgICAgIHsgdHlwZTogXCJleGVjdXRlRmFpbHVyZVwiLCBlcnJvcjogZS5zdGFjayB8fCBTdHJpbmcoZSkgfSxcbiAgICAgICAgdGFyZ2V0T3JpZ2luXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICAvLyBjb25uZWN0aW9uIG9iamVjdCBmb3IgdGhlIFJQQyBjb25zdHJ1Y3RvclxuICBjb25zdCBjb25uID0ge1xuICAgIGRpc2Nvbm5lY3Q6IGZ1bmN0aW9uKCkge30sXG4gICAgc2VuZDogZnVuY3Rpb24oZGF0YSwgdHJhbnNmZXJhYmxlcykge1xuICAgICAgcGFyZW50LnBvc3RNZXNzYWdlKGRhdGEsIHRhcmdldE9yaWdpbiwgdHJhbnNmZXJhYmxlcyk7XG4gICAgfSxcbiAgICBvbk1lc3NhZ2U6IGZ1bmN0aW9uKGgpIHtcbiAgICAgIGNvbm4uX21lc3NhZ2VIYW5kbGVyID0gaDtcbiAgICB9LFxuICAgIF9tZXNzYWdlSGFuZGxlcjogZnVuY3Rpb24oKSB7fSxcbiAgICBvbkRpc2Nvbm5lY3Q6IGZ1bmN0aW9uKCkge31cbiAgfTtcblxuICBjb25maWcuZGVkaWNhdGVkX3RocmVhZCA9IGZhbHNlO1xuICBjb25maWcubGFuZyA9IFwiamF2YXNjcmlwdFwiO1xuICBjb25maWcuYXBpX3ZlcnNpb24gPSBBUElfVkVSU0lPTjtcblxuICAvLyBldmVudCBsaXN0ZW5lciBmb3IgdGhlIHBsdWdpbiBtZXNzYWdlXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgaWYgKHRhcmdldE9yaWdpbiA9PT0gXCIqXCIgfHwgZS5vcmlnaW4gPT09IHRhcmdldE9yaWdpbikge1xuICAgICAgY29uc3QgbSA9IGUuZGF0YTtcbiAgICAgIHN3aXRjaCAobSAmJiBtLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcImdldENvbmZpZ1wiOlxuICAgICAgICAgIHBhcmVudC5wb3N0TWVzc2FnZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHlwZTogXCJjb25maWdcIixcbiAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YXJnZXRPcmlnaW5cbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZXhlY3V0ZVwiOlxuICAgICAgICAgIGlmIChjb25maWcuYWxsb3dfZXhlY3V0aW9uKSB7XG4gICAgICAgICAgICBleGVjdXRlKG0uY29kZSk7XG4gICAgICAgICAgICBpZiAobS5jb2RlLnR5cGUgPT09IFwicmVxdWlyZW1lbnRzXCIpIHtcbiAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG0uY29kZS5yZXF1aXJlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgbS5jb2RlLnJlcXVpcmVtZW50cyA9IFttLmNvZGUucmVxdWlyZW1lbnRzXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgIFwiaW1wb3J0IHNjcmlwdCBpcyBub3QgYWxsb3dlZCAoYWxsb3dfZXhlY3V0aW9uPWZhbHNlKVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb25uLl9tZXNzYWdlSGFuZGxlcihtKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGNvbm5lY3RSUEMoY29ubiwge1xuICAgIGZvcndhcmRpbmdfZnVuY3Rpb25zOiBjb25maWcuZm9yd2FyZGluZ19mdW5jdGlvbnNcbiAgfSk7XG5cbiAgcGFyZW50LnBvc3RNZXNzYWdlKFxuICAgIHtcbiAgICAgIHR5cGU6IFwiaW5pdGlhbGl6ZWRcIixcbiAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgfSxcbiAgICB0YXJnZXRPcmlnaW5cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7OztBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUZBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQTFCQTtBQTJCQTtBQUNBO0FBRUE7QUFDQTtBQURBO0FBSUE7QUFFQTtBQUNBO0FBRkE7QUFNQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pluginIframe.js\n");

/***/ }),

/***/ "./src/pluginWebPython.js":
/*!********************************!*\
  !*** ./src/pluginWebPython.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return setupWebPython; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \"./src/pluginCore.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\nfunction setupWebPython(config) {\n  config = config || {}; // Create a new, plain <span> element\n\n  function _htmlToElement(html) {\n    var template = document.createElement(\"template\");\n    html = html.trim(); // Never return a text node of whitespace as the result\n\n    template.innerHTML = html;\n    return template.content.firstChild;\n  }\n\n  var _importScript = function (url) {\n    //url is URL of external file, implementationCode is the code\n    //to be called from the file, location is the location to\n    //insert the <script> element\n    return new Promise((resolve, reject) => {\n      var scriptTag = document.createElement(\"script\");\n      scriptTag.src = url;\n      scriptTag.onload = resolve;\n\n      scriptTag.onreadystatechange = function () {\n        if (this.readyState === \"loaded\" || this.readyState === \"complete\") {\n          resolve();\n        }\n      };\n\n      scriptTag.onerror = reject;\n      document.head.appendChild(scriptTag);\n    });\n  }; // support importScripts outside web worker\n\n\n  async function importScripts() {\n    var args = Array.prototype.slice.call(arguments),\n        len = args.length,\n        i = 0;\n\n    for (; i < len; i++) {\n      await _importScript(args[i]);\n    }\n  }\n\n  var startup_script = `\n  from js import api\n  import sys\n  from types import ModuleType\n  m = ModuleType(\"imjoy\")\n  sys.modules[m.__name__] = m\n  m.__file__ = m.__name__ + \".py\"\n  m.api = api\n  `;\n  var _export_plugin_api = null;\n\n  var execute_python_code = function (code) {\n    try {\n      if (!_export_plugin_api) {\n        _export_plugin_api = window.api.export;\n\n        window.api.export = function (p) {\n          if (typeof p === \"object\") {\n            const _api = {};\n\n            for (let k in p) {\n              if (!k.startsWith(\"_\")) {\n                _api[k] = p[k];\n              }\n            }\n\n            _export_plugin_api(_api);\n          } else if (typeof p === \"function\") {\n            const _api = {};\n            const getattr = window.pyodide.pyimport(\"getattr\");\n            const hasattr = window.pyodide.pyimport(\"hasattr\");\n\n            for (let k of Object.getOwnPropertyNames(p)) {\n              if (!k.startsWith(\"_\") && hasattr(p, k)) {\n                const func = getattr(p, k);\n\n                _api[k] = function () {\n                  return func(...Array.prototype.slice.call(arguments));\n                };\n              }\n            }\n\n            _export_plugin_api(_api);\n          } else {\n            throw \"unsupported api export\";\n          }\n        };\n      }\n\n      window.pyodide.runPython(startup_script);\n      window.pyodide.runPython(code.content);\n    } catch (e) {\n      throw e;\n    }\n  }; // evaluates the provided string\n\n\n  var execute = async function (code) {\n    try {\n      if (code.type === \"requirements\") {\n        if (code.requirements) {\n          code.requirements = typeof code.requirements === \"string\" ? [code.requirements] : code.requirements;\n\n          if (Array.isArray(code.requirements)) {\n            const python_packages = [];\n\n            for (var i = 0; i < code.requirements.length; i++) {\n              if (code.requirements[i].toLowerCase().endsWith(\".css\") || code.requirements[i].startsWith(\"css:\")) {\n                if (code.requirements[i].startsWith(\"css:\")) {\n                  code.requirements[i] = code.requirements[i].slice(4);\n                }\n\n                link_node = document.createElement(\"link\");\n                link_node.rel = \"stylesheet\";\n                link_node.href = code.requirements[i];\n                document.head.appendChild(link_node);\n              } else if ( // code.requirements[i].toLowerCase().endsWith(\".js\") ||\n              code.requirements[i].startsWith(\"js:\")) {\n                if (code.requirements[i].startsWith(\"js:\")) {\n                  code.requirements[i] = code.requirements[i].slice(3);\n                }\n\n                await importScripts(code.requirements[i]);\n              } else if (code.requirements[i].startsWith(\"cache:\")) {//ignore cache\n              } else if (code.requirements[i].toLowerCase().endsWith(\".js\") || code.requirements[i].startsWith(\"package:\")) {\n                if (code.requirements[i].startsWith(\"package:\")) {\n                  code.requirements[i] = code.requirements[i].slice(8);\n                }\n\n                python_packages.push(code.requirements[i]);\n              } else if (code.requirements[i].startsWith(\"http:\") || code.requirements[i].startsWith(\"https:\")) {\n                console.log(\"Unprocessed requirements url: \" + code.requirements[i]);\n              } else {\n                python_packages.push(code.requirements[i]);\n              }\n            }\n\n            await window.pyodide.loadPackage(python_packages);\n          } else {\n            throw \"unsupported requirements definition\";\n          }\n        }\n      } else if (code.type === \"script\") {\n        if (code.src) {\n          var script_node = document.createElement(\"script\");\n          script_node.setAttribute(\"type\", code.attrs.type);\n          script_node.setAttribute(\"src\", code.src);\n          document.head.appendChild(script_node);\n        } else {\n          if (code.content && code.lang === \"python\") {\n            execute_python_code(code);\n          } else if (code.content && code.lang === \"javascript\") {\n            try {\n              eval(code.content);\n            } catch (e) {\n              console.error(e.message, e.stack);\n              throw e;\n            }\n          } else {\n            var node = document.createElement(\"script\");\n            node.setAttribute(\"type\", code.attrs.type);\n            node.appendChild(document.createTextNode(code.content));\n            document.body.appendChild(node);\n          }\n        }\n      } else if (code.type === \"style\") {\n        var style_node = document.createElement(\"style\");\n\n        if (code.src) {\n          style_node.src = code.src;\n        }\n\n        style_node.innerHTML = code.content;\n        document.head.appendChild(style_node);\n      } else if (code.type === \"link\") {\n        var link_node = document.createElement(\"link\");\n\n        if (code.rel) {\n          link_node.rel = code.rel;\n        }\n\n        if (code.href) {\n          link_node.href = code.href;\n        }\n\n        if (code.attrs && code.attrs.type) {\n          link_node.type = code.attrs.type;\n        }\n\n        document.head.appendChild(link_node);\n      } else if (code.type === \"html\") {\n        document.body.appendChild(_htmlToElement(code.content));\n      } else {\n        throw \"unsupported code type.\";\n      }\n\n      parent.postMessage({\n        type: \"executeSuccess\"\n      }, \"*\");\n    } catch (e) {\n      console.error(\"failed to execute scripts: \", code, e);\n      parent.postMessage({\n        type: \"executeFailure\",\n        error: e.stack || String(e)\n      }, \"*\");\n    }\n  };\n\n  const targetOrigin = config.target_origin || \"*\"; // connection object for the RPC constructor\n\n  const conn = {\n    disconnect: function () {},\n    send: function (data, transferables) {\n      parent.postMessage(data, targetOrigin, transferables);\n    },\n    onMessage: function (h) {\n      conn._messageHandler = h;\n    },\n    _messageHandler: function () {},\n    onDisconnect: function () {}\n  };\n  config.dedicated_thread = false;\n  config.lang = \"python\";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\"API_VERSION\"]; // event listener for the plugin message\n\n  window.addEventListener(\"message\", function (e) {\n    if (targetOrigin === \"*\" || e.origin === targetOrigin) {\n      const m = e.data;\n\n      switch (m && m.type) {\n        case \"getConfig\":\n          parent.postMessage({\n            type: \"config\",\n            config: config\n          }, targetOrigin);\n          break;\n\n        case \"execute\":\n          if (config.allow_execution) {\n            execute(m.code);\n\n            if (m.code.type === \"requirements\") {\n              if (!Array.isArray(m.code.requirements)) {\n                m.code.requirements = [m.code.requirements];\n              }\n            }\n          } else {\n            console.warn(\"execute script is not allowed (allow_execution=false)\");\n          }\n\n          break;\n\n        default:\n          conn._messageHandler(m);\n\n      }\n    }\n  });\n  window.languagePluginUrl = \"https://static.imjoy.io/pyodide/\";\n  importScripts(\"https://static.imjoy.io/pyodide/pyodide.js\").then(() => {\n    // hack for matplotlib etc.\n    window.iodide = {\n      output: {\n        element: function element(type) {\n          const div = document.createElement(type);\n          const output = document.getElementById(\"output\") || document.body;\n          output.appendChild(div);\n          return div;\n        }\n      }\n    };\n    window.languagePluginLoader.then(() => {\n      // pyodide is now ready to use...\n      console.log(window.pyodide.runPython(\"import sys\\nsys.version\"));\n      Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\"connectRPC\"])(conn, {\n        forwarding_functions: config.forwarding_functions\n      });\n      parent.postMessage({\n        type: \"initialized\",\n        config: config\n      }, targetOrigin);\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pluginWebPython.js\n");

/***/ }),

/***/ "./src/rpc.js":
/*!********************!*\
  !*** ./src/rpc.js ***!
  \********************/
/*! exports provided: API_VERSION, RPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"API_VERSION\", function() { return API_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return RPC; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/**\n * Contains the RPC object used both by the application\n * site, and by each plugin\n */\n\nconst API_VERSION = \"0.2.0\";\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\n\nfunction _appendBuffer(buffer1, buffer2) {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find(key => object[key] === value);\n}\n/**\n * RPC object represents a single site in the\n * communication protocol between the application and the plugin\n *\n * @param {Object} connection a special object allowing to send\n * and receive messages from the opposite site (basically it\n * should only provide send() and onMessage() methods)\n */\n\n\nclass RPC {\n  constructor(connection, config) {\n    this._connection = connection;\n    this.config = config || {};\n    this._interface = {};\n    this._plugin_interfaces = {};\n    this._remote = null;\n\n    this._remoteUpdateHandler = function () {};\n\n    this._getInterfaceHandler = function () {};\n\n    this._interfaceSetAsRemoteHandler = null;\n\n    this._disconnectHandler = function () {};\n\n    this._store = new ReferenceStore();\n    this._method_refs = new ReferenceStore();\n    this._connection = connection;\n    let me = this;\n\n    this._connection.onMessage(function (data) {\n      me._processMessage(data);\n    });\n  }\n  /**\n   * Set a handler to be called when the remote site updates its\n   * interface\n   *\n   * @param {Function} handler\n   */\n\n\n  onRemoteUpdate(handler) {\n    this._remoteUpdateHandler = handler;\n  }\n  /**\n   * Set a handler to be called when received a responce from the\n   * remote site reporting that the previously provided interface\n   * has been successfully set as remote for that site\n   *\n   * @param {Function} handler\n   */\n\n\n  onRemoteReady(handler) {\n    this._method_refs.onReady(handler);\n  }\n\n  onRemoteBusy(handler) {\n    this._method_refs.onBusy(handler);\n  }\n\n  getRemoteCallStack() {\n    return this._method_refs.getStack();\n  }\n  /**\n   * Set a handler to be called when the remote site requests to\n   * (re)send the interface. Used to detect an initialzation\n   * completion without sending additional request, since in fact\n   * 'getInterface' request is only sent by application at the last\n   * step of the plugin initialization\n   *\n   * @param {Function} handler\n   */\n\n\n  onGetInterface(handler) {\n    this._getInterfaceHandler = handler;\n  }\n  /**\n   * @returns {Object} set of remote interface methods\n   */\n\n\n  getRemote() {\n    return this._remote;\n  }\n  /**\n   * Sets the interface of this site making it available to the\n   * remote site by sending a message with a set of methods names\n   *\n   * @param {Object} _interface to set\n   */\n\n\n  setInterface(_interface) {\n    if (this.config.forwarding_functions) {\n      for (let func_name of this.config.forwarding_functions) {\n        if (this._remote[func_name]) {\n          if (_interface.constructor === Object) {\n            if (!_interface[func_name]) {\n              _interface[func_name] = (...args) => {\n                this._remote[func_name](...args);\n              };\n            }\n          } else if (_interface.constructor.constructor === Function) {\n            if (!_interface.constructor.prototype[func_name]) {\n              _interface.constructor.prototype[func_name] = (...args) => {\n                this._remote[func_name](...args);\n              };\n            }\n          }\n        }\n      }\n    }\n\n    this._interface = _interface;\n  }\n  /**\n   * Sends the actual interface to the remote site upon it was\n   * updated or by a special request of the remote site\n   */\n\n\n  sendInterface() {\n    return new Promise(resolve => {\n      var names = [];\n\n      if (!this._interface) {\n        throw new Error(\"interface is not set.\");\n      }\n\n      if (this._interface.constructor === Object) {\n        for (var name of Object.keys(this._interface)) {\n          if (name.startsWith(\"_\")) continue;\n\n          if (typeof this._interface[name] === \"function\") {\n            names.push({\n              name: name,\n              data: null,\n              type: \"function\"\n            });\n          } else {\n            var data = this._interface[name];\n\n            if (data !== null && typeof data === \"object\") {\n              var data2 = {};\n\n              for (var k of Object.keys(data)) {\n                if (typeof data[k] === \"function\") {\n                  data2[k] = \"rpc_method::\" + k;\n                } else {\n                  data2[k] = data[k];\n                }\n              }\n\n              names.push({\n                name: name,\n                data: data2,\n                type: \"object\"\n              });\n            } else if (Object(data) !== data) {\n              names.push({\n                name: name,\n                data: data,\n                type: \"data\"\n              });\n            }\n          }\n        }\n      } // a class\n      else if (this._interface.constructor === Function) {\n          throw new Error(\"Please instantiate the class before exportting it.\");\n        } // instance of a class\n        else if (this._interface.constructor.constructor === Function) {\n            var functions = Object.getOwnPropertyNames(Object.getPrototypeOf(this._interface)).concat(Object.keys(this._interface));\n\n            for (var i = 0; i < functions.length; i++) {\n              var name_ = functions[i];\n              if (name_.startsWith(\"_\") || name_ === \"constructor\") continue;\n\n              if (typeof this._interface[name_] === \"function\") {\n                names.push({\n                  name: name_,\n                  data: null\n                });\n              }\n            }\n          } else {\n            throw Error(\"Unsupported interface type\");\n          }\n\n      this._interfaceSetAsRemoteHandler = resolve;\n\n      this._connection.send({\n        type: \"setInterface\",\n        api: names\n      });\n    });\n  }\n  /**\n   * Handles a message from the remote site\n   */\n  // var callback_reg = new RegExp(\"onupdate|run$\")\n\n\n  _processMessage(data) {\n    var resolve, reject, method, args, result;\n\n    switch (data.type) {\n      case \"method\":\n        var _interface = this._interface;\n\n        var _method_context = _interface.__this__ || _interface;\n\n        if (data.pid) {\n          _interface = this._plugin_interfaces[data.pid];\n\n          if (!_interface) {\n            if (data.promise) {\n              [resolve, reject] = this._unwrap(data.promise, false);\n              reject(`plugin api function is not avaialbe in \"${data.pid}\", the plugin maybe terminated.`);\n            } else {\n              console.error(`plugin api function is not avaialbe in ${data.pid}, the plugin maybe terminated.`);\n            }\n\n            return;\n          }\n        }\n\n        if (data.name.indexOf(\".\") !== -1) {\n          var names = data.name.split(\".\");\n          method = _interface[names[0]][names[1]];\n        } else {\n          method = _interface[data.name];\n        }\n\n        args = this._unwrap(data.args, true);\n\n        if (data.promise) {\n          [resolve, reject] = this._unwrap(data.promise, false);\n\n          try {\n            result = method.apply(_method_context, args);\n\n            if (result instanceof Promise || method.constructor && method.constructor.name === \"AsyncFunction\") {\n              result.then(resolve).catch(reject);\n            } else {\n              resolve(result);\n            }\n          } catch (e) {\n            console.error(e, method);\n            reject(e);\n          }\n        } else {\n          try {\n            method.apply(_method_context, args);\n          } catch (e) {\n            console.error(e, method, args);\n          }\n        }\n\n        break;\n\n      case \"callback\":\n        if (data.promise) {\n          [resolve, reject] = this._unwrap(data.promise, false);\n\n          try {\n            method = this._store.fetch(data.num);\n            args = this._unwrap(data.args, true);\n\n            if (!method) {\n              throw \"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\";\n            }\n\n            result = method.apply(null, args);\n\n            if (result instanceof Promise || method.constructor && method.constructor.name === \"AsyncFunction\") {\n              result.then(resolve).catch(reject);\n            } else {\n              resolve(result);\n            }\n          } catch (e) {\n            console.error(e, method);\n            reject(e);\n          }\n        } else {\n          try {\n            method = this._store.fetch(data.num);\n            args = this._unwrap(data.args, true);\n\n            if (!method) {\n              throw \"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\";\n            }\n\n            method.apply(null, args);\n          } catch (e) {\n            console.error(e, method, args);\n          }\n        }\n\n        break;\n\n      case \"setInterface\":\n        this._setRemote(data.api);\n\n        break;\n\n      case \"getInterface\":\n        this.sendInterface();\n\n        this._getInterfaceHandler();\n\n        break;\n\n      case \"interfaceSetAsRemote\":\n        if (typeof this._interfaceSetAsRemoteHandler === \"function\") {\n          this._interfaceSetAsRemoteHandler();\n\n          this._interfaceSetAsRemoteHandler === null;\n        }\n\n        break;\n\n      case \"disconnect\":\n        this._disconnectHandler();\n\n        this._connection.disconnect();\n\n        break;\n    }\n  }\n  /**\n   * Sends a requests to the remote site asking it to provide its\n   * current interface\n   */\n\n\n  requestRemote() {\n    this._connection.send({\n      type: \"getInterface\"\n    });\n  }\n\n  _ndarray(typedArray, shape, dtype) {\n    var _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][typedArray.constructor.name];\n\n    if (dtype && dtype !== _dtype) {\n      throw \"dtype doesn't match the type of the array: \" + _dtype + \" != \" + dtype;\n    }\n\n    shape = shape || [typedArray.length];\n    return {\n      __jailed_type__: \"ndarray\",\n      __value__: typedArray,\n      __shape__: shape,\n      __dtype__: _dtype\n    };\n  }\n  /**\n   * Sets the new remote interface provided by the other site\n   *\n   * @param {Array} names list of function names\n   */\n\n\n  _setRemote(api) {\n    this._remote = {};\n    var i, name, data, type;\n\n    for (i = 0; i < api.length; i++) {\n      name = api[i].name;\n      data = api[i].data;\n      type = api[i].type;\n\n      if (type === \"data\") {\n        this._remote[name] = data;\n      } else if (data) {\n        if (typeof data === \"object\") {\n          var data2 = {};\n\n          for (var key in data) {\n            if (data.hasOwnProperty(key)) {\n              if (data[key] === \"rpc_method::\" + key) {\n                data2[key] = this._genRemoteMethod(name + \".\" + key);\n              } else {\n                data2[key] = data[key];\n              }\n            }\n          }\n\n          this._remote[name] = data2;\n        } else {\n          this._remote[name] = data;\n        }\n      } else {\n        this._remote[name] = this._genRemoteMethod(name);\n      }\n    }\n\n    this._remoteUpdateHandler();\n\n    this._reportRemoteSet();\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * method. When the generated function is called, it will send the\n   * corresponding message to the remote site asking it to execute\n   * the particular method of its interface\n   *\n   * @param {String} name of the remote method\n   *\n   * @returns {Function} wrapped remote method\n   */\n\n\n  _genRemoteMethod(name, plugin_id) {\n    var me = this;\n\n    var remoteMethod = function () {\n      return new Promise((resolve, reject) => {\n        let id = null;\n\n        try {\n          id = me._method_refs.put(plugin_id ? plugin_id + \"/\" + name : name);\n\n          var wrapped_resolve = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return resolve.apply(this, arguments);\n          };\n\n          var wrapped_reject = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return reject.apply(this, arguments);\n          };\n\n          wrapped_resolve.__jailed_pairs__ = wrapped_reject;\n          wrapped_reject.__jailed_pairs__ = wrapped_resolve;\n          var args = Array.prototype.slice.call(arguments);\n\n          if (name === \"register\" || name === \"export\" || name === \"on\") {\n            args = me._wrap(args, true);\n          } else {\n            args = me._wrap(args);\n          }\n\n          var transferables = args.args.__transferables__;\n          if (transferables) delete args.args.__transferables__;\n\n          me._connection.send({\n            type: \"method\",\n            name: name,\n            pid: plugin_id,\n            args: args,\n            promise: me._wrap([wrapped_resolve, wrapped_reject])\n          }, transferables);\n        } catch (e) {\n          if (id) me._method_refs.fetch(id);\n          reject(`Failed to exectue remote method (plugin: ${plugin_id || me.id}, method: ${name}), error: ${e}`);\n        }\n      });\n    };\n\n    remoteMethod.__remote_method = true;\n    return remoteMethod;\n  }\n  /**\n   * Sends a responce reporting that interface just provided by the\n   * remote site was successfully set by this site as remote\n   */\n\n\n  _reportRemoteSet() {\n    this._connection.send({\n      type: \"interfaceSetAsRemote\"\n    });\n  }\n  /**\n   * Prepares the provided set of remote method arguments for\n   * sending to the remote site, replaces all the callbacks with\n   * identifiers\n   *\n   * @param {Array} args to wrap\n   *\n   * @returns {Array} wrapped arguments\n   */\n\n\n  _encode_interface(aObject, bObject) {\n    var v, k;\n    const encoded_interface = {};\n    aObject[\"__id__\"] = aObject[\"__id__\"] || Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"randId\"])();\n\n    for (k in aObject) {\n      if (k === \"hasOwnProperty\") continue;\n\n      if (aObject.hasOwnProperty(k)) {\n        if (k.startsWith(\"_\")) {\n          continue;\n        }\n\n        v = aObject[k];\n\n        if (typeof v === \"function\") {\n          bObject[k] = {\n            __jailed_type__: \"plugin_interface\",\n            __plugin_id__: aObject[\"__id__\"],\n            __value__: k,\n            num: null\n          };\n          encoded_interface[k] = v;\n        } else if (Object(v) !== v) {\n          bObject[k] = {\n            __jailed_type__: \"argument\",\n            __value__: v\n          };\n          encoded_interface[k] = v;\n        } else if (typeof v === \"object\") {\n          bObject[k] = Array.isArray(v) ? [] : {};\n\n          this._encode_interface(v, bObject[k]);\n        }\n      }\n    }\n\n    this._plugin_interfaces[aObject[\"__id__\"]] = encoded_interface;\n\n    if (aObject.on) {\n      aObject.on(\"close\", () => {\n        delete this._plugin_interfaces[aObject[\"__id__\"]];\n      });\n    }\n  }\n\n  _encode(aObject, as_interface) {\n    var transferables = [];\n\n    if (!aObject) {\n      return aObject;\n    }\n\n    var _transfer = aObject._transfer;\n    var bObject, v, k;\n    var isarray = Array.isArray(aObject);\n    bObject = isarray ? [] : {}; //skip if already encoded\n\n    if (typeof aObject === \"object\" && aObject.__jailed_type__ && aObject.__value__) {\n      return aObject;\n    } //encode interfaces\n\n\n    if (typeof aObject === \"object\" && !Array.isArray(aObject) && (aObject.__as_interface__ || as_interface)) {\n      this._encode_interface(aObject, bObject);\n\n      return bObject;\n    }\n\n    if (as_interface) {\n      aObject[\"__id__\"] = aObject[\"__id__\"] || Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"randId\"])();\n      this._plugin_interfaces[aObject[\"__id__\"]] = this._plugin_interfaces[aObject[\"__id__\"]] || {};\n    }\n\n    for (k in aObject) {\n      if (k === \"hasOwnProperty\") continue;\n\n      if (isarray || aObject.hasOwnProperty(k)) {\n        v = aObject[k];\n\n        if (typeof this._interface._rpcEncode === \"function\") {\n          const encoded_obj = this._interface._rpcEncode(v);\n\n          if (encoded_obj && encoded_obj.__rpc_dtype__) {\n            bObject[k] = {\n              __jailed_type__: \"custom_encoding\",\n              __value__: encoded_obj\n            };\n            continue;\n          } // if the returned object does not contain __jailed_type__, assuming the object has been transformed\n          else {\n              v = encoded_obj;\n            }\n        }\n\n        if (typeof v === \"function\") {\n          if (as_interface) {\n            const encoded_interface = this._plugin_interfaces[aObject[\"__id__\"]];\n            bObject[k] = {\n              __jailed_type__: \"plugin_interface\",\n              __plugin_id__: aObject[\"__id__\"],\n              __value__: k,\n              num: null\n            };\n            encoded_interface[k] = v;\n            continue;\n          }\n\n          let interfaceFuncName = null;\n\n          for (var name in this._interface) {\n            if (this._interface.hasOwnProperty(name)) {\n              if (name.startsWith(\"_\")) continue;\n\n              if (this._interface[name] === v) {\n                interfaceFuncName = name;\n                break;\n              }\n            }\n          } // search for prototypes\n\n\n          var functions = Object.getOwnPropertyNames(Object.getPrototypeOf(this._interface));\n\n          for (var i = 0; i < functions.length; i++) {\n            var name_ = functions[i];\n            if (name_.startsWith(\"_\")) continue;\n\n            if (this._interface[name_] === v) {\n              interfaceFuncName = name_;\n              break;\n            }\n          }\n\n          if (!interfaceFuncName) {\n            var id = this._store.put(v);\n\n            bObject[k] = {\n              __jailed_type__: \"callback\",\n              __value__: v.constructor && v.constructor.name || id,\n              num: id\n            };\n          } else {\n            bObject[k] = {\n              __jailed_type__: \"interface\",\n              __value__: interfaceFuncName,\n              num: null\n            };\n          }\n        } else if (\n        /*global tf*/\n        typeof tf !== \"undefined\" && tf.Tensor && v instanceof tf.Tensor) {\n          const v_buffer = v.dataSync();\n\n          if (v._transfer || _transfer) {\n            transferables.push(v_buffer.buffer);\n            delete v._transfer;\n          }\n\n          bObject[k] = {\n            __jailed_type__: \"ndarray\",\n            __value__: v_buffer,\n            __shape__: v.shape,\n            __dtype__: v.dtype\n          };\n        } else if (\n        /*global nj*/\n        typeof nj !== \"undefined\" && nj.NdArray && v instanceof nj.NdArray) {\n          var dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][v.selection.data.constructor.name];\n\n          if (v._transfer || _transfer) {\n            transferables.push(v.selection.data.buffer);\n            delete v._transfer;\n          }\n\n          bObject[k] = {\n            __jailed_type__: \"ndarray\",\n            __value__: v.selection.data,\n            __shape__: v.shape,\n            __dtype__: dtype\n          };\n        } else if (v instanceof Error) {\n          console.error(v);\n          bObject[k] = {\n            __jailed_type__: \"error\",\n            __value__: v.toString()\n          };\n        } else if (typeof File !== \"undefined\" && v instanceof File) {\n          bObject[k] = {\n            __jailed_type__: \"file\",\n            __value__: v,\n            __relative_path__: v.relativePath || v.webkitRelativePath\n          };\n        } // send objects supported by structure clone algorithm\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n        else if (v !== Object(v) || v instanceof Boolean || v instanceof String || v instanceof Date || v instanceof RegExp || v instanceof Blob || v instanceof ImageData || typeof FileList !== \"undefined\" && v instanceof FileList) {\n            bObject[k] = {\n              __jailed_type__: \"argument\",\n              __value__: v\n            };\n          } else if (v instanceof ArrayBuffer) {\n            if (v._transfer || _transfer) {\n              transferables.push(v);\n              delete v._transfer;\n            }\n\n            bObject[k] = {\n              __jailed_type__: \"argument\",\n              __value__: v\n            };\n          } else if (v instanceof ArrayBufferView) {\n            if (v._transfer || _transfer) {\n              transferables.push(v.buffer);\n              delete v._transfer;\n            }\n\n            bObject[k] = {\n              __jailed_type__: \"argument\",\n              __value__: v\n            };\n          } // TODO: support also Map and Set\n          // TODO: avoid object such as DynamicPlugin instance.\n          else if (v.__as_interface__) {\n              bObject[k] = this._encode(v, true);\n            } else if (typeof v === \"object\" || Array.isArray(v)) {\n              bObject[k] = this._encode(v, as_interface); // move transferables to the top level object\n\n              if (bObject[k].__transferables__) {\n                for (var t = 0; t < bObject[k].__transferables__.length; t++) {\n                  transferables.push(bObject[k].__transferables__[t]);\n                }\n\n                delete bObject[k].__transferables__;\n              }\n            } else if (typeof v === \"object\" && v.constructor) {\n              throw \"Unsupported data type for transferring between the plugin and the main app: \" + k + \" : \" + v.constructor.name;\n            } else {\n              throw \"Unsupported data type for transferring between the plugin and the main app: \" + k + \",\" + v;\n            }\n      }\n    }\n\n    if (transferables.length > 0) {\n      bObject.__transferables__ = transferables;\n    }\n\n    return bObject;\n  }\n\n  _decode(aObject, callbackId, withPromise) {\n    if (!aObject) {\n      return aObject;\n    }\n\n    var bObject, v, k;\n\n    if (aObject.hasOwnProperty(\"__jailed_type__\") && aObject.hasOwnProperty(\"__value__\")) {\n      if (aObject.__jailed_type__.startsWith(\"custom_encoding\")) {\n        if (typeof this._interface._rpcDecode === \"function\") {\n          const decodedObj = this._interface._rpcDecode(aObject.__value__);\n\n          bObject = decodedObj;\n        } else {\n          bObject = aObject;\n        }\n      } else if (aObject.__jailed_type__ === \"callback\") {\n        bObject = this._genRemoteCallback(callbackId, aObject.num, withPromise);\n      } else if (aObject.__jailed_type__ === \"interface\") {\n        bObject = this._remote[aObject.__value__] || this._genRemoteMethod(aObject.__value__);\n      } else if (aObject.__jailed_type__ === \"plugin_interface\") {\n        bObject = this._genRemoteMethod(aObject.__value__, aObject.__plugin_id__);\n      } else if (aObject.__jailed_type__ === \"ndarray\") {\n        /*global nj tf*/\n        //create build array/tensor if used in the plugin\n        if (this.id === \"__plugin__\" && typeof nj !== \"undefined\" && nj.array) {\n          if (Array.isArray(aObject.__value__)) {\n            aObject.__value__ = aObject.__value__.reduce(_appendBuffer);\n          }\n\n          bObject = nj.array(aObject.__value__, aObject.__dtype__).reshape(aObject.__shape__);\n        } else if (this.id === \"__plugin__\" && typeof tf !== \"undefined\" && tf.Tensor) {\n          if (Array.isArray(aObject.__value__)) {\n            aObject.__value__ = aObject.__value__.reduce(_appendBuffer);\n          }\n\n          bObject = tf.tensor(aObject.__value__, aObject.__shape__, aObject.__dtype__);\n        } else {\n          //keep it as regular if transfered to the main app\n          bObject = aObject;\n        }\n      } else if (aObject.__jailed_type__ === \"error\") {\n        bObject = new Error(aObject.__value__);\n      } else if (aObject.__jailed_type__ === \"file\") {\n        bObject = aObject.__value__; //patch relativePath\n\n        bObject.relativePath = aObject.__relative_path__;\n      } else if (aObject.__jailed_type__ === \"argument\") {\n        bObject = aObject.__value__;\n      }\n\n      return bObject;\n    } else {\n      var isarray = Array.isArray(aObject);\n      bObject = isarray ? [] : {};\n\n      for (k in aObject) {\n        if (isarray || aObject.hasOwnProperty(k)) {\n          v = aObject[k];\n\n          if (typeof v === \"object\" || Array.isArray(v)) {\n            bObject[k] = this._decode(v, callbackId, withPromise);\n          }\n        }\n      }\n\n      return bObject;\n    }\n  }\n\n  _wrap(args, as_interface) {\n    var wrapped = this._encode(args, as_interface);\n\n    var result = {\n      args: wrapped\n    };\n    return result;\n  }\n  /**\n   * Unwraps the set of arguments delivered from the remote site,\n   * replaces all callback identifiers with a function which will\n   * initiate sending that callback identifier back to other site\n   *\n   * @param {Object} args to unwrap\n   *\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Array} unwrapped args\n   */\n\n\n  _unwrap(args, withPromise) {\n    // var called = false;\n    // wraps each callback so that the only one could be called\n    // var once(cb) {\n    //     return function() {\n    //         if (!called) {\n    //             called = true;\n    //             return cb.apply(this, arguments);\n    //         } else {\n    //             var msg =\n    //               'A callback from this set has already been executed';\n    //             throw new Error(msg);\n    //         }\n    //     };\n    // }\n    var result = this._decode(args.args, args.callbackId, withPromise);\n\n    return result;\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * callback. When the generated function is called, it will send\n   * the corresponding message to the remote site asking it to\n   * execute the particular callback previously saved during a call\n   * by the remote site a method from the interface of this site\n   *\n   * @param {Number} id of the remote callback to execute\n   * @param {Number} argNum argument index of the callback\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Function} wrapped remote callback\n   */\n\n\n  _genRemoteCallback(id, argNum, withPromise) {\n    var me = this;\n    var remoteCallback;\n\n    if (withPromise) {\n      remoteCallback = function () {\n        return new Promise((resolve, reject) => {\n          var args = me._wrap(Array.prototype.slice.call(arguments));\n\n          var transferables = args.args.__transferables__;\n          if (transferables) delete args.args.__transferables__;\n          resolve.__jailed_pairs__ = reject;\n          reject.__jailed_pairs__ = resolve;\n\n          try {\n            me._connection.send({\n              type: \"callback\",\n              id: id,\n              num: argNum,\n              args: args,\n              // pid :  me.id,\n              promise: me._wrap([resolve, reject])\n            }, transferables);\n          } catch (e) {\n            reject(`Failed to exectue remote callback (id: ${id}, argNum: ${argNum}).`);\n          }\n        });\n      };\n\n      return remoteCallback;\n    } else {\n      remoteCallback = function () {\n        var args = me._wrap(Array.prototype.slice.call(arguments));\n\n        var transferables = args.args.__transferables__;\n        if (transferables) delete args.args.__transferables__;\n        return me._connection.send({\n          type: \"callback\",\n          id: id,\n          num: argNum,\n          args: args // pid :  me.id\n\n        }, transferables);\n      };\n\n      return remoteCallback;\n    }\n  }\n  /**\n   * Sends the notification message and breaks the connection\n   */\n\n\n  disconnect() {\n    this._connection.send({\n      type: \"disconnect\"\n    });\n\n    setTimeout(this._connection.disconnect, 2000);\n  }\n  /**\n   * Set a handler to be called when received a disconnect message\n   * from the remote site\n   *\n   * @param {Function} handler\n   */\n\n\n  onDisconnect(handler) {\n    this._disconnectHandler = handler;\n  }\n\n}\n/**\n * ReferenceStore is a special object which stores other objects\n * and provides the references (number) instead. This reference\n * may then be sent over a json-based communication channel (IPC\n * to another Node.js process or a message to the Worker). Other\n * site may then provide the reference in the responce message\n * implying the given object should be activated.\n *\n * Primary usage for the ReferenceStore is a storage for the\n * callbacks, which therefore makes it possible to initiate a\n * callback execution by the opposite site (which normally cannot\n * directly execute functions over the communication channel).\n *\n * Each stored object can only be fetched once and is not\n * available for the second time. Each stored object must be\n * fetched, since otherwise it will remain stored forever and\n * consume memory.\n *\n * Stored object indeces are simply the numbers, which are however\n * released along with the objects, and are later reused again (in\n * order to postpone the overflow, which should not likely happen,\n * but anyway).\n */\n\nclass ReferenceStore {\n  constructor() {\n    this._store = {}; // stored object\n\n    this._indices = [0]; // smallest available indices\n\n    this._readyHandler = function () {};\n\n    this._busyHandler = function () {};\n\n    this._readyHandler();\n  }\n  /**\n   * call handler when the store is empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onReady(readyHandler) {\n    this._readyHandler = readyHandler || function () {};\n  }\n  /**\n   * call handler when the store is not empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onBusy(busyHandler) {\n    this._busyHandler = busyHandler || function () {};\n  }\n  /**\n   * get the length of the store\n   *\n   */\n\n\n  getStack() {\n    return Object.keys(this._store).length;\n  }\n  /**\n   * @function _genId() generates the new reference id\n   *\n   * @returns {Number} smallest available id and reserves it\n   */\n\n\n  _genId() {\n    var id;\n\n    if (this._indices.length === 1) {\n      id = this._indices[0]++;\n    } else {\n      id = this._indices.shift();\n    }\n\n    return id;\n  }\n  /**\n   * Releases the given reference id so that it will be available by\n   * another object stored\n   *\n   * @param {Number} id to release\n   */\n\n\n  _releaseId(id) {\n    for (var i = 0; i < this._indices.length; i++) {\n      if (id < this._indices[i]) {\n        this._indices.splice(i, 0, id);\n\n        break;\n      }\n    } // cleaning-up the sequence tail\n\n\n    for (i = this._indices.length - 1; i >= 0; i--) {\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\n        this._indices.pop();\n      } else {\n        break;\n      }\n    }\n  }\n  /**\n   * Stores the given object and returns the refernce id instead\n   *\n   * @param {Object} obj to store\n   *\n   * @returns {Number} reference id of the stored object\n   */\n\n\n  put(obj) {\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\n      this._busyHandler();\n    }\n\n    var id = this._genId();\n\n    this._store[id] = obj;\n    return id;\n  }\n  /**\n   * Retrieves previously stored object and releases its reference\n   *\n   * @param {Number} id of an object to retrieve\n   */\n\n\n  fetch(id) {\n    var obj = this._store[id];\n\n    if (obj && !obj.__remote_method) {\n      delete this._store[id];\n\n      this._releaseId(id);\n\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\n        this._readyHandler();\n      }\n    }\n\n    if (obj && obj.__jailed_pairs__) {\n      const _id = getKeyByValue(this._store, obj.__jailed_pairs__);\n\n      this.fetch(_id);\n    }\n\n    return obj;\n  }\n  /**\n   * Retrieves previously stored object\n   *\n   * @param {Number} id of an object to retrieve\n   */\n  // retrieve(id) {\n  //     var obj = this._store[id];\n  //     return obj;\n  // }\n\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/rpc.js\n");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randId\", function() { return randId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dtypeToTypedArray\", function() { return dtypeToTypedArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"typedArrayToDtype\", function() { return typedArrayToDtype; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cacheRequirements\", function() { return cacheRequirements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupServiceWorker\", function() { return setupServiceWorker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"urlJoin\", function() { return urlJoin; });\nfunction randId() {\n  return Math.random().toString(36).substr(2, 10);\n}\nconst dtypeToTypedArray = {\n  int8: \"Int8Array\",\n  int16: \"Int16Array\",\n  int32: \"Int32Array\",\n  uint8: \"Uint8Array\",\n  uint16: \"Uint16Array\",\n  uint32: \"Uint32Array\",\n  float32: \"Float32Array\",\n  float64: \"Float64Array\",\n  array: \"Array\"\n};\nconst typedArrayToDtype = {\n  Int8Array: \"int8\",\n  Int16Array: \"int16\",\n  Int32Array: \"int32\",\n  Uint8Array: \"uint8\",\n  Uint16Array: \"uint16\",\n  Uint32Array: \"uint32\",\n  Float32Array: \"float32\",\n  Float64Array: \"float64\",\n  Array: \"array\"\n};\n\nfunction cacheUrlInServiceWorker(url) {\n  return new Promise(function (resolve, reject) {\n    const message = {\n      command: \"add\",\n      url: url\n    };\n\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\n      reject(\"Service worker is not supported.\");\n      return;\n    }\n\n    const messageChannel = new MessageChannel();\n\n    messageChannel.port1.onmessage = function (event) {\n      if (event.data && event.data.error) {\n        reject(event.data.error);\n      } else {\n        resolve(event.data && event.data.result);\n      }\n    };\n\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n    } else {\n      reject(\"Service worker controller is not available\");\n    }\n  });\n}\n\nasync function cacheRequirements(requirements) {\n  if (requirements && requirements.length > 0) {\n    for (let req of requirements) {\n      //remove prefix\n      if (req.startsWith(\"js:\")) req = req.slice(3);\n      if (req.startsWith(\"css:\")) req = req.slice(4);\n      if (req.startsWith(\"cache:\")) req = req.slice(6);\n      if (!req.startsWith(\"http\")) continue;\n      await cacheUrlInServiceWorker(req).catch(e => {\n        console.error(e);\n      });\n    }\n  }\n}\nfunction setupServiceWorker(targetOrigin, cacheCallback) {\n  // register service worker for offline access\n  if (\"serviceWorker\" in navigator) {\n    window.addEventListener(\"load\", function () {\n      navigator.serviceWorker.register(\"/plugin-service-worker.js\").then(function (registration) {\n        // Registration was successful\n        console.log(\"ServiceWorker registration successful with scope: \", registration.scope);\n      }, function (err) {\n        // registration failed :(\n        console.log(\"ServiceWorker registration failed: \", err);\n      });\n      targetOrigin = targetOrigin || \"*\";\n      cacheCallback = cacheCallback || cacheRequirements;\n\n      if (cacheCallback && typeof cacheCallback !== \"function\") {\n        throw new Error(\"config.cache_requirements must be a function\");\n      }\n\n      window.addEventListener(\"message\", function (e) {\n        if (targetOrigin === \"*\" || e.origin === targetOrigin) {\n          const m = e.data;\n\n          if (m.type === \"cacheRequirements\") {\n            cacheCallback(m.requirements);\n          }\n        }\n      });\n    });\n  }\n} //#Source https://bit.ly/2neWfJ2\n\nfunction urlJoin(...args) {\n  return args.join(\"/\").replace(/[\\/]+/g, \"/\").replace(/^(.+):\\//, \"$1://\").replace(/^file:/, \"file:/\").replace(/\\/(\\?|&|#[^!])/g, \"$1\").replace(/\\?/g, \"&\").replace(\"&\", \"?\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWpveVJQQy9zcmMvdXRpbHMuanM/YTMwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmFuZElkKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKVxuICAgIC50b1N0cmluZygzNilcbiAgICAuc3Vic3RyKDIsIDEwKTtcbn1cblxuZXhwb3J0IGNvbnN0IGR0eXBlVG9UeXBlZEFycmF5ID0ge1xuICBpbnQ4OiBcIkludDhBcnJheVwiLFxuICBpbnQxNjogXCJJbnQxNkFycmF5XCIsXG4gIGludDMyOiBcIkludDMyQXJyYXlcIixcbiAgdWludDg6IFwiVWludDhBcnJheVwiLFxuICB1aW50MTY6IFwiVWludDE2QXJyYXlcIixcbiAgdWludDMyOiBcIlVpbnQzMkFycmF5XCIsXG4gIGZsb2F0MzI6IFwiRmxvYXQzMkFycmF5XCIsXG4gIGZsb2F0NjQ6IFwiRmxvYXQ2NEFycmF5XCIsXG4gIGFycmF5OiBcIkFycmF5XCJcbn07XG5leHBvcnQgY29uc3QgdHlwZWRBcnJheVRvRHR5cGUgPSB7XG4gIEludDhBcnJheTogXCJpbnQ4XCIsXG4gIEludDE2QXJyYXk6IFwiaW50MTZcIixcbiAgSW50MzJBcnJheTogXCJpbnQzMlwiLFxuICBVaW50OEFycmF5OiBcInVpbnQ4XCIsXG4gIFVpbnQxNkFycmF5OiBcInVpbnQxNlwiLFxuICBVaW50MzJBcnJheTogXCJ1aW50MzJcIixcbiAgRmxvYXQzMkFycmF5OiBcImZsb2F0MzJcIixcbiAgRmxvYXQ2NEFycmF5OiBcImZsb2F0NjRcIixcbiAgQXJyYXk6IFwiYXJyYXlcIlxufTtcblxuZnVuY3Rpb24gY2FjaGVVcmxJblNlcnZpY2VXb3JrZXIodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgY29tbWFuZDogXCJhZGRcIixcbiAgICAgIHVybDogdXJsXG4gICAgfTtcbiAgICBpZiAoIW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyIHx8ICFuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcikge1xuICAgICAgcmVqZWN0KFwiU2VydmljZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2VDaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgbWVzc2FnZUNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kYXRhICYmIGV2ZW50LmRhdGEuZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGV2ZW50LmRhdGEuZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShldmVudC5kYXRhICYmIGV2ZW50LmRhdGEucmVzdWx0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyICYmIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgW1xuICAgICAgICBtZXNzYWdlQ2hhbm5lbC5wb3J0MlxuICAgICAgXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdChcIlNlcnZpY2Ugd29ya2VyIGNvbnRyb2xsZXIgaXMgbm90IGF2YWlsYWJsZVwiKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2FjaGVSZXF1aXJlbWVudHMocmVxdWlyZW1lbnRzKSB7XG4gIGlmIChyZXF1aXJlbWVudHMgJiYgcmVxdWlyZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKGxldCByZXEgb2YgcmVxdWlyZW1lbnRzKSB7XG4gICAgICAvL3JlbW92ZSBwcmVmaXhcbiAgICAgIGlmIChyZXEuc3RhcnRzV2l0aChcImpzOlwiKSkgcmVxID0gcmVxLnNsaWNlKDMpO1xuICAgICAgaWYgKHJlcS5zdGFydHNXaXRoKFwiY3NzOlwiKSkgcmVxID0gcmVxLnNsaWNlKDQpO1xuICAgICAgaWYgKHJlcS5zdGFydHNXaXRoKFwiY2FjaGU6XCIpKSByZXEgPSByZXEuc2xpY2UoNik7XG4gICAgICBpZiAoIXJlcS5zdGFydHNXaXRoKFwiaHR0cFwiKSkgY29udGludWU7XG5cbiAgICAgIGF3YWl0IGNhY2hlVXJsSW5TZXJ2aWNlV29ya2VyKHJlcSkuY2F0Y2goZSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU2VydmljZVdvcmtlcih0YXJnZXRPcmlnaW4sIGNhY2hlQ2FsbGJhY2spIHtcbiAgLy8gcmVnaXN0ZXIgc2VydmljZSB3b3JrZXIgZm9yIG9mZmxpbmUgYWNjZXNzXG4gIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihcIi9wbHVnaW4tc2VydmljZS13b3JrZXIuanNcIikudGhlbihcbiAgICAgICAgZnVuY3Rpb24ocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgLy8gUmVnaXN0cmF0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBcIlNlcnZpY2VXb3JrZXIgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwgd2l0aCBzY29wZTogXCIsXG4gICAgICAgICAgICByZWdpc3RyYXRpb24uc2NvcGVcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAvLyByZWdpc3RyYXRpb24gZmFpbGVkIDooXG4gICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlV29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6IFwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGFyZ2V0T3JpZ2luID0gdGFyZ2V0T3JpZ2luIHx8IFwiKlwiO1xuICAgICAgY2FjaGVDYWxsYmFjayA9IGNhY2hlQ2FsbGJhY2sgfHwgY2FjaGVSZXF1aXJlbWVudHM7XG4gICAgICBpZiAoY2FjaGVDYWxsYmFjayAmJiB0eXBlb2YgY2FjaGVDYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbmZpZy5jYWNoZV9yZXF1aXJlbWVudHMgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICAgICAgfVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKHRhcmdldE9yaWdpbiA9PT0gXCIqXCIgfHwgZS5vcmlnaW4gPT09IHRhcmdldE9yaWdpbikge1xuICAgICAgICAgIGNvbnN0IG0gPSBlLmRhdGE7XG4gICAgICAgICAgaWYgKG0udHlwZSA9PT0gXCJjYWNoZVJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgICAgICBjYWNoZUNhbGxiYWNrKG0ucmVxdWlyZW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5cbi8vI1NvdXJjZSBodHRwczovL2JpdC5seS8ybmVXZkoyXG5leHBvcnQgZnVuY3Rpb24gdXJsSm9pbiguLi5hcmdzKSB7XG4gIHJldHVybiBhcmdzXG4gICAgLmpvaW4oXCIvXCIpXG4gICAgLnJlcGxhY2UoL1tcXC9dKy9nLCBcIi9cIilcbiAgICAucmVwbGFjZSgvXiguKyk6XFwvLywgXCIkMTovL1wiKVxuICAgIC5yZXBsYWNlKC9eZmlsZTovLCBcImZpbGU6L1wiKVxuICAgIC5yZXBsYWNlKC9cXC8oXFw/fCZ8I1teIV0pL2csIFwiJDFcIilcbiAgICAucmVwbGFjZSgvXFw/L2csIFwiJlwiKVxuICAgIC5yZXBsYWNlKFwiJlwiLCBcIj9cIik7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFRQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils.js\n");

/***/ })

/******/ });