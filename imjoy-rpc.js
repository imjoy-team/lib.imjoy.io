(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("imjoyRPC", [], factory);
	else if(typeof exports === 'object')
		exports["imjoyRPC"] = factory();
	else
		root["imjoyRPC"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/worker-loader/dist/workers/InlineWorker.js":
/*!*****************************************************************!*\
  !*** ./node_modules/worker-loader/dist/workers/InlineWorker.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3dvcmtlcnMvSW5saW5lV29ya2VyLmpzPzc3ODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwMzQzOTEzL2hvdy10by1jcmVhdGUtYS13ZWItd29ya2VyLWZyb20tYS1zdHJpbmdcblxudmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGVudCwgdXJsKSB7XG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gd2luZG93LkJsb2JCdWlsZGVyIHx8IHdpbmRvdy5XZWJLaXRCbG9iQnVpbGRlciB8fCB3aW5kb3cuTW96QmxvYkJ1aWxkZXIgfHwgd2luZG93Lk1TQmxvYkJ1aWxkZXI7XG5cbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuXG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuXG4gICAgICAgIGJsb2IgPSBibG9iLmdldEJsb2IoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGhlIHByb3Bvc2VkIEFQSVxuICAgICAgICBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoJ2RhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCwnICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0lubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gIH1cbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/worker-loader/dist/workers/InlineWorker.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, module, scripts, repository, keywords, author, license, bugs, homepage, dependencies, devDependencies, eslintConfig, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"imjoy-rpc\\\",\\\"version\\\":\\\"0.2.14\\\",\\\"description\\\":\\\"Remote procedure calls for ImJoy.\\\",\\\"module\\\":\\\"index.js\\\",\\\"scripts\\\":{\\\"build\\\":\\\"rm -rf dist && npm run build-umd\\\",\\\"build-umd\\\":\\\"webpack --config webpack.config.js --mode development && NODE_ENV=production webpack --config webpack.config.js --mode production --devtool source-map \\\",\\\"watch\\\":\\\"NODE_ENV=production webpack --watch --progress --config webpack.config.js --mode production --devtool source-map\\\",\\\"publish\\\":\\\"npm install && npm run build && npm publish\\\",\\\"serve\\\":\\\"webpack-dev-server\\\",\\\"stats\\\":\\\"webpack --profile --json > stats.json\\\",\\\"stats-prod\\\":\\\"webpack --profile --json --mode production > stats-prod.json\\\",\\\"analyze\\\":\\\"webpack-bundle-analyzer -p 9999 stats.json\\\",\\\"analyze-prod\\\":\\\"webpack-bundle-analyzer -p 9999 stats-prod.json\\\",\\\"clean\\\":\\\"rimraf dist/*\\\",\\\"deploy\\\":\\\"npm run build && node deploy-site.js\\\",\\\"format\\\":\\\"prettier --write \\\\\\\"{src,tests}/**/**\\\\\\\"\\\",\\\"check-format\\\":\\\"prettier --check \\\\\\\"{src,tests}/**/**\\\\\\\"\\\",\\\"test\\\":\\\"karma start --single-run --browsers ChromeHeadless,FirefoxHeadless karma.conf.js\\\",\\\"test-watch\\\":\\\"karma start --auto-watch --browsers Chrome,FirefoxHeadless karma.conf.js --debug\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/imjoy-team/imjoy-rpc.git\\\"},\\\"keywords\\\":[\\\"imjoy\\\",\\\"rpc\\\"],\\\"author\\\":\\\"imjoy-team <imjoy.team@gmail.com>\\\",\\\"license\\\":\\\"MIT\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/imjoy-team/imjoy-rpc/issues\\\"},\\\"homepage\\\":\\\"https://github.com/imjoy-team/imjoy-rpc\\\",\\\"dependencies\\\":{},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/plugin-syntax-dynamic-import\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/polyfill\\\":\\\"^7.0.0-beta.39\\\",\\\"@babel/preset-env\\\":\\\"^7.0.0-beta.39\\\",\\\"@types/requirejs\\\":\\\"^2.1.28\\\",\\\"babel-core\\\":\\\"^6.26.0\\\",\\\"babel-eslint\\\":\\\"^10.1.0\\\",\\\"babel-loader\\\":\\\"^8.1.0\\\",\\\"babel-runtime\\\":\\\"^6.26.0\\\",\\\"chai\\\":\\\"^4.2.0\\\",\\\"clean-webpack-plugin\\\":\\\"^0.1.19\\\",\\\"copy-webpack-plugin\\\":\\\"^5.0.5\\\",\\\"eslint\\\":\\\"^6.8.0\\\",\\\"eslint-config-prettier\\\":\\\"^4.2.0\\\",\\\"eslint-loader\\\":\\\"^4.0.2\\\",\\\"file-loader\\\":\\\"^0.11.2\\\",\\\"fs-extra\\\":\\\"^0.30.0\\\",\\\"gh-pages\\\":\\\"^2.0.1\\\",\\\"html-loader\\\":\\\"^0.5.5\\\",\\\"html-webpack-plugin\\\":\\\"^3.2.0\\\",\\\"json-loader\\\":\\\"^0.5.4\\\",\\\"karma\\\":\\\"^4.4.1\\\",\\\"karma-chrome-launcher\\\":\\\"^3.1.0\\\",\\\"karma-firefox-launcher\\\":\\\"^1.3.0\\\",\\\"karma-mocha\\\":\\\"^1.3.0\\\",\\\"karma-spec-reporter\\\":\\\"0.0.32\\\",\\\"karma-webpack\\\":\\\"^4.0.2\\\",\\\"lerna\\\":\\\"^3.8.0\\\",\\\"lodash.debounce\\\":\\\"^4.0.8\\\",\\\"mocha\\\":\\\"^7.1.2\\\",\\\"postcss\\\":\\\"^6.0.2\\\",\\\"prettier\\\":\\\"^1.6.1\\\",\\\"rimraf\\\":\\\"^2.6.2\\\",\\\"schema-utils\\\":\\\"^0.4.3\\\",\\\"socket.io-client\\\":\\\"^2.3.0\\\",\\\"style-loader\\\":\\\"^0.18.1\\\",\\\"url-loader\\\":\\\"^0.5.9\\\",\\\"webpack\\\":\\\"^4.0.0\\\",\\\"webpack-bundle-analyzer\\\":\\\"^3.3.2\\\",\\\"webpack-cli\\\":\\\"^3.1.2\\\",\\\"webpack-dev-server\\\":\\\"^3.1.1\\\",\\\"webpack-merge\\\":\\\"^4.1.1\\\",\\\"workbox-webpack-plugin\\\":\\\"^4.3.1\\\",\\\"worker-loader\\\":\\\"^2.0.0\\\",\\\"write-file-webpack-plugin\\\":\\\"^4.5.1\\\"},\\\"eslintConfig\\\":{\\\"globals\\\":{\\\"document\\\":true,\\\"window\\\":true}}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlLmpzb24uanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./package.json\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! exports provided: RPC, API_VERSION, VERSION, waitForInitialization, setupRPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"waitForInitialization\", function() { return waitForInitialization; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupRPC\", function() { return setupRPC; });\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugin.webworker.js */ \"./src/plugin.webworker.js\");\n/* harmony import */ var _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pluginIframe.js */ \"./src/pluginIframe.js\");\n/* harmony import */ var _pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginWebPython.js */ \"./src/pluginWebPython.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__[\"RPC\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"API_VERSION\", function() { return _rpc_js__WEBPACK_IMPORTED_MODULE_4__[\"API_VERSION\"]; });\n\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ \"./package.json\", 1);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VERSION\", function() { return _package_json__WEBPACK_IMPORTED_MODULE_5__[\"version\"]; });\n\n/**\n * Contains the code executed in the sandboxed frame under web-browser\n *\n * Tries to create a Web-Worker inside the frame and set up the\n * communication between the worker and the parent window. Some\n * browsers restrict creating a worker inside a sandboxed iframe - if\n * this happens, the plugin initialized right inside the frame (in the\n * same thread)\n */\n\n\n\n\n\n\n\nfunction _inIframe() {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\n/**\n * Initializes the plugin inside a web worker. May throw an exception\n * in case this was not permitted by the browser.\n */\n\n\nfunction setupWebWorker(config) {\n  if (!config.allow_execution) throw new Error(\"web-worker plugin can only work with allow_execution=true\");\n  const worker = new _plugin_webworker_js__WEBPACK_IMPORTED_MODULE_0___default.a(); // mixed content warning in Chrome silently skips worker\n  // initialization without exception, handling this with timeout\n\n  const fallbackTimeout = setTimeout(function () {\n    worker.terminate();\n    console.warn(`Plugin failed to start as a web-worker, running in an iframe instead.`);\n    Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n  }, 2000);\n  const peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])(); // forwarding messages between the worker and parent window\n\n  worker.addEventListener(\"message\", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.type === \"worker-ready\") {\n      // send config to the worker\n      worker.postMessage({\n        type: \"connectRPC\",\n        config: config\n      });\n      clearTimeout(fallbackTimeout);\n      return;\n    } else if (m.type === \"initialized\") {\n      // complete the missing fields\n      m.config = Object.assign({}, config, m.config);\n      m.origin = window.location.origin;\n      m.peer_id = peer_id;\n    } else if (m.type === \"imjoy_remote_api_ready\") {\n      // if it's a webworker, there will be no api object returned\n      window.dispatchEvent(new CustomEvent(\"imjoy_remote_api_ready\", {\n        detail: null\n      }));\n    } else if (m.type === \"cacheRequirements\" && typeof cache_requirements === \"function\") {\n      cache_requirements(m.requirements);\n    } else if (m.type === \"disconnect\") {\n      worker.terminate();\n    } else {\n      if (m.__transferables__) {\n        transferables = m.__transferables__;\n        delete m.__transferables__;\n      }\n    }\n\n    parent.postMessage(m, config.target_origin || \"*\", transferables);\n  });\n  window.addEventListener(\"message\", function (e) {\n    let transferables = undefined;\n    const m = e.data;\n\n    if (m.__transferables__) {\n      transferables = m.__transferables__;\n      delete m.__transferables__;\n    }\n\n    if (m.peer_id === peer_id) {\n      worker.postMessage(m, transferables);\n    } else if (config.debug) {\n      console.log(`connection peer id mismatch ${m.peer_id} !== ${peer_id}`);\n    }\n  });\n}\n\nfunction waitForInitialization(config) {\n  if (!_inIframe()) {\n    throw new Error(\"waitForInitialization (imjoy-rpc) should only run inside an iframe.\");\n  }\n\n  config = config || {};\n  const targetOrigin = config.target_origin || \"*\";\n\n  if (config.credential_required && typeof config.verify_credential !== \"function\") {\n    throw new Error(\"Please also provide the `verify_credential` function with `credential_required`.\");\n  }\n\n  if (config.credential_required && targetOrigin === \"*\") {\n    throw new Error(\"`target_origin` was set to `*` with `credential_required=true`, there is a security risk that you may leak the credential to website from other origin. Please specify the `target_origin` explicitly.\");\n  }\n\n  const done = () => {\n    window.removeEventListener(\"message\", handleEvent);\n  };\n\n  const peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])();\n\n  const handleEvent = e => {\n    if (e.type === \"message\" && (targetOrigin === \"*\" || e.origin === targetOrigin)) {\n      if (e.data.type === \"initialize\") {\n        done();\n\n        if (e.data.peer_id !== peer_id) {\n          // TODO: throw an error when we are sure all the peers will send the peer_id\n          console.warn(`${e.data.config && e.data.config.name}: connection peer id mismatch ${e.data.peer_id} !== ${peer_id}`);\n        }\n\n        const cfg = e.data.config; // override the target_origin setting if it's configured by the rpc client\n        // otherwise take the setting from the core\n\n        if (targetOrigin !== \"*\") {\n          cfg.target_origin = targetOrigin;\n        }\n\n        if (config.credential_required) {\n          config.verify_credential(cfg.credential).then(result => {\n            if (result && result.auth && !result.error) {\n              // pass the authentication information with tokens\n              cfg.auth = result.auth;\n              setupRPC(cfg).then(() => {\n                console.log(\"ImJoy RPC loaded successfully!\");\n              });\n            } else {\n              throw new Error(\"Failed to verify the credentail:\" + (result && result.error));\n            }\n          });\n        } else {\n          setupRPC(cfg).then(() => {\n            console.log(\"ImJoy RPC loaded successfully!\");\n          });\n        }\n      } else {\n        throw new Error(`unrecognized message: ${e.data}`);\n      }\n    }\n  };\n\n  window.addEventListener(\"message\", handleEvent);\n  parent.postMessage({\n    type: \"imjoyRPCReady\",\n    config: config,\n    peer_id: peer_id\n  }, \"*\");\n}\nfunction setupRPC(config) {\n  config = config || {};\n  if (!config.name) throw new Error(\"Please specify a name for your app.\");\n  config.version = config.version || \"0.1.0\";\n  config.description = config.description || `[TODO: add description for ${config.name} ]`;\n  config.type = config.type || \"rpc-window\";\n  config.id = config.id || Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"randId\"])();\n  config.allow_execution = config.allow_execution || false;\n\n  if (config.enable_service_worker) {\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"setupServiceWorker\"])(config.base_url, config.target_origin, config.cache_requirements);\n  }\n\n  if (config.cache_requirements) {\n    delete config.cache_requirements;\n  } // remove functions\n\n\n  config = Object.keys(config).reduce((p, c) => {\n    if (typeof config[c] !== \"function\") p[c] = config[c];\n    return p;\n  }, {});\n  return new Promise((resolve, reject) => {\n    if (_inIframe()) {\n      if (config.type === \"web-worker\") {\n        try {\n          setupWebWorker(config);\n        } catch (e) {\n          // fallback to iframe\n          Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n        }\n      } else if (config.type === \"web-python\" || config.type === \"web-python-window\") {\n        Object(_pluginWebPython_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(config);\n      } else if ([\"rpc-window\", \"rpc-worker\", \"iframe\", \"window\"].includes(config.type)) {\n        Object(_pluginIframe_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(config);\n      } else {\n        console.error(\"Unsupported plugin type: \" + config.type);\n        reject(\"Unsupported plugin type: \" + config.type);\n      }\n\n      try {\n        const handleEvent = e => {\n          const api = e.detail;\n\n          if (config.expose_api_globally) {\n            window.api = api;\n          } // imjoy plugin api\n\n\n          resolve(api);\n          window.removeEventListener(\"imjoy_remote_api_ready\", handleEvent);\n        };\n\n        window.addEventListener(\"imjoy_remote_api_ready\", handleEvent);\n      } catch (e) {\n        reject(e);\n      }\n    } else {\n      reject(new Error(\"imjoy-rpc should only run inside an iframe.\"));\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ }),

/***/ "./src/plugin.webworker.js":
/*!*********************************!*\
  !*** ./src/plugin.webworker.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = function() {\n  return __webpack_require__(/*! !./node_modules/worker-loader/dist/workers/InlineWorker.js */ \"./node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\\"./src/plugin.webworker.js\\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\\"./src/plugin.webworker.js\\\":\\n/*!*********************************!*\\\\\\n  !*** ./src/plugin.webworker.js ***!\\n  \\\\*********************************/\\n/*! no exports provided */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \\\\\\\"./src/pluginCore.js\\\\\\\");\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \\\\\\\"./src/utils.js\\\\\\\");\\\\n/**\\\\n * Contains the routines loaded by the plugin Worker under web-browser.\\\\n *\\\\n * Initializes the web environment version of the platform-dependent\\\\n * connection object for the plugin site\\\\n */\\\\n\\\\n\\\\n\\\\n\\\\n(function() {\\\\n  // make sure this runs inside a webworker\\\\n  if (\\\\n    typeof WorkerGlobalScope === \\\\\\\"undefined\\\\\\\" ||\\\\n    !self ||\\\\n    !(self instanceof WorkerGlobalScope)\\\\n  ) {\\\\n    throw new Error(\\\\\\\"This script can only loaded in a webworker\\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Connection object provided to the RPC constructor,\\\\n   * plugin site implementation for the web-based environment.\\\\n   * Global will be then cleared to prevent exposure into the\\\\n   * Worker, so we put this local connection object into a closure\\\\n   */\\\\n  class Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\"MessageEmitter\\\\\\\"] {\\\\n    constructor(config) {\\\\n      super(config && config.debug);\\\\n      this.config = config || {};\\\\n    }\\\\n    connect() {\\\\n      self.addEventListener(\\\\\\\"message\\\\\\\", e => {\\\\n        this._fire(e.data.type, e.data);\\\\n      });\\\\n      this.emit({\\\\n        type: \\\\\\\"initialized\\\\\\\",\\\\n        config: this.config\\\\n      });\\\\n    }\\\\n    disconnect() {\\\\n      this._fire(\\\\\\\"beforeDisconnect\\\\\\\");\\\\n      self.close();\\\\n      this._fire(\\\\\\\"disconnected\\\\\\\");\\\\n    }\\\\n    emit(data) {\\\\n      let transferables = undefined;\\\\n      if (data.__transferables__) {\\\\n        transferables = data.__transferables__;\\\\n        delete data.__transferables__;\\\\n      }\\\\n      self.postMessage(data, transferables);\\\\n    }\\\\n    async execute(code) {\\\\n      if (code.type === \\\\\\\"requirements\\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\\"string\\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (!Array.isArray(code.requirements)) {\\\\n                code.requirements = [code.requirements];\\\\n              }\\\\n              for (var i = 0; i < code.requirements.length; i++) {\\\\n                if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\\".css\\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\\"css:\\\\\\\")\\\\n                ) {\\\\n                  throw \\\\\\\"unable to import css in a webworker\\\\\\\";\\\\n                } else if (\\\\n                  code.requirements[i].toLowerCase().endsWith(\\\\\\\".js\\\\\\\") ||\\\\n                  code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")\\\\n                ) {\\\\n                  if (code.requirements[i].startsWith(\\\\\\\"js:\\\\\\\")) {\\\\n                    code.requirements[i] = code.requirements[i].slice(3);\\\\n                  }\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"http\\\\\\\")) {\\\\n                  importScripts(code.requirements[i]);\\\\n                } else if (code.requirements[i].startsWith(\\\\\\\"cache:\\\\\\\")) {\\\\n                  //ignore cache\\\\n                } else {\\\\n                  console.log(\\\\n                    \\\\\\\"Unprocessed requirements url: \\\\\\\" + code.requirements[i]\\\\n                  );\\\\n                }\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\\"failed to import required scripts: \\\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n        } catch (e) {\\\\n          throw e;\\\\n        }\\\\n      } else if (code.type === \\\\\\\"script\\\\\\\") {\\\\n        try {\\\\n          if (\\\\n            code.requirements &&\\\\n            (Array.isArray(code.requirements) ||\\\\n              typeof code.requirements === \\\\\\\"string\\\\\\\")\\\\n          ) {\\\\n            try {\\\\n              if (Array.isArray(code.requirements)) {\\\\n                for (let i = 0; i < code.requirements.length; i++) {\\\\n                  importScripts(code.requirements[i]);\\\\n                }\\\\n              } else {\\\\n                importScripts(code.requirements);\\\\n              }\\\\n            } catch (e) {\\\\n              throw \\\\\\\"failed to import required scripts: \\\\\\\" +\\\\n                code.requirements.toString();\\\\n            }\\\\n          }\\\\n          eval(code.content);\\\\n        } catch (e) {\\\\n          console.error(e.message, e.stack);\\\\n          throw e;\\\\n        }\\\\n      } else {\\\\n        throw \\\\\\\"unsupported code type.\\\\\\\";\\\\n      }\\\\n      if (code.type === \\\\\\\"requirements\\\\\\\") {\\\\n        self.postMessage({\\\\n          type: \\\\\\\"cacheRequirements\\\\\\\",\\\\n          requirements: code.requirements\\\\n        });\\\\n      }\\\\n    }\\\\n  }\\\\n  const config = {\\\\n    type: \\\\\\\"web-worker\\\\\\\",\\\\n    dedicated_thread: true,\\\\n    allow_execution: true,\\\\n    lang: \\\\\\\"javascript\\\\\\\",\\\\n    api_version: _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\"API_VERSION\\\\\\\"]\\\\n  };\\\\n  const conn = new Connection(config);\\\\n  conn.on(\\\\\\\"connectRPC\\\\\\\", data => {\\\\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"connectRPC\\\\\\\"])(conn, Object.assign(data.config, config));\\\\n  });\\\\n  conn.connect();\\\\n  self.postMessage({\\\\n    type: \\\\\\\"worker-ready\\\\\\\"\\\\n  });\\\\n})();\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luLndlYndvcmtlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbi53ZWJ3b3JrZXIuanM/OGM1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnRhaW5zIHRoZSByb3V0aW5lcyBsb2FkZWQgYnkgdGhlIHBsdWdpbiBXb3JrZXIgdW5kZXIgd2ViLWJyb3dzZXIuXG4gKlxuICogSW5pdGlhbGl6ZXMgdGhlIHdlYiBlbnZpcm9ubWVudCB2ZXJzaW9uIG9mIHRoZSBwbGF0Zm9ybS1kZXBlbmRlbnRcbiAqIGNvbm5lY3Rpb24gb2JqZWN0IGZvciB0aGUgcGx1Z2luIHNpdGVcbiAqL1xuaW1wb3J0IHsgY29ubmVjdFJQQyB9IGZyb20gXCIuL3BsdWdpbkNvcmUuanNcIjtcbmltcG9ydCB7IEFQSV9WRVJTSU9OIH0gZnJvbSBcIi4vcnBjLmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlRW1pdHRlciwgcmFuZElkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuKGZ1bmN0aW9uKCkge1xuICAvLyBtYWtlIHN1cmUgdGhpcyBydW5zIGluc2lkZSBhIHdlYndvcmtlclxuICBpZiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSBcInVuZGVmaW5lZFwiIHx8XG4gICAgIXNlbGYgfHxcbiAgICAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSlcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBzY3JpcHQgY2FuIG9ubHkgbG9hZGVkIGluIGEgd2Vid29ya2VyXCIpO1xuICB9XG4gIC8qKlxuICAgKiBDb25uZWN0aW9uIG9iamVjdCBwcm92aWRlZCB0byB0aGUgUlBDIGNvbnN0cnVjdG9yLFxuICAgKiBwbHVnaW4gc2l0ZSBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIHdlYi1iYXNlZCBlbnZpcm9ubWVudC5cbiAgICogR2xvYmFsIHdpbGwgYmUgdGhlbiBjbGVhcmVkIHRvIHByZXZlbnQgZXhwb3N1cmUgaW50byB0aGVcbiAgICogV29ya2VyLCBzbyB3ZSBwdXQgdGhpcyBsb2NhbCBjb25uZWN0aW9uIG9iamVjdCBpbnRvIGEgY2xvc3VyZVxuICAgKi9cbiAgY2xhc3MgQ29ubmVjdGlvbiBleHRlbmRzIE1lc3NhZ2VFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgIHN1cGVyKGNvbmZpZyAmJiBjb25maWcuZGVidWcpO1xuICAgICAgdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgfVxuICAgIGNvbm5lY3QoKSB7XG4gICAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGUgPT4ge1xuICAgICAgICB0aGlzLl9maXJlKGUuZGF0YS50eXBlLCBlLmRhdGEpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoe1xuICAgICAgICB0eXBlOiBcImluaXRpYWxpemVkXCIsXG4gICAgICAgIGNvbmZpZzogdGhpcy5jb25maWdcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgdGhpcy5fZmlyZShcImJlZm9yZURpc2Nvbm5lY3RcIik7XG4gICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICB0aGlzLl9maXJlKFwiZGlzY29ubmVjdGVkXCIpO1xuICAgIH1cbiAgICBlbWl0KGRhdGEpIHtcbiAgICAgIGxldCB0cmFuc2ZlcmFibGVzID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGRhdGEuX190cmFuc2ZlcmFibGVzX18pIHtcbiAgICAgICAgdHJhbnNmZXJhYmxlcyA9IGRhdGEuX190cmFuc2ZlcmFibGVzX187XG4gICAgICAgIGRlbGV0ZSBkYXRhLl9fdHJhbnNmZXJhYmxlc19fO1xuICAgICAgfVxuICAgICAgc2VsZi5wb3N0TWVzc2FnZShkYXRhLCB0cmFuc2ZlcmFibGVzKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShjb2RlKSB7XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpKSB7XG4gICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgPSBbY29kZS5yZXF1aXJlbWVudHNdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZS5yZXF1aXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLmNzc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNzczpcIilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IFwidW5hYmxlIHRvIGltcG9ydCBjc3MgaW4gYSB3ZWJ3b3JrZXJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0udG9Mb3dlckNhc2UoKS5lbmRzV2l0aChcIi5qc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImpzOlwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNvZGUucmVxdWlyZW1lbnRzW2ldLnN0YXJ0c1dpdGgoXCJqczpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0gPSBjb2RlLnJlcXVpcmVtZW50c1tpXS5zbGljZSgzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgICAgICAgICAgIGltcG9ydFNjcmlwdHMoY29kZS5yZXF1aXJlbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNhY2hlOlwiKSkge1xuICAgICAgICAgICAgICAgICAgLy9pZ25vcmUgY2FjaGVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIFwiVW5wcm9jZXNzZWQgcmVxdWlyZW1lbnRzIHVybDogXCIgKyBjb2RlLnJlcXVpcmVtZW50c1tpXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFwiICtcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29kZS50eXBlID09PSBcInNjcmlwdFwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KGNvZGUucmVxdWlyZW1lbnRzKSB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2RlLnJlcXVpcmVtZW50cykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvZGUucmVxdWlyZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBpbXBvcnRTY3JpcHRzKGNvZGUucmVxdWlyZW1lbnRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gaW1wb3J0IHJlcXVpcmVkIHNjcmlwdHM6IFwiICtcbiAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50cy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBldmFsKGNvZGUuY29udGVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSwgZS5zdGFjayk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgXCJ1bnN1cHBvcnRlZCBjb2RlIHR5cGUuXCI7XG4gICAgICB9XG4gICAgICBpZiAoY29kZS50eXBlID09PSBcInJlcXVpcmVtZW50c1wiKSB7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6IFwiY2FjaGVSZXF1aXJlbWVudHNcIixcbiAgICAgICAgICByZXF1aXJlbWVudHM6IGNvZGUucmVxdWlyZW1lbnRzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBjb25maWcgPSB7XG4gICAgdHlwZTogXCJ3ZWItd29ya2VyXCIsXG4gICAgZGVkaWNhdGVkX3RocmVhZDogdHJ1ZSxcbiAgICBhbGxvd19leGVjdXRpb246IHRydWUsXG4gICAgbGFuZzogXCJqYXZhc2NyaXB0XCIsXG4gICAgYXBpX3ZlcnNpb246IEFQSV9WRVJTSU9OXG4gIH07XG4gIGNvbnN0IGNvbm4gPSBuZXcgQ29ubmVjdGlvbihjb25maWcpO1xuICBjb25uLm9uKFwiY29ubmVjdFJQQ1wiLCBkYXRhID0+IHtcbiAgICBjb25uZWN0UlBDKGNvbm4sIE9iamVjdC5hc3NpZ24oZGF0YS5jb25maWcsIGNvbmZpZykpO1xuICB9KTtcbiAgY29ubi5jb25uZWN0KCk7XG4gIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgIHR5cGU6IFwid29ya2VyLXJlYWR5XCJcbiAgfSk7XG59KSgpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/pluginCore.js\\\":\\n/*!***************************!*\\\\\\n  !*** ./src/pluginCore.js ***!\\n  \\\\***************************/\\n/*! exports provided: connectRPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"connectRPC\\\\\\\", function() { return connectRPC; });\\\\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \\\\\\\"./src/rpc.js\\\\\\\");\\\\n/**\\\\n * Core plugin script loaded into the plugin process/thread.\\\\n *\\\\n * Initializes the plugin-site API global methods.\\\\n */\\\\n\\\\nfunction connectRPC(connection, config) {\\\\n  config = config || {};\\\\n  const codecs = {};\\\\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"RPC\\\\\\\"](connection, config, codecs);\\\\n  rpc.on(\\\\\\\"getInterface\\\\\\\", function () {\\\\n    launchConnected();\\\\n  });\\\\n  rpc.on(\\\\\\\"remoteReady\\\\\\\", function () {\\\\n    const api = rpc.getRemote() || {};\\\\n\\\\n    if (api.export) {\\\\n      throw new Error(\\\\\\\"`export` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    if (api.onload) {\\\\n      throw new Error(\\\\\\\"`onload` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    if (api.dispose) {\\\\n      throw new Error(\\\\\\\"`dispose` is a reserved function name\\\\\\\");\\\\n    }\\\\n\\\\n    api.registerCodec = function (config) {\\\\n      if (!config[\\\\\\\"name\\\\\\\"] || !config[\\\\\\\"encoder\\\\\\\"] && !config[\\\\\\\"decoder\\\\\\\"]) {\\\\n        throw new Error(\\\\\\\"Invalid codec format, please make sure you provide a name, type, encoder and decoder.\\\\\\\");\\\\n      } else {\\\\n        if (config.type) {\\\\n          for (let k of Object.keys(codecs)) {\\\\n            if (codecs[k].type === config.type || k === config.name) {\\\\n              delete codecs[k];\\\\n              console.warn(\\\\\\\"Remove duplicated codec: \\\\\\\" + k);\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        codecs[config[\\\\\\\"name\\\\\\\"]] = config;\\\\n      }\\\\n    };\\\\n\\\\n    api.disposeObject = function (obj) {\\\\n      rpc.disposeObject(obj);\\\\n    };\\\\n\\\\n    api.export = function (_interface, config) {\\\\n      rpc.setInterface(_interface, config);\\\\n    };\\\\n\\\\n    api.onLoad = function (handler) {\\\\n      handler = checkHandler(handler);\\\\n\\\\n      if (connected) {\\\\n        handler();\\\\n      } else {\\\\n        connectedHandlers.push(handler);\\\\n      }\\\\n    };\\\\n\\\\n    api.dispose = function (_interface) {\\\\n      rpc.disconnect();\\\\n    };\\\\n\\\\n    if (typeof WorkerGlobalScope !== \\\\\\\"undefined\\\\\\\" && self instanceof WorkerGlobalScope) {\\\\n      self.api = api;\\\\n      self.postMessage({\\\\n        type: \\\\\\\"imjoy_remote_api_ready\\\\\\\"\\\\n      });\\\\n    } else if (typeof window) {\\\\n      window.dispatchEvent(new CustomEvent(\\\\\\\"imjoy_remote_api_ready\\\\\\\", {\\\\n        detail: api\\\\n      }));\\\\n    }\\\\n  });\\\\n  let connected = false;\\\\n  const connectedHandlers = [];\\\\n\\\\n  const launchConnected = function () {\\\\n    if (!connected) {\\\\n      connected = true;\\\\n      let handler;\\\\n\\\\n      while (handler = connectedHandlers.pop()) {\\\\n        handler();\\\\n      }\\\\n    }\\\\n  };\\\\n\\\\n  const checkHandler = function (handler) {\\\\n    const type = typeof handler;\\\\n\\\\n    if (type !== \\\\\\\"function\\\\\\\") {\\\\n      const msg = \\\\\\\"A function may only be subsribed to the event, \\\\\\\" + type + \\\\\\\" was provided instead\\\\\\\";\\\\n      throw new Error(msg);\\\\n    }\\\\n\\\\n    return handler;\\\\n  };\\\\n\\\\n  return rpc;\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbkNvcmUuanM/YTgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcmUgcGx1Z2luIHNjcmlwdCBsb2FkZWQgaW50byB0aGUgcGx1Z2luIHByb2Nlc3MvdGhyZWFkLlxuICpcbiAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4tc2l0ZSBBUEkgZ2xvYmFsIG1ldGhvZHMuXG4gKi9cbmltcG9ydCB7IFJQQyB9IGZyb20gXCIuL3JwYy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFJQQyhjb25uZWN0aW9uLCBjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25zdCBjb2RlY3MgPSB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZywgY29kZWNzKTtcbiAgcnBjLm9uKFwiZ2V0SW50ZXJmYWNlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGxhdW5jaENvbm5lY3RlZCgpO1xuICB9KTtcblxuICBycGMub24oXCJyZW1vdGVSZWFkeVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhcGkgPSBycGMuZ2V0UmVtb3RlKCkgfHwge307XG4gICAgaWYgKGFwaS5leHBvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBleHBvcnRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5vbmxvYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBvbmxvYWRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5kaXNwb3NlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGlzcG9zZWAgaXMgYSByZXNlcnZlZCBmdW5jdGlvbiBuYW1lXCIpO1xuICAgIH1cbiAgICBhcGkucmVnaXN0ZXJDb2RlYyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgaWYgKCFjb25maWdbXCJuYW1lXCJdIHx8ICghY29uZmlnW1wiZW5jb2RlclwiXSAmJiAhY29uZmlnW1wiZGVjb2RlclwiXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiSW52YWxpZCBjb2RlYyBmb3JtYXQsIHBsZWFzZSBtYWtlIHN1cmUgeW91IHByb3ZpZGUgYSBuYW1lLCB0eXBlLCBlbmNvZGVyIGFuZCBkZWNvZGVyLlwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKGNvZGVjcykpIHtcbiAgICAgICAgICAgIGlmIChjb2RlY3Nba10udHlwZSA9PT0gY29uZmlnLnR5cGUgfHwgayA9PT0gY29uZmlnLm5hbWUpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIGNvZGVjc1trXTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUmVtb3ZlIGR1cGxpY2F0ZWQgY29kZWM6IFwiICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvZGVjc1tjb25maWdbXCJuYW1lXCJdXSA9IGNvbmZpZztcbiAgICAgIH1cbiAgICB9O1xuICAgIGFwaS5kaXNwb3NlT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICBycGMuZGlzcG9zZU9iamVjdChvYmopO1xuICAgIH07XG4gICAgYXBpLmV4cG9ydCA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UsIGNvbmZpZykge1xuICAgICAgcnBjLnNldEludGVyZmFjZShfaW50ZXJmYWNlLCBjb25maWcpO1xuICAgIH07XG4gICAgYXBpLm9uTG9hZCA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIgPSBjaGVja0hhbmRsZXIoaGFuZGxlcik7XG4gICAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3RlZEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBhcGkuZGlzcG9zZSA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICAgIHJwYy5kaXNjb25uZWN0KCk7XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlXG4gICAgKSB7XG4gICAgICBzZWxmLmFwaSA9IGFwaTtcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImltam95X3JlbW90ZV9hcGlfcmVhZHlcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93KSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiLCB7IGRldGFpbDogYXBpIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xuICBjb25zdCBjb25uZWN0ZWRIYW5kbGVycyA9IFtdO1xuXG4gIGNvbnN0IGxhdW5jaENvbm5lY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBjb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICBsZXQgaGFuZGxlcjtcbiAgICAgIHdoaWxlICgoaGFuZGxlciA9IGNvbm5lY3RlZEhhbmRsZXJzLnBvcCgpKSkge1xuICAgICAgICBoYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGhhbmRsZXI7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgbXNnID1cbiAgICAgICAgXCJBIGZ1bmN0aW9uIG1heSBvbmx5IGJlIHN1YnNyaWJlZCB0byB0aGUgZXZlbnQsIFwiICtcbiAgICAgICAgdHlwZSArXG4gICAgICAgIFwiIHdhcyBwcm92aWRlZCBpbnN0ZWFkXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH07XG5cbiAgcmV0dXJuIHJwYztcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///./src/pluginCore.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/rpc.js\\\":\\n/*!********************!*\\\\\\n  !*** ./src/rpc.js ***!\\n  \\\\********************/\\n/*! exports provided: API_VERSION, RPC */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"API_VERSION\\\\\\\", function() { return API_VERSION; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"RPC\\\\\\\", function() { return RPC; });\\\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \\\\\\\"./src/utils.js\\\\\\\");\\\\n/**\\\\n * Contains the RPC object used both by the application\\\\n * site, and by each plugin\\\\n */\\\\n\\\\nconst API_VERSION = \\\\\\\"0.2.3\\\\\\\";\\\\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\\\\n\\\\nfunction _appendBuffer(buffer1, buffer2) {\\\\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\\\\n  tmp.set(new Uint8Array(buffer1), 0);\\\\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\\\\n  return tmp.buffer;\\\\n}\\\\n\\\\nfunction indexObject(obj, is) {\\\\n  if (typeof is == \\\\\\\"string\\\\\\\") return indexObject(obj, is.split(\\\\\\\".\\\\\\\"));else if (is.length == 0) return obj;else return indexObject(obj[is[0]], is.slice(1));\\\\n}\\\\n/**\\\\n * RPC object represents a single site in the\\\\n * communication protocol between the application and the plugin\\\\n *\\\\n * @param {Object} connection a special object allowing to send\\\\n * and receive messages from the opposite site (basically it\\\\n * should only provide send() and onMessage() methods)\\\\n */\\\\n\\\\n\\\\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"MessageEmitter\\\\\\\"] {\\\\n  constructor(connection, config, codecs) {\\\\n    super(config && config.debug);\\\\n    this._connection = connection;\\\\n    this.config = config || {};\\\\n    this._codecs = codecs || {};\\\\n    this._object_store = {};\\\\n    this._method_weakmap = new WeakMap();\\\\n    this._object_weakmap = new WeakMap();\\\\n    this._local_api = null; // make sure there is an execute function\\\\n\\\\n    const name = this.config.name;\\\\n\\\\n    this._connection.execute = this._connection.execute || function () {\\\\n      throw new Error(`connection.execute not implemented (in \\\\\\\"${name}\\\\\\\")`);\\\\n    };\\\\n\\\\n    this._store = new ReferenceStore();\\\\n    this._method_refs = new ReferenceStore();\\\\n\\\\n    this._method_refs.onReady(() => {\\\\n      this._fire(\\\\\\\"remoteIdle\\\\\\\");\\\\n    });\\\\n\\\\n    this._method_refs.onBusy(() => {\\\\n      this._fire(\\\\\\\"remoteBusy\\\\\\\");\\\\n    });\\\\n\\\\n    this._setupMessageHanlders();\\\\n  }\\\\n\\\\n  init() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"initialized\\\\\\\",\\\\n      config: this.config,\\\\n      peer_id: this._connection.peer_id\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Set a handler to be called when received a responce from the\\\\n   * remote site reporting that the previously provided interface\\\\n   * has been successfully set as remote for that site\\\\n   *\\\\n   * @param {Function} handler\\\\n   */\\\\n\\\\n\\\\n  getRemoteCallStack() {\\\\n    return this._method_refs.getStack();\\\\n  }\\\\n  /**\\\\n   * @returns {Object} set of remote interface methods\\\\n   */\\\\n\\\\n\\\\n  getRemote() {\\\\n    return this._remote_interface;\\\\n  }\\\\n  /**\\\\n   * Sets the interface of this site making it available to the\\\\n   * remote site by sending a message with a set of methods names\\\\n   *\\\\n   * @param {Object} _interface to set\\\\n   */\\\\n\\\\n\\\\n  setInterface(_interface, config) {\\\\n    config = config || {};\\\\n    this.config.name = config.name || this.config.name;\\\\n    this.config.description = config.description || this.config.description;\\\\n\\\\n    if (this.config.forwarding_functions) {\\\\n      for (let func_name of this.config.forwarding_functions) {\\\\n        const _remote = this._remote_interface;\\\\n\\\\n        if (_remote[func_name]) {\\\\n          if (_interface.constructor === Object) {\\\\n            if (!_interface[func_name]) {\\\\n              _interface[func_name] = (...args) => {\\\\n                _remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          } else if (_interface.constructor.constructor === Function) {\\\\n            if (!_interface.constructor.prototype[func_name]) {\\\\n              _interface.constructor.prototype[func_name] = (...args) => {\\\\n                _remote[func_name](...args);\\\\n              };\\\\n            }\\\\n          }\\\\n        }\\\\n      }\\\\n    }\\\\n\\\\n    this._local_api = _interface;\\\\n\\\\n    this._fire(\\\\\\\"interfaceAvailable\\\\\\\");\\\\n  }\\\\n  /**\\\\n   * Sends the actual interface to the remote site upon it was\\\\n   * updated or by a special request of the remote site\\\\n   */\\\\n\\\\n\\\\n  sendInterface() {\\\\n    if (!this._local_api) {\\\\n      throw new Error(\\\\\\\"interface is not set.\\\\\\\");\\\\n    }\\\\n\\\\n    this._encode(this._local_api, true).then(api => {\\\\n      this._connection.emit({\\\\n        type: \\\\\\\"setInterface\\\\\\\",\\\\n        api: api\\\\n      });\\\\n    });\\\\n  }\\\\n\\\\n  _disposeObject(objectId) {\\\\n    if (this._object_store[objectId]) {\\\\n      delete this._object_store[objectId];\\\\n    } else {\\\\n      throw new Error(`Object (id=${objectId}) not found.`);\\\\n    }\\\\n  }\\\\n\\\\n  disposeObject(obj) {\\\\n    return new Promise((resolve, reject) => {\\\\n      if (this._object_weakmap.has(obj)) {\\\\n        const objectId = this._object_weakmap.get(obj);\\\\n\\\\n        this._connection.once(\\\\\\\"disposed\\\\\\\", data => {\\\\n          if (data.error) reject(new Error(data.error));else resolve();\\\\n        });\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"disposeObject\\\\\\\",\\\\n          object_id: objectId\\\\n        });\\\\n      } else {\\\\n        throw new Error(\\\\\\\"Invalid object\\\\\\\");\\\\n      }\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Handles a message from the remote site\\\\n   */\\\\n  // var callback_reg = new RegExp(\\\\\\\"onupdate|run$\\\\\\\")\\\\n\\\\n\\\\n  _setupMessageHanlders() {\\\\n    this._connection.on(\\\\\\\"init\\\\\\\", this.init);\\\\n\\\\n    this._connection.on(\\\\\\\"execute\\\\\\\", data => {\\\\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"executed\\\\\\\"\\\\n        });\\\\n      }).catch(e => {\\\\n        console.error(e);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"executed\\\\\\\",\\\\n          error: String(e)\\\\n        });\\\\n      });\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"method\\\\\\\", async data => {\\\\n      let resolve, reject, method, args, result;\\\\n\\\\n      try {\\\\n        if (data.promise) {\\\\n          [resolve, reject] = await this._unwrap(data.promise, false);\\\\n        }\\\\n\\\\n        const _interface = this._object_store[data.object_id];\\\\n        method = indexObject(_interface, data.name);\\\\n        args = await this._unwrap(data.args, true);\\\\n\\\\n        if (data.promise) {\\\\n          result = method.apply(_interface, args);\\\\n\\\\n          if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\\"AsyncFunction\\\\\\\") {\\\\n            result.then(resolve).catch(reject);\\\\n          } else {\\\\n            resolve(result);\\\\n          }\\\\n        } else {\\\\n          method.apply(_interface, args);\\\\n        }\\\\n      } catch (err) {\\\\n        console.error(this.config.name, err);\\\\n\\\\n        if (reject) {\\\\n          reject(err);\\\\n        }\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"callback\\\\\\\", async data => {\\\\n      let resolve, reject, method, args, result;\\\\n\\\\n      try {\\\\n        if (data.promise) {\\\\n          [resolve, reject] = await this._unwrap(data.promise, false);\\\\n        }\\\\n\\\\n        if (data.promise) {\\\\n          method = this._store.fetch(data.id);\\\\n          args = await this._unwrap(data.args, true);\\\\n\\\\n          if (!method) {\\\\n            throw new Error(\\\\\\\"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\\");\\\\n          }\\\\n\\\\n          result = method.apply(null, args);\\\\n\\\\n          if (result instanceof Promise || method.constructor && method.constructor.name === \\\\\\\"AsyncFunction\\\\\\\") {\\\\n            result.then(resolve).catch(reject);\\\\n          } else {\\\\n            resolve(result);\\\\n          }\\\\n        } else {\\\\n          method = this._store.fetch(data.id);\\\\n          args = await this._unwrap(data.args, true);\\\\n\\\\n          if (!method) {\\\\n            throw new Error(\\\\\\\"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\\\\\\\");\\\\n          }\\\\n\\\\n          method.apply(null, args);\\\\n        }\\\\n      } catch (err) {\\\\n        console.error(this.config.name, err);\\\\n\\\\n        if (reject) {\\\\n          reject(err);\\\\n        }\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"disposeObject\\\\\\\", data => {\\\\n      try {\\\\n        this._disposeObject(data.object_id);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"disposed\\\\\\\"\\\\n        });\\\\n      } catch (e) {\\\\n        console.error(e);\\\\n\\\\n        this._connection.emit({\\\\n          type: \\\\\\\"disposed\\\\\\\",\\\\n          error: String(e)\\\\n        });\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"setInterface\\\\\\\", data => {\\\\n      this._setRemoteInterface(data.api);\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"getInterface\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"getInterface\\\\\\\");\\\\n\\\\n      if (this._local_api) {\\\\n        this.sendInterface();\\\\n      } else {\\\\n        this.once(\\\\\\\"interfaceAvailable\\\\\\\", () => {\\\\n          this.sendInterface();\\\\n        });\\\\n      }\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"interfaceSetAsRemote\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"interfaceSetAsRemote\\\\\\\");\\\\n    });\\\\n\\\\n    this._connection.on(\\\\\\\"disconnect\\\\\\\", () => {\\\\n      this._fire(\\\\\\\"beforeDisconnect\\\\\\\");\\\\n\\\\n      this._connection.disconnect();\\\\n\\\\n      this._fire(\\\\\\\"disconnected\\\\\\\");\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Sends a requests to the remote site asking it to provide its\\\\n   * current interface\\\\n   */\\\\n\\\\n\\\\n  requestRemote() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"getInterface\\\\\\\"\\\\n    });\\\\n  }\\\\n\\\\n  _ndarray(typedArray, shape, dtype) {\\\\n    var _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][typedArray.constructor.name];\\\\n\\\\n    if (dtype && dtype !== _dtype) {\\\\n      throw \\\\\\\"dtype doesn't match the type of the array: \\\\\\\" + _dtype + \\\\\\\" != \\\\\\\" + dtype;\\\\n    }\\\\n\\\\n    shape = shape || [typedArray.length];\\\\n    return {\\\\n      _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n      _rvalue: typedArray.buffer,\\\\n      _rshape: shape,\\\\n      _rdtype: _dtype\\\\n    };\\\\n  }\\\\n  /**\\\\n   * Sets the new remote interface provided by the other site\\\\n   *\\\\n   * @param {Array} names list of function names\\\\n   */\\\\n\\\\n\\\\n  _setRemoteInterface(api) {\\\\n    this._decode(api).then(intf => {\\\\n      this._remote_interface = intf;\\\\n\\\\n      this._fire(\\\\\\\"remoteReady\\\\\\\");\\\\n\\\\n      this._reportRemoteSet();\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * method. When the generated function is called, it will send the\\\\n   * corresponding message to the remote site asking it to execute\\\\n   * the particular method of its interface\\\\n   *\\\\n   * @param {String} name of the remote method\\\\n   *\\\\n   * @returns {Function} wrapped remote method\\\\n   */\\\\n\\\\n\\\\n  _genRemoteMethod(targetId, name, objectId) {\\\\n    var me = this;\\\\n\\\\n    var remoteMethod = function () {\\\\n      return new Promise(async (resolve, reject) => {\\\\n        let id = null;\\\\n\\\\n        try {\\\\n          id = me._method_refs.put(objectId ? objectId + \\\\\\\"/\\\\\\\" + name : name);\\\\n\\\\n          var wrapped_resolve = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return resolve.apply(this, arguments);\\\\n          };\\\\n\\\\n          var wrapped_reject = function () {\\\\n            if (id !== null) me._method_refs.fetch(id);\\\\n            return reject.apply(this, arguments);\\\\n          };\\\\n\\\\n          const encodedPromise = await me._wrap([wrapped_resolve, wrapped_reject]); // store the key id for removing them from the reference store together\\\\n\\\\n          wrapped_resolve.__promise_pair = encodedPromise[1]._rvalue;\\\\n          wrapped_reject.__promise_pair = encodedPromise[0]._rvalue;\\\\n          var args = Array.prototype.slice.call(arguments);\\\\n\\\\n          if (name === \\\\\\\"register\\\\\\\" || name === \\\\\\\"export\\\\\\\" || name === \\\\\\\"on\\\\\\\") {\\\\n            args = await me._wrap(args, true);\\\\n          } else {\\\\n            args = await me._wrap(args);\\\\n          }\\\\n\\\\n          var transferables = args.__transferables__;\\\\n          if (transferables) delete args.__transferables__;\\\\n\\\\n          me._connection.emit({\\\\n            type: \\\\\\\"method\\\\\\\",\\\\n            target_id: targetId,\\\\n            name: name,\\\\n            object_id: objectId,\\\\n            args: args,\\\\n            promise: encodedPromise\\\\n          }, transferables);\\\\n        } catch (e) {\\\\n          if (id) me._method_refs.fetch(id);\\\\n          reject(`Failed to exectue remote method (interface: ${objectId || me.id}, method: ${name}), error: ${e}`);\\\\n        }\\\\n      });\\\\n    };\\\\n\\\\n    remoteMethod.__remote_method = true;\\\\n    return remoteMethod;\\\\n  }\\\\n  /**\\\\n   * Sends a responce reporting that interface just provided by the\\\\n   * remote site was successfully set by this site as remote\\\\n   */\\\\n\\\\n\\\\n  _reportRemoteSet() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"interfaceSetAsRemote\\\\\\\"\\\\n    });\\\\n  }\\\\n  /**\\\\n   * Prepares the provided set of remote method arguments for\\\\n   * sending to the remote site, replaces all the callbacks with\\\\n   * identifiers\\\\n   *\\\\n   * @param {Array} args to wrap\\\\n   *\\\\n   * @returns {Array} wrapped arguments\\\\n   */\\\\n\\\\n\\\\n  async _encode(aObject, asInterface, objectId) {\\\\n    const aType = typeof aObject;\\\\n\\\\n    if (aType === \\\\\\\"number\\\\\\\" || aType === \\\\\\\"string\\\\\\\" || aType === \\\\\\\"boolean\\\\\\\" || aObject === null || aObject === undefined || aObject instanceof ArrayBuffer) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    let bObject;\\\\n\\\\n    if (typeof aObject === \\\\\\\"function\\\\\\\") {\\\\n      if (asInterface) {\\\\n        if (!objectId) throw new Error(\\\\\\\"objectId is not specified.\\\\\\\");\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"interface\\\\\\\",\\\\n          _rtarget_id: this._connection.peer_id,\\\\n          _rintf: objectId,\\\\n          _rvalue: asInterface\\\\n        };\\\\n\\\\n        this._method_weakmap.set(aObject, bObject);\\\\n      } else if (this._method_weakmap.has(aObject)) {\\\\n        bObject = this._method_weakmap.get(aObject);\\\\n      } else {\\\\n        const cid = this._store.put(aObject);\\\\n\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"callback\\\\\\\",\\\\n          _rtarget_id: this._connection.peer_id,\\\\n          _rname: aObject.constructor && aObject.constructor.name || cid,\\\\n          _rvalue: cid\\\\n        };\\\\n      }\\\\n\\\\n      return bObject;\\\\n    } // skip if already encoded\\\\n\\\\n\\\\n    if (aObject.constructor instanceof Object && aObject._rtype) {\\\\n      // make sure the interface functions are encoded\\\\n      if (aObject._rintf) {\\\\n        const temp = aObject._rtype;\\\\n        delete aObject._rtype;\\\\n        bObject = await this._encode(aObject, asInterface, objectId);\\\\n        bObject._rtype = temp;\\\\n      } else {\\\\n        bObject = aObject;\\\\n      }\\\\n\\\\n      return bObject;\\\\n    }\\\\n\\\\n    const transferables = [];\\\\n    const _transfer = aObject._transfer;\\\\n    const isarray = Array.isArray(aObject);\\\\n\\\\n    for (let tp of Object.keys(this._codecs)) {\\\\n      const codec = this._codecs[tp];\\\\n\\\\n      if (codec.encoder && aObject instanceof codec.type) {\\\\n        // TODO: what if multiple encoders found\\\\n        const encodedObj = await Promise.resolve(codec.encoder(aObject));\\\\n        if (encodedObj && !encodedObj._rtype) encodedObj._rtype = codec.name; // encode the functions in the interface object\\\\n\\\\n        if (encodedObj && encodedObj._rintf) {\\\\n          const temp = encodedObj._rtype;\\\\n          delete encodedObj._rtype;\\\\n          encodedObj = await this._encode(encodedObj, asInterface, objectId);\\\\n          encodedObj._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = encodedObj;\\\\n        return bObject;\\\\n      }\\\\n    }\\\\n\\\\n    if (\\\\n    /*global tf*/\\\\n    typeof tf !== \\\\\\\"undefined\\\\\\\" && tf.Tensor && aObject instanceof tf.Tensor) {\\\\n      const v_buffer = aObject.dataSync();\\\\n\\\\n      if (aObject._transfer || _transfer) {\\\\n        transferables.push(v_buffer.buffer);\\\\n        delete aObject._transfer;\\\\n      }\\\\n\\\\n      bObject = {\\\\n        _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n        _rvalue: v_buffer.buffer,\\\\n        _rshape: aObject.shape,\\\\n        _rdtype: aObject.dtype\\\\n      };\\\\n    } else if (\\\\n    /*global nj*/\\\\n    typeof nj !== \\\\\\\"undefined\\\\\\\" && nj.NdArray && aObject instanceof nj.NdArray) {\\\\n      var dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][aObject.selection.data.constructor.name];\\\\n\\\\n      if (aObject._transfer || _transfer) {\\\\n        transferables.push(aObject.selection.data.buffer);\\\\n        delete aObject._transfer;\\\\n      }\\\\n\\\\n      bObject = {\\\\n        _rtype: \\\\\\\"ndarray\\\\\\\",\\\\n        _rvalue: aObject.selection.data.buffer,\\\\n        _rshape: aObject.shape,\\\\n        _rdtype: dtype\\\\n      };\\\\n    } else if (aObject instanceof Error) {\\\\n      console.error(aObject);\\\\n      bObject = {\\\\n        _rtype: \\\\\\\"error\\\\\\\",\\\\n        _rvalue: aObject.toString()\\\\n      };\\\\n    } else if (typeof File !== \\\\\\\"undefined\\\\\\\" && aObject instanceof File) {\\\\n      bObject = {\\\\n        _rtype: \\\\\\\"file\\\\\\\",\\\\n        _rvalue: aObject,\\\\n        _rpath: aObject._path || aObject.webkitRelativePath\\\\n      };\\\\n    } // send objects supported by structure clone algorithm\\\\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\\\\n    else if (aObject !== Object(aObject) || aObject instanceof Boolean || aObject instanceof String || aObject instanceof Date || aObject instanceof RegExp || aObject instanceof ImageData || typeof FileList !== \\\\\\\"undefined\\\\\\\" && aObject instanceof FileList) {\\\\n        bObject = aObject; // TODO: avoid object such as DynamicPlugin instance.\\\\n      } else if (typeof File !== \\\\\\\"undefined\\\\\\\" && aObject instanceof File) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"file\\\\\\\",\\\\n          _rname: aObject.name,\\\\n          _rmime: aObject.type,\\\\n          _rvalue: aObject,\\\\n          _rpath: aObject._path || aObject.webkitRelativePath\\\\n        };\\\\n      } else if (aObject instanceof Blob) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"blob\\\\\\\",\\\\n          _rvalue: aObject\\\\n        };\\\\n      } else if (aObject instanceof ArrayBufferView) {\\\\n        if (aObject._transfer || _transfer) {\\\\n          transferables.push(aObject.buffer);\\\\n          delete aObject._transfer;\\\\n        }\\\\n\\\\n        const dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"typedArrayToDtype\\\\\\\"][aObject.constructor.name];\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"typedarray\\\\\\\",\\\\n          _rvalue: aObject.buffer,\\\\n          _rdtype: dtype\\\\n        };\\\\n      } else if (aObject instanceof DataView) {\\\\n        if (aObject._transfer || _transfer) {\\\\n          transferables.push(aObject.buffer);\\\\n          delete aObject._transfer;\\\\n        }\\\\n\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"memoryview\\\\\\\",\\\\n          _rvalue: aObject.buffer\\\\n        };\\\\n      } else if (aObject instanceof Set) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"set\\\\\\\",\\\\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\\\\n        };\\\\n      } else if (aObject instanceof Map) {\\\\n        bObject = {\\\\n          _rtype: \\\\\\\"orderedmap\\\\\\\",\\\\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\\\\n        };\\\\n      } else if (aObject.constructor instanceof Object || Array.isArray(aObject)) {\\\\n        bObject = isarray ? [] : {};\\\\n        let keys; // an object/array\\\\n\\\\n        if (aObject.constructor === Object || Array.isArray(aObject)) {\\\\n          keys = Object.keys(aObject);\\\\n        } // a class\\\\n        else if (aObject.constructor === Function) {\\\\n            throw new Error(\\\\\\\"Please instantiate the class before exportting it.\\\\\\\");\\\\n          } // instance of a class\\\\n          else if (aObject.constructor.constructor === Function) {\\\\n              keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject)); // TODO: use a proxy object to represent the actual object\\\\n              // always encode class instance as interface\\\\n\\\\n              asInterface = true;\\\\n            } else {\\\\n              throw Error(\\\\\\\"Unsupported interface type\\\\\\\");\\\\n            } // encode interfaces\\\\n\\\\n\\\\n        if (aObject._rintf || asInterface) {\\\\n          if (!objectId) {\\\\n            objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"randId\\\\\\\"])();\\\\n            this._object_store[objectId] = aObject;\\\\n          }\\\\n\\\\n          for (let k of keys) {\\\\n            if (k === \\\\\\\"constructor\\\\\\\") continue;\\\\n\\\\n            if (k.startsWith(\\\\\\\"_\\\\\\\")) {\\\\n              continue;\\\\n            }\\\\n\\\\n            bObject[k] = await this._encode(aObject[k], typeof asInterface === \\\\\\\"string\\\\\\\" ? asInterface + \\\\\\\".\\\\\\\" + k : k, objectId);\\\\n          } // object id for dispose the object remotely\\\\n\\\\n\\\\n          bObject._rintf = objectId; // remove interface when closed\\\\n\\\\n          if (aObject.on && typeof aObject.on === \\\\\\\"function\\\\\\\") {\\\\n            aObject.on(\\\\\\\"close\\\\\\\", () => {\\\\n              delete this._object_store[objectId];\\\\n            });\\\\n          }\\\\n        } else {\\\\n          for (let k of keys) {\\\\n            if ([\\\\\\\"hasOwnProperty\\\\\\\", \\\\\\\"constructor\\\\\\\"].includes(k)) continue;\\\\n            bObject[k] = await this._encode(aObject[k]);\\\\n          }\\\\n        } // for example, browserFS object\\\\n\\\\n      } else if (typeof aObject === \\\\\\\"object\\\\\\\") {\\\\n        const keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\\\\n        const objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"randId\\\\\\\"])();\\\\n\\\\n        for (let k of keys) {\\\\n          if ([\\\\\\\"hasOwnProperty\\\\\\\", \\\\\\\"constructor\\\\\\\"].includes(k)) continue; // encode as interface\\\\n\\\\n          bObject[k] = await this._encode(aObject[k], k, bObject);\\\\n        } // object id, used for dispose the object\\\\n\\\\n\\\\n        bObject._rintf = objectId;\\\\n      } else {\\\\n        throw \\\\\\\"imjoy-rpc: Unsupported data type:\\\\\\\" + aObject;\\\\n      }\\\\n\\\\n    if (transferables.length > 0) {\\\\n      bObject.__transferables__ = transferables;\\\\n    }\\\\n\\\\n    if (!bObject) {\\\\n      throw new Error(\\\\\\\"Failed to encode object\\\\\\\");\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  async _decode(aObject, withPromise) {\\\\n    if (!aObject) {\\\\n      return aObject;\\\\n    }\\\\n\\\\n    var bObject, v, k;\\\\n\\\\n    if (aObject[\\\\\\\"_rtype\\\\\\\"]) {\\\\n      if (this._codecs[aObject._rtype] && this._codecs[aObject._rtype].decoder) {\\\\n        if (aObject._rintf) {\\\\n          const temp = aObject._rtype;\\\\n          delete aObject._rtype;\\\\n          aObject = await this._decode(aObject, withPromise);\\\\n          aObject._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = await Promise.resolve(this._codecs[aObject._rtype].decoder(aObject));\\\\n      } else if (aObject._rtype === \\\\\\\"callback\\\\\\\") {\\\\n        bObject = this._genRemoteCallback(aObject._rtarget_id, aObject._rvalue, withPromise);\\\\n      } else if (aObject._rtype === \\\\\\\"interface\\\\\\\") {\\\\n        bObject = this._genRemoteMethod(aObject._rtarget_id, aObject._rvalue, aObject._rintf);\\\\n      } else if (aObject._rtype === \\\\\\\"ndarray\\\\\\\") {\\\\n        /*global nj tf*/\\\\n        //create build array/tensor if used in the plugin\\\\n        if (typeof nj !== \\\\\\\"undefined\\\\\\\" && nj.array) {\\\\n          if (Array.isArray(aObject._rvalue)) {\\\\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          bObject = nj.array(new Uint8(aObject._rvalue), aObject._rdtype).reshape(aObject._rshape);\\\\n        } else if (typeof tf !== \\\\\\\"undefined\\\\\\\" && tf.Tensor) {\\\\n          if (Array.isArray(aObject._rvalue)) {\\\\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\\\\n          }\\\\n\\\\n          const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"dtypeToTypedArray\\\\\\\"][aObject._rdtype]);\\\\n          bObject = tf.tensor(new arraytype(aObject._rvalue), aObject._rshape, aObject._rdtype);\\\\n        } else {\\\\n          //keep it as regular if transfered to the main app\\\\n          bObject = aObject;\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\\"error\\\\\\\") {\\\\n        bObject = new Error(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\\"file\\\\\\\") {\\\\n        if (aObject._rvalue instanceof File) {\\\\n          bObject = aObject._rvalue; //patch _path\\\\n\\\\n          bObject._path = aObject._rpath;\\\\n        } else {\\\\n          bObject = new File([aObject._rvalue], aObject._rname, {\\\\n            type: aObject._rmime\\\\n          });\\\\n          bObject._path = aObject._rpath;\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\\"typedarray\\\\\\\") {\\\\n        const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\"dtypeToTypedArray\\\\\\\"][aObject._rdtype]);\\\\n        if (!arraytype) throw new Error(\\\\\\\"unsupported dtype: \\\\\\\" + aObject._rdtype);\\\\n        bObject = new arraytype(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\\"memoryview\\\\\\\") {\\\\n        bObject = new DataView(aObject._rvalue);\\\\n      } else if (aObject._rtype === \\\\\\\"blob\\\\\\\") {\\\\n        if (aObject._rvalue instanceof Blob) {\\\\n          bObject = aObject._rvalue;\\\\n        } else {\\\\n          bObject = new Blob([aObject._rvalue], {\\\\n            type: aObject._rmime\\\\n          });\\\\n        }\\\\n      } else if (aObject._rtype === \\\\\\\"orderedmap\\\\\\\") {\\\\n        bObject = new Map((await this._decode(aObject._rvalue, withPromise)));\\\\n      } else if (aObject._rtype === \\\\\\\"set\\\\\\\") {\\\\n        bObject = new Set((await this._decode(aObject._rvalue, withPromise)));\\\\n      } else {\\\\n        // make sure all the interface functions are decoded\\\\n        if (aObject._rintf) {\\\\n          const temp = aObject._rtype;\\\\n          delete aObject._rtype;\\\\n          aObject = await this._decode(aObject, withPromise);\\\\n          aObject._rtype = temp;\\\\n        }\\\\n\\\\n        bObject = aObject;\\\\n      }\\\\n    } else if (aObject.constructor === Object || Array.isArray(aObject)) {\\\\n      var isarray = Array.isArray(aObject);\\\\n      bObject = isarray ? [] : {};\\\\n\\\\n      for (k in aObject) {\\\\n        if (isarray || aObject.hasOwnProperty(k)) {\\\\n          v = aObject[k];\\\\n          bObject[k] = await this._decode(v, withPromise);\\\\n        }\\\\n      }\\\\n    } else {\\\\n      bObject = aObject;\\\\n    }\\\\n\\\\n    if (bObject === undefined) {\\\\n      throw new Error(\\\\\\\"Failed to decode object\\\\\\\");\\\\n    } // store the object id for dispose\\\\n\\\\n\\\\n    if (aObject._rintf) {\\\\n      this._object_weakmap.set(bObject, aObject._rintf);\\\\n    }\\\\n\\\\n    return bObject;\\\\n  }\\\\n\\\\n  async _wrap(args, asInterface) {\\\\n    var wrapped = await this._encode(args, asInterface);\\\\n    return wrapped;\\\\n  }\\\\n  /**\\\\n   * Unwraps the set of arguments delivered from the remote site,\\\\n   * replaces all callback identifiers with a function which will\\\\n   * initiate sending that callback identifier back to other site\\\\n   *\\\\n   * @param {Object} args to unwrap\\\\n   *\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Array} unwrapped args\\\\n   */\\\\n\\\\n\\\\n  async _unwrap(args, withPromise) {\\\\n    var result = await this._decode(args, withPromise);\\\\n    return result;\\\\n  }\\\\n  /**\\\\n   * Generates the wrapped function corresponding to a single remote\\\\n   * callback. When the generated function is called, it will send\\\\n   * the corresponding message to the remote site asking it to\\\\n   * execute the particular callback previously saved during a call\\\\n   * by the remote site a method from the interface of this site\\\\n   *\\\\n   * @param {Number} id of the remote callback to execute\\\\n   * @param {Number} argNum argument index of the callback\\\\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\\\\n   *\\\\n   * @returns {Function} wrapped remote callback\\\\n   */\\\\n\\\\n\\\\n  _genRemoteCallback(targetId, cid, withPromise) {\\\\n    var me = this;\\\\n    var remoteCallback;\\\\n\\\\n    if (withPromise) {\\\\n      remoteCallback = function () {\\\\n        return new Promise(async (resolve, reject) => {\\\\n          var args = await me._wrap(Array.prototype.slice.call(arguments));\\\\n          var transferables = args.__transferables__;\\\\n          if (transferables) delete args.__transferables__;\\\\n          const encodedPromise = await me._wrap([resolve, reject]); // store the key id for removing them from the reference store together\\\\n\\\\n          resolve.__promise_pair = encodedPromise[1]._rvalue;\\\\n          reject.__promise_pair = encodedPromise[0]._rvalue;\\\\n\\\\n          try {\\\\n            me._connection.emit({\\\\n              type: \\\\\\\"callback\\\\\\\",\\\\n              target_id: targetId,\\\\n              id: cid,\\\\n              args: args,\\\\n              promise: encodedPromise\\\\n            }, transferables);\\\\n          } catch (e) {\\\\n            reject(`Failed to exectue remote callback ( id: ${cid}).`);\\\\n          }\\\\n        });\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    } else {\\\\n      remoteCallback = async function () {\\\\n        var args = await me._wrap(Array.prototype.slice.call(arguments));\\\\n        var transferables = args.__transferables__;\\\\n        if (transferables) delete args.__transferables__;\\\\n        return me._connection.emit({\\\\n          type: \\\\\\\"callback\\\\\\\",\\\\n          target_id: targetId,\\\\n          id: cid,\\\\n          args: args\\\\n        }, transferables);\\\\n      };\\\\n\\\\n      return remoteCallback;\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Sends the notification message and breaks the connection\\\\n   */\\\\n\\\\n\\\\n  disconnect() {\\\\n    this._connection.emit({\\\\n      type: \\\\\\\"disconnect\\\\\\\"\\\\n    });\\\\n\\\\n    setTimeout(() => {\\\\n      this._connection.disconnect();\\\\n    }, 2000);\\\\n  }\\\\n\\\\n}\\\\n/**\\\\n * ReferenceStore is a special object which stores other objects\\\\n * and provides the references (number) instead. This reference\\\\n * may then be sent over a json-based communication channel (IPC\\\\n * to another Node.js process or a message to the Worker). Other\\\\n * site may then provide the reference in the responce message\\\\n * implying the given object should be activated.\\\\n *\\\\n * Primary usage for the ReferenceStore is a storage for the\\\\n * callbacks, which therefore makes it possible to initiate a\\\\n * callback execution by the opposite site (which normally cannot\\\\n * directly execute functions over the communication channel).\\\\n *\\\\n * Each stored object can only be fetched once and is not\\\\n * available for the second time. Each stored object must be\\\\n * fetched, since otherwise it will remain stored forever and\\\\n * consume memory.\\\\n *\\\\n * Stored object indeces are simply the numbers, which are however\\\\n * released along with the objects, and are later reused again (in\\\\n * order to postpone the overflow, which should not likely happen,\\\\n * but anyway).\\\\n */\\\\n\\\\nclass ReferenceStore {\\\\n  constructor() {\\\\n    this._store = {}; // stored object\\\\n\\\\n    this._indices = [0]; // smallest available indices\\\\n\\\\n    this._readyHandler = function () {};\\\\n\\\\n    this._busyHandler = function () {};\\\\n\\\\n    this._readyHandler();\\\\n  }\\\\n  /**\\\\n   * call handler when the store is empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onReady(readyHandler) {\\\\n    this._readyHandler = readyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * call handler when the store is not empty\\\\n   *\\\\n   * @param {FUNCTION} id of a handler\\\\n   */\\\\n\\\\n\\\\n  onBusy(busyHandler) {\\\\n    this._busyHandler = busyHandler || function () {};\\\\n  }\\\\n  /**\\\\n   * get the length of the store\\\\n   *\\\\n   */\\\\n\\\\n\\\\n  getStack() {\\\\n    return Object.keys(this._store).length;\\\\n  }\\\\n  /**\\\\n   * @function _genId() generates the new reference id\\\\n   *\\\\n   * @returns {Number} smallest available id and reserves it\\\\n   */\\\\n\\\\n\\\\n  _genId() {\\\\n    var id;\\\\n\\\\n    if (this._indices.length === 1) {\\\\n      id = this._indices[0]++;\\\\n    } else {\\\\n      id = this._indices.shift();\\\\n    }\\\\n\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Releases the given reference id so that it will be available by\\\\n   * another object stored\\\\n   *\\\\n   * @param {Number} id to release\\\\n   */\\\\n\\\\n\\\\n  _releaseId(id) {\\\\n    for (var i = 0; i < this._indices.length; i++) {\\\\n      if (id < this._indices[i]) {\\\\n        this._indices.splice(i, 0, id);\\\\n\\\\n        break;\\\\n      }\\\\n    } // cleaning-up the sequence tail\\\\n\\\\n\\\\n    for (i = this._indices.length - 1; i >= 0; i--) {\\\\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\\\\n        this._indices.pop();\\\\n      } else {\\\\n        break;\\\\n      }\\\\n    }\\\\n  }\\\\n  /**\\\\n   * Stores the given object and returns the refernce id instead\\\\n   *\\\\n   * @param {Object} obj to store\\\\n   *\\\\n   * @returns {Number} reference id of the stored object\\\\n   */\\\\n\\\\n\\\\n  put(obj) {\\\\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\\\\n      this._busyHandler();\\\\n    }\\\\n\\\\n    var id = this._genId();\\\\n\\\\n    this._store[id] = obj;\\\\n    return id;\\\\n  }\\\\n  /**\\\\n   * Retrieves previously stored object and releases its reference\\\\n   *\\\\n   * @param {Number} id of an object to retrieve\\\\n   */\\\\n\\\\n\\\\n  fetch(id) {\\\\n    var obj = this._store[id];\\\\n\\\\n    if (obj && !obj.__remote_method) {\\\\n      delete this._store[id];\\\\n\\\\n      this._releaseId(id);\\\\n\\\\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\\\\n        this._readyHandler();\\\\n      }\\\\n    }\\\\n\\\\n    if (obj && obj.__promise_pair) {\\\\n      this.fetch(obj.__promise_pair);\\\\n    }\\\\n\\\\n    return obj;\\\\n  }\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/rpc.js\\\\n\\\");\\n\\n/***/ }),\\n\\n/***/ \\\"./src/utils.js\\\":\\n/*!**********************!*\\\\\\n  !*** ./src/utils.js ***!\\n  \\\\**********************/\\n/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin, MessageEmitter */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"__webpack_require__.r(__webpack_exports__);\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"randId\\\\\\\", function() { return randId; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"dtypeToTypedArray\\\\\\\", function() { return dtypeToTypedArray; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"typedArrayToDtype\\\\\\\", function() { return typedArrayToDtype; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"cacheRequirements\\\\\\\", function() { return cacheRequirements; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"setupServiceWorker\\\\\\\", function() { return setupServiceWorker; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"urlJoin\\\\\\\", function() { return urlJoin; });\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"MessageEmitter\\\\\\\", function() { return MessageEmitter; });\\\\nfunction randId() {\\\\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\\\\n}\\\\nconst dtypeToTypedArray = {\\\\n  int8: \\\\\\\"Int8Array\\\\\\\",\\\\n  int16: \\\\\\\"Int16Array\\\\\\\",\\\\n  int32: \\\\\\\"Int32Array\\\\\\\",\\\\n  uint8: \\\\\\\"Uint8Array\\\\\\\",\\\\n  uint16: \\\\\\\"Uint16Array\\\\\\\",\\\\n  uint32: \\\\\\\"Uint32Array\\\\\\\",\\\\n  float32: \\\\\\\"Float32Array\\\\\\\",\\\\n  float64: \\\\\\\"Float64Array\\\\\\\",\\\\n  array: \\\\\\\"Array\\\\\\\"\\\\n};\\\\nconst typedArrayToDtype = {\\\\n  Int8Array: \\\\\\\"int8\\\\\\\",\\\\n  Int16Array: \\\\\\\"int16\\\\\\\",\\\\n  Int32Array: \\\\\\\"int32\\\\\\\",\\\\n  Uint8Array: \\\\\\\"uint8\\\\\\\",\\\\n  Uint16Array: \\\\\\\"uint16\\\\\\\",\\\\n  Uint32Array: \\\\\\\"uint32\\\\\\\",\\\\n  Float32Array: \\\\\\\"float32\\\\\\\",\\\\n  Float64Array: \\\\\\\"float64\\\\\\\",\\\\n  Array: \\\\\\\"array\\\\\\\"\\\\n};\\\\n\\\\nfunction cacheUrlInServiceWorker(url) {\\\\n  return new Promise(function (resolve, reject) {\\\\n    const message = {\\\\n      command: \\\\\\\"add\\\\\\\",\\\\n      url: url\\\\n    };\\\\n\\\\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\\\\n      reject(\\\\\\\"Service worker is not supported.\\\\\\\");\\\\n      return;\\\\n    }\\\\n\\\\n    const messageChannel = new MessageChannel();\\\\n\\\\n    messageChannel.port1.onmessage = function (event) {\\\\n      if (event.data && event.data.error) {\\\\n        reject(event.data.error);\\\\n      } else {\\\\n        resolve(event.data && event.data.result);\\\\n      }\\\\n    };\\\\n\\\\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\\\\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\\\\n    } else {\\\\n      reject(\\\\\\\"Service worker controller is not available\\\\\\\");\\\\n    }\\\\n  });\\\\n}\\\\n\\\\nasync function cacheRequirements(requirements) {\\\\n  if (!Array.isArray(requirements)) {\\\\n    requirementsm.code.requirements = [requirements];\\\\n  }\\\\n\\\\n  if (requirements && requirements.length > 0) {\\\\n    for (let req of requirements) {\\\\n      //remove prefix\\\\n      if (req.startsWith(\\\\\\\"js:\\\\\\\")) req = req.slice(3);\\\\n      if (req.startsWith(\\\\\\\"css:\\\\\\\")) req = req.slice(4);\\\\n      if (req.startsWith(\\\\\\\"cache:\\\\\\\")) req = req.slice(6);\\\\n      if (!req.startsWith(\\\\\\\"http\\\\\\\")) continue;\\\\n      await cacheUrlInServiceWorker(req).catch(e => {\\\\n        console.error(e);\\\\n      });\\\\n    }\\\\n  }\\\\n}\\\\nfunction setupServiceWorker(baseUrl, targetOrigin, cacheCallback) {\\\\n  // register service worker for offline access\\\\n  if (\\\\\\\"serviceWorker\\\\\\\" in navigator) {\\\\n    baseUrl = baseUrl || \\\\\\\"/\\\\\\\";\\\\n    navigator.serviceWorker.register(baseUrl + \\\\\\\"plugin-service-worker.js\\\\\\\").then(function (registration) {\\\\n      // Registration was successful\\\\n      console.log(\\\\\\\"ServiceWorker registration successful with scope: \\\\\\\", registration.scope);\\\\n    }, function (err) {\\\\n      // registration failed :(\\\\n      console.log(\\\\\\\"ServiceWorker registration failed: \\\\\\\", err);\\\\n    });\\\\n    targetOrigin = targetOrigin || \\\\\\\"*\\\\\\\";\\\\n    cacheCallback = cacheCallback || cacheRequirements;\\\\n\\\\n    if (cacheCallback && typeof cacheCallback !== \\\\\\\"function\\\\\\\") {\\\\n      throw new Error(\\\\\\\"config.cache_requirements must be a function\\\\\\\");\\\\n    }\\\\n\\\\n    window.addEventListener(\\\\\\\"message\\\\\\\", function (e) {\\\\n      if (targetOrigin === \\\\\\\"*\\\\\\\" || e.origin === targetOrigin) {\\\\n        const m = e.data;\\\\n\\\\n        if (m.type === \\\\\\\"cacheRequirements\\\\\\\") {\\\\n          cacheCallback(m.requirements);\\\\n        }\\\\n      }\\\\n    });\\\\n  }\\\\n} //#Source https://bit.ly/2neWfJ2\\\\n\\\\nfunction urlJoin(...args) {\\\\n  return args.join(\\\\\\\"/\\\\\\\").replace(/[\\\\\\\\/]+/g, \\\\\\\"/\\\\\\\").replace(/^(.+):\\\\\\\\//, \\\\\\\"$1://\\\\\\\").replace(/^file:/, \\\\\\\"file:/\\\\\\\").replace(/\\\\\\\\/(\\\\\\\\?|&|#[^!])/g, \\\\\\\"$1\\\\\\\").replace(/\\\\\\\\?/g, \\\\\\\"&\\\\\\\").replace(\\\\\\\"&\\\\\\\", \\\\\\\"?\\\\\\\");\\\\n}\\\\nclass MessageEmitter {\\\\n  constructor(debug) {\\\\n    this._event_handlers = {};\\\\n    this._once_handlers = {};\\\\n    this._debug = debug;\\\\n  }\\\\n\\\\n  emit() {\\\\n    throw new Error(\\\\\\\"emit is not implemented\\\\\\\");\\\\n  }\\\\n\\\\n  on(event, handler) {\\\\n    if (!this._event_handlers[event]) {\\\\n      this._event_handlers[event] = [];\\\\n    }\\\\n\\\\n    this._event_handlers[event].push(handler);\\\\n  }\\\\n\\\\n  once(event, handler) {\\\\n    handler.___event_run_once = true;\\\\n    this.on(event, handler);\\\\n  }\\\\n\\\\n  off(event, handler) {\\\\n    if (!event && !handler) {\\\\n      // remove all events handlers\\\\n      this._event_handlers = {};\\\\n    } else if (event && !handler) {\\\\n      // remove all hanlders for the event\\\\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\\\\n    } else {\\\\n      // remove a specific handler\\\\n      if (this._event_handlers[event]) {\\\\n        const idx = this._event_handlers[event].indexOf(handler);\\\\n\\\\n        if (idx >= 0) {\\\\n          this._event_handlers[event].splice(idx, 1);\\\\n        }\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  _fire(event, data) {\\\\n    if (this._event_handlers[event]) {\\\\n      var i = this._event_handlers[event].length;\\\\n\\\\n      while (i--) {\\\\n        const handler = this._event_handlers[event][i];\\\\n\\\\n        try {\\\\n          handler(data);\\\\n        } catch (e) {\\\\n          console.error(e);\\\\n        } finally {\\\\n          if (handler.___event_run_once) {\\\\n            this._event_handlers[event].splice(i, 1);\\\\n          }\\\\n        }\\\\n      }\\\\n    } else {\\\\n      if (this._debug) {\\\\n        console.warn(\\\\\\\"unhandled event\\\\\\\", event, data);\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n}//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./src/utils.js\\\\n\\\");\\n\\n/***/ })\\n\\n/******/ });\", null);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/plugin.webworker.js\n");

/***/ }),

/***/ "./src/pluginCore.js":
/*!***************************!*\
  !*** ./src/pluginCore.js ***!
  \***************************/
/*! exports provided: connectRPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"connectRPC\", function() { return connectRPC; });\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/**\n * Core plugin script loaded into the plugin process/thread.\n *\n * Initializes the plugin-site API global methods.\n */\n\nfunction connectRPC(connection, config) {\n  config = config || {};\n  const codecs = {};\n  const rpc = new _rpc_js__WEBPACK_IMPORTED_MODULE_0__[\"RPC\"](connection, config, codecs);\n  rpc.on(\"getInterface\", function () {\n    launchConnected();\n  });\n  rpc.on(\"remoteReady\", function () {\n    const api = rpc.getRemote() || {};\n\n    if (api.export) {\n      throw new Error(\"`export` is a reserved function name\");\n    }\n\n    if (api.onload) {\n      throw new Error(\"`onload` is a reserved function name\");\n    }\n\n    if (api.dispose) {\n      throw new Error(\"`dispose` is a reserved function name\");\n    }\n\n    api.registerCodec = function (config) {\n      if (!config[\"name\"] || !config[\"encoder\"] && !config[\"decoder\"]) {\n        throw new Error(\"Invalid codec format, please make sure you provide a name, type, encoder and decoder.\");\n      } else {\n        if (config.type) {\n          for (let k of Object.keys(codecs)) {\n            if (codecs[k].type === config.type || k === config.name) {\n              delete codecs[k];\n              console.warn(\"Remove duplicated codec: \" + k);\n            }\n          }\n        }\n\n        codecs[config[\"name\"]] = config;\n      }\n    };\n\n    api.disposeObject = function (obj) {\n      rpc.disposeObject(obj);\n    };\n\n    api.export = function (_interface, config) {\n      rpc.setInterface(_interface, config);\n    };\n\n    api.onLoad = function (handler) {\n      handler = checkHandler(handler);\n\n      if (connected) {\n        handler();\n      } else {\n        connectedHandlers.push(handler);\n      }\n    };\n\n    api.dispose = function (_interface) {\n      rpc.disconnect();\n    };\n\n    if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n      self.api = api;\n      self.postMessage({\n        type: \"imjoy_remote_api_ready\"\n      });\n    } else if (typeof window) {\n      window.dispatchEvent(new CustomEvent(\"imjoy_remote_api_ready\", {\n        detail: api\n      }));\n    }\n  });\n  let connected = false;\n  const connectedHandlers = [];\n\n  const launchConnected = function () {\n    if (!connected) {\n      connected = true;\n      let handler;\n\n      while (handler = connectedHandlers.pop()) {\n        handler();\n      }\n    }\n  };\n\n  const checkHandler = function (handler) {\n    const type = typeof handler;\n\n    if (type !== \"function\") {\n      const msg = \"A function may only be subsribed to the event, \" + type + \" was provided instead\";\n      throw new Error(msg);\n    }\n\n    return handler;\n  };\n\n  return rpc;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luQ29yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltam95UlBDLy4vc3JjL3BsdWdpbkNvcmUuanM/YTgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcmUgcGx1Z2luIHNjcmlwdCBsb2FkZWQgaW50byB0aGUgcGx1Z2luIHByb2Nlc3MvdGhyZWFkLlxuICpcbiAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4tc2l0ZSBBUEkgZ2xvYmFsIG1ldGhvZHMuXG4gKi9cbmltcG9ydCB7IFJQQyB9IGZyb20gXCIuL3JwYy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdFJQQyhjb25uZWN0aW9uLCBjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25zdCBjb2RlY3MgPSB7fTtcblxuICBjb25zdCBycGMgPSBuZXcgUlBDKGNvbm5lY3Rpb24sIGNvbmZpZywgY29kZWNzKTtcbiAgcnBjLm9uKFwiZ2V0SW50ZXJmYWNlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGxhdW5jaENvbm5lY3RlZCgpO1xuICB9KTtcblxuICBycGMub24oXCJyZW1vdGVSZWFkeVwiLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhcGkgPSBycGMuZ2V0UmVtb3RlKCkgfHwge307XG4gICAgaWYgKGFwaS5leHBvcnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBleHBvcnRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5vbmxvYWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImBvbmxvYWRgIGlzIGEgcmVzZXJ2ZWQgZnVuY3Rpb24gbmFtZVwiKTtcbiAgICB9XG4gICAgaWYgKGFwaS5kaXNwb3NlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGlzcG9zZWAgaXMgYSByZXNlcnZlZCBmdW5jdGlvbiBuYW1lXCIpO1xuICAgIH1cbiAgICBhcGkucmVnaXN0ZXJDb2RlYyA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgaWYgKCFjb25maWdbXCJuYW1lXCJdIHx8ICghY29uZmlnW1wiZW5jb2RlclwiXSAmJiAhY29uZmlnW1wiZGVjb2RlclwiXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiSW52YWxpZCBjb2RlYyBmb3JtYXQsIHBsZWFzZSBtYWtlIHN1cmUgeW91IHByb3ZpZGUgYSBuYW1lLCB0eXBlLCBlbmNvZGVyIGFuZCBkZWNvZGVyLlwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKGNvZGVjcykpIHtcbiAgICAgICAgICAgIGlmIChjb2RlY3Nba10udHlwZSA9PT0gY29uZmlnLnR5cGUgfHwgayA9PT0gY29uZmlnLm5hbWUpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIGNvZGVjc1trXTtcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUmVtb3ZlIGR1cGxpY2F0ZWQgY29kZWM6IFwiICsgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvZGVjc1tjb25maWdbXCJuYW1lXCJdXSA9IGNvbmZpZztcbiAgICAgIH1cbiAgICB9O1xuICAgIGFwaS5kaXNwb3NlT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICBycGMuZGlzcG9zZU9iamVjdChvYmopO1xuICAgIH07XG4gICAgYXBpLmV4cG9ydCA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UsIGNvbmZpZykge1xuICAgICAgcnBjLnNldEludGVyZmFjZShfaW50ZXJmYWNlLCBjb25maWcpO1xuICAgIH07XG4gICAgYXBpLm9uTG9hZCA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIgPSBjaGVja0hhbmRsZXIoaGFuZGxlcik7XG4gICAgICBpZiAoY29ubmVjdGVkKSB7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3RlZEhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBhcGkuZGlzcG9zZSA9IGZ1bmN0aW9uKF9pbnRlcmZhY2UpIHtcbiAgICAgIHJwYy5kaXNjb25uZWN0KCk7XG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlXG4gICAgKSB7XG4gICAgICBzZWxmLmFwaSA9IGFwaTtcbiAgICAgIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcImltam95X3JlbW90ZV9hcGlfcmVhZHlcIlxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93KSB7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFwiaW1qb3lfcmVtb3RlX2FwaV9yZWFkeVwiLCB7IGRldGFpbDogYXBpIH0pXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGNvbm5lY3RlZCA9IGZhbHNlO1xuICBjb25zdCBjb25uZWN0ZWRIYW5kbGVycyA9IFtdO1xuXG4gIGNvbnN0IGxhdW5jaENvbm5lY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghY29ubmVjdGVkKSB7XG4gICAgICBjb25uZWN0ZWQgPSB0cnVlO1xuXG4gICAgICBsZXQgaGFuZGxlcjtcbiAgICAgIHdoaWxlICgoaGFuZGxlciA9IGNvbm5lY3RlZEhhbmRsZXJzLnBvcCgpKSkge1xuICAgICAgICBoYW5kbGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGhhbmRsZXI7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY29uc3QgbXNnID1cbiAgICAgICAgXCJBIGZ1bmN0aW9uIG1heSBvbmx5IGJlIHN1YnNyaWJlZCB0byB0aGUgZXZlbnQsIFwiICtcbiAgICAgICAgdHlwZSArXG4gICAgICAgIFwiIHdhcyBwcm92aWRlZCBpbnN0ZWFkXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH07XG5cbiAgcmV0dXJuIHJwYztcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pluginCore.js\n");

/***/ }),

/***/ "./src/pluginIframe.js":
/*!*****************************!*\
  !*** ./src/pluginIframe.js ***!
  \*****************************/
/*! exports provided: Connection, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Connection\", function() { return Connection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return setupIframe; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \"./src/pluginCore.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n // Create a new, plain <span> element\n\nfunction _htmlToElement(html) {\n  var template = document.createElement(\"template\");\n  html = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = html;\n  return template.content.firstChild;\n}\n\nvar _importScript = function (url) {\n  //url is URL of external file, implementationCode is the code\n  //to be called from the file, location is the location to\n  //insert the <script> element\n  return new Promise((resolve, reject) => {\n    var scriptTag = document.createElement(\"script\");\n    scriptTag.src = url;\n    scriptTag.type = \"text/javascript\";\n    scriptTag.onload = resolve;\n\n    scriptTag.onreadystatechange = function () {\n      if (this.readyState === \"loaded\" || this.readyState === \"complete\") {\n        resolve();\n      }\n    };\n\n    scriptTag.onerror = reject;\n    document.head.appendChild(scriptTag);\n  });\n}; // support importScripts outside web worker\n\n\nasync function importScripts() {\n  var args = Array.prototype.slice.call(arguments),\n      len = args.length,\n      i = 0;\n\n  for (; i < len; i++) {\n    await _importScript(args[i]);\n  }\n}\n\nclass Connection extends _utils_js__WEBPACK_IMPORTED_MODULE_2__[\"MessageEmitter\"] {\n  constructor(config) {\n    super(config && config.debug);\n    this.config = config || {};\n    this.peer_id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__[\"randId\"])();\n  }\n\n  connect() {\n    this.config.target_origin = this.config.target_origin || \"*\"; // this will call handleEvent function\n\n    window.addEventListener(\"message\", this);\n    this.emit({\n      type: \"initialized\",\n      config: this.config,\n      origin: window.location.origin,\n      peer_id: this.peer_id\n    });\n\n    this._fire(\"connected\");\n  }\n\n  handleEvent(e) {\n    if (e.type === \"message\" && (this.config.target_origin === \"*\" || e.origin === this.config.target_origin)) {\n      if (e.data.peer_id === this.peer_id) {\n        this._fire(e.data.type, e.data);\n      } else if (this.config.debug) {\n        console.log(`connection peer id mismatch ${e.data.peer_id} !== ${this.peer_id}`);\n      }\n    }\n  }\n\n  disconnect() {\n    this._fire(\"beforeDisconnect\");\n\n    window.removeEventListener(\"message\", this);\n\n    this._fire(\"disconnected\");\n  }\n\n  emit(data) {\n    let transferables;\n\n    if (data.__transferables__) {\n      transferables = data.__transferables__;\n      delete data.__transferables__;\n    }\n\n    parent.postMessage(data, this.config.target_origin, transferables);\n  }\n\n  async execute(code) {\n    try {\n      if (code.type === \"requirements\") {\n        if (code.requirements && (Array.isArray(code.requirements) || typeof code.requirements === \"string\")) {\n          try {\n            var link_node;\n            code.requirements = typeof code.requirements === \"string\" ? [code.requirements] : code.requirements;\n\n            if (Array.isArray(code.requirements)) {\n              for (var i = 0; i < code.requirements.length; i++) {\n                if (code.requirements[i].toLowerCase().endsWith(\".css\") || code.requirements[i].startsWith(\"css:\")) {\n                  if (code.requirements[i].startsWith(\"css:\")) {\n                    code.requirements[i] = code.requirements[i].slice(4);\n                  }\n\n                  link_node = document.createElement(\"link\");\n                  link_node.rel = \"stylesheet\";\n                  link_node.href = code.requirements[i];\n                  document.head.appendChild(link_node);\n                } else if (code.requirements[i].toLowerCase().endsWith(\".js\") || code.requirements[i].startsWith(\"js:\")) {\n                  if (code.requirements[i].startsWith(\"js:\")) {\n                    code.requirements[i] = code.requirements[i].slice(3);\n                  }\n\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith(\"http\")) {\n                  await importScripts(code.requirements[i]);\n                } else if (code.requirements[i].startsWith(\"cache:\")) {//ignore cache\n                } else {\n                  console.log(\"Unprocessed requirements url: \" + code.requirements[i]);\n                }\n              }\n            } else {\n              throw \"unsupported requirements definition\";\n            }\n          } catch (e) {\n            throw \"failed to import required scripts: \" + code.requirements.toString();\n          }\n        }\n      } else if (code.type === \"script\") {\n        if (code.src) {\n          var script_node = document.createElement(\"script\");\n          script_node.setAttribute(\"type\", code.attrs.type);\n          script_node.setAttribute(\"src\", code.src);\n          document.head.appendChild(script_node);\n        } else {\n          if (code.content && (!code.attrs.type || code.attrs.type === \"text/javascript\")) {\n            // document.addEventListener(\"DOMContentLoaded\", function(){\n            eval(code.content); // });\n          } else {\n            var node = document.createElement(\"script\");\n            node.setAttribute(\"type\", code.attrs.type);\n            node.appendChild(document.createTextNode(code.content));\n            document.body.appendChild(node);\n          }\n        }\n      } else if (code.type === \"style\") {\n        const style_node = document.createElement(\"style\");\n\n        if (code.src) {\n          style_node.src = code.src;\n        }\n\n        style_node.innerHTML = code.content;\n        document.head.appendChild(style_node);\n      } else if (code.type === \"link\") {\n        const link_node_ = document.createElement(\"link\");\n\n        if (code.rel) {\n          link_node_.rel = code.rel;\n        }\n\n        if (code.href) {\n          link_node_.href = code.href;\n        }\n\n        if (code.attrs && code.attrs.type) {\n          link_node_.type = code.attrs.type;\n        }\n\n        document.head.appendChild(link_node_);\n      } else if (code.type === \"html\") {\n        document.body.appendChild(_htmlToElement(code.content));\n      } else {\n        throw \"unsupported code type.\";\n      }\n\n      parent.postMessage({\n        type: \"executed\"\n      }, this.config.target_origin);\n    } catch (e) {\n      console.error(\"failed to execute scripts: \", code, e);\n      parent.postMessage({\n        type: \"executed\",\n        error: e.stack || String(e)\n      }, this.config.target_origin);\n    }\n  }\n\n}\nfunction setupIframe(config) {\n  config = config || {};\n  config.dedicated_thread = false;\n  config.lang = \"javascript\";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\"API_VERSION\"];\n  const conn = new Connection(config);\n  Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\"connectRPC\"])(conn, config);\n  conn.connect();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGx1Z2luSWZyYW1lLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1qb3lSUEMvLi9zcmMvcGx1Z2luSWZyYW1lLmpzPzI2NzYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb250YWlucyB0aGUgcm91dGluZXMgbG9hZGVkIGJ5IHRoZSBwbHVnaW4gaWZyYW1lIHVuZGVyIHdlYi1icm93c2VyXG4gKiBpbiBjYXNlIHdoZW4gd29ya2VyIGZhaWxlZCB0byBpbml0aWFsaXplXG4gKlxuICogSW5pdGlhbGl6ZXMgdGhlIHdlYiBlbnZpcm9ubWVudCB2ZXJzaW9uIG9mIHRoZSBwbGF0Zm9ybS1kZXBlbmRlbnRcbiAqIGNvbm5lY3Rpb24gb2JqZWN0IGZvciB0aGUgcGx1Z2luIHNpdGVcbiAqL1xuaW1wb3J0IHsgY29ubmVjdFJQQyB9IGZyb20gXCIuL3BsdWdpbkNvcmUuanNcIjtcbmltcG9ydCB7IEFQSV9WRVJTSU9OIH0gZnJvbSBcIi4vcnBjLmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlRW1pdHRlciwgcmFuZElkIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8vIENyZWF0ZSBhIG5ldywgcGxhaW4gPHNwYW4+IGVsZW1lbnRcbmZ1bmN0aW9uIF9odG1sVG9FbGVtZW50KGh0bWwpIHtcbiAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICBodG1sID0gaHRtbC50cmltKCk7IC8vIE5ldmVyIHJldHVybiBhIHRleHQgbm9kZSBvZiB3aGl0ZXNwYWNlIGFzIHRoZSByZXN1bHRcbiAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgcmV0dXJuIHRlbXBsYXRlLmNvbnRlbnQuZmlyc3RDaGlsZDtcbn1cblxudmFyIF9pbXBvcnRTY3JpcHQgPSBmdW5jdGlvbih1cmwpIHtcbiAgLy91cmwgaXMgVVJMIG9mIGV4dGVybmFsIGZpbGUsIGltcGxlbWVudGF0aW9uQ29kZSBpcyB0aGUgY29kZVxuICAvL3RvIGJlIGNhbGxlZCBmcm9tIHRoZSBmaWxlLCBsb2NhdGlvbiBpcyB0aGUgbG9jYXRpb24gdG9cbiAgLy9pbnNlcnQgdGhlIDxzY3JpcHQ+IGVsZW1lbnRcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgc2NyaXB0VGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBzY3JpcHRUYWcuc3JjID0gdXJsO1xuICAgIHNjcmlwdFRhZy50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICBzY3JpcHRUYWcub25sb2FkID0gcmVzb2x2ZTtcbiAgICBzY3JpcHRUYWcub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBcImxvYWRlZFwiIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHNjcmlwdFRhZy5vbmVycm9yID0gcmVqZWN0O1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0VGFnKTtcbiAgfSk7XG59O1xuXG4vLyBzdXBwb3J0IGltcG9ydFNjcmlwdHMgb3V0c2lkZSB3ZWIgd29ya2VyXG5hc3luYyBmdW5jdGlvbiBpbXBvcnRTY3JpcHRzKCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgbGVuID0gYXJncy5sZW5ndGgsXG4gICAgaSA9IDA7XG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhd2FpdCBfaW1wb3J0U2NyaXB0KGFyZ3NbaV0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25uZWN0aW9uIGV4dGVuZHMgTWVzc2FnZUVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcihjb25maWcgJiYgY29uZmlnLmRlYnVnKTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICB0aGlzLnBlZXJfaWQgPSByYW5kSWQoKTtcbiAgfVxuICBjb25uZWN0KCkge1xuICAgIHRoaXMuY29uZmlnLnRhcmdldF9vcmlnaW4gPSB0aGlzLmNvbmZpZy50YXJnZXRfb3JpZ2luIHx8IFwiKlwiO1xuICAgIC8vIHRoaXMgd2lsbCBjYWxsIGhhbmRsZUV2ZW50IGZ1bmN0aW9uXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMpO1xuICAgIHRoaXMuZW1pdCh7XG4gICAgICB0eXBlOiBcImluaXRpYWxpemVkXCIsXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgcGVlcl9pZDogdGhpcy5wZWVyX2lkXG4gICAgfSk7XG4gICAgdGhpcy5fZmlyZShcImNvbm5lY3RlZFwiKTtcbiAgfVxuICBoYW5kbGVFdmVudChlKSB7XG4gICAgaWYgKFxuICAgICAgZS50eXBlID09PSBcIm1lc3NhZ2VcIiAmJlxuICAgICAgKHRoaXMuY29uZmlnLnRhcmdldF9vcmlnaW4gPT09IFwiKlwiIHx8XG4gICAgICAgIGUub3JpZ2luID09PSB0aGlzLmNvbmZpZy50YXJnZXRfb3JpZ2luKVxuICAgICkge1xuICAgICAgaWYgKGUuZGF0YS5wZWVyX2lkID09PSB0aGlzLnBlZXJfaWQpIHtcbiAgICAgICAgdGhpcy5fZmlyZShlLmRhdGEudHlwZSwgZS5kYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYGNvbm5lY3Rpb24gcGVlciBpZCBtaXNtYXRjaCAke2UuZGF0YS5wZWVyX2lkfSAhPT0gJHt0aGlzLnBlZXJfaWR9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkaXNjb25uZWN0KCkge1xuICAgIHRoaXMuX2ZpcmUoXCJiZWZvcmVEaXNjb25uZWN0XCIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzKTtcbiAgICB0aGlzLl9maXJlKFwiZGlzY29ubmVjdGVkXCIpO1xuICB9XG4gIGVtaXQoZGF0YSkge1xuICAgIGxldCB0cmFuc2ZlcmFibGVzO1xuICAgIGlmIChkYXRhLl9fdHJhbnNmZXJhYmxlc19fKSB7XG4gICAgICB0cmFuc2ZlcmFibGVzID0gZGF0YS5fX3RyYW5zZmVyYWJsZXNfXztcbiAgICAgIGRlbGV0ZSBkYXRhLl9fdHJhbnNmZXJhYmxlc19fO1xuICAgIH1cbiAgICBwYXJlbnQucG9zdE1lc3NhZ2UoZGF0YSwgdGhpcy5jb25maWcudGFyZ2V0X29yaWdpbiwgdHJhbnNmZXJhYmxlcyk7XG4gIH1cbiAgYXN5bmMgZXhlY3V0ZShjb2RlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChjb2RlLnR5cGUgPT09IFwicmVxdWlyZW1lbnRzXCIpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvZGUucmVxdWlyZW1lbnRzICYmXG4gICAgICAgICAgKEFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpIHx8XG4gICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbGlua19ub2RlO1xuICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHMgPVxuICAgICAgICAgICAgICB0eXBlb2YgY29kZS5yZXF1aXJlbWVudHMgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICA/IFtjb2RlLnJlcXVpcmVtZW50c11cbiAgICAgICAgICAgICAgICA6IGNvZGUucmVxdWlyZW1lbnRzO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29kZS5yZXF1aXJlbWVudHMpKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZS5yZXF1aXJlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLmNzc1wiKSB8fFxuICAgICAgICAgICAgICAgICAgY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImNzczpcIilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjb2RlLnJlcXVpcmVtZW50c1tpXS5zdGFydHNXaXRoKFwiY3NzOlwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXSA9IGNvZGUucmVxdWlyZW1lbnRzW2ldLnNsaWNlKDQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgbGlua19ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgICAgICAgICAgICBsaW5rX25vZGUucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4gICAgICAgICAgICAgICAgICBsaW5rX25vZGUuaHJlZiA9IGNvZGUucmVxdWlyZW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChsaW5rX25vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLmpzXCIpIHx8XG4gICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXS5zdGFydHNXaXRoKFwianM6XCIpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY29kZS5yZXF1aXJlbWVudHNbaV0uc3RhcnRzV2l0aChcImpzOlwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlLnJlcXVpcmVtZW50c1tpXSA9IGNvZGUucmVxdWlyZW1lbnRzW2ldLnNsaWNlKDMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYXdhaXQgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlLnJlcXVpcmVtZW50c1tpXS5zdGFydHNXaXRoKFwiaHR0cFwiKSkge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgaW1wb3J0U2NyaXB0cyhjb2RlLnJlcXVpcmVtZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlLnJlcXVpcmVtZW50c1tpXS5zdGFydHNXaXRoKFwiY2FjaGU6XCIpKSB7XG4gICAgICAgICAgICAgICAgICAvL2lnbm9yZSBjYWNoZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgXCJVbnByb2Nlc3NlZCByZXF1aXJlbWVudHMgdXJsOiBcIiArIGNvZGUucmVxdWlyZW1lbnRzW2ldXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJ1bnN1cHBvcnRlZCByZXF1aXJlbWVudHMgZGVmaW5pdGlvblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IFwiZmFpbGVkIHRvIGltcG9ydCByZXF1aXJlZCBzY3JpcHRzOiBcIiArXG4gICAgICAgICAgICAgIGNvZGUucmVxdWlyZW1lbnRzLnRvU3RyaW5nKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvZGUudHlwZSA9PT0gXCJzY3JpcHRcIikge1xuICAgICAgICBpZiAoY29kZS5zcmMpIHtcbiAgICAgICAgICB2YXIgc2NyaXB0X25vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgIHNjcmlwdF9ub2RlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgY29kZS5hdHRycy50eXBlKTtcbiAgICAgICAgICBzY3JpcHRfbm9kZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgY29kZS5zcmMpO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0X25vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvZGUuY29udGVudCAmJlxuICAgICAgICAgICAgKCFjb2RlLmF0dHJzLnR5cGUgfHwgY29kZS5hdHRycy50eXBlID09PSBcInRleHQvamF2YXNjcmlwdFwiKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGV2YWwoY29kZS5jb250ZW50KTtcbiAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgY29kZS5hdHRycy50eXBlKTtcbiAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29kZS5jb250ZW50KSk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb2RlLnR5cGUgPT09IFwic3R5bGVcIikge1xuICAgICAgICBjb25zdCBzdHlsZV9ub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICBpZiAoY29kZS5zcmMpIHtcbiAgICAgICAgICBzdHlsZV9ub2RlLnNyYyA9IGNvZGUuc3JjO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlX25vZGUuaW5uZXJIVE1MID0gY29kZS5jb250ZW50O1xuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlX25vZGUpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlLnR5cGUgPT09IFwibGlua1wiKSB7XG4gICAgICAgIGNvbnN0IGxpbmtfbm9kZV8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgaWYgKGNvZGUucmVsKSB7XG4gICAgICAgICAgbGlua19ub2RlXy5yZWwgPSBjb2RlLnJlbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZS5ocmVmKSB7XG4gICAgICAgICAgbGlua19ub2RlXy5ocmVmID0gY29kZS5ocmVmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlLmF0dHJzICYmIGNvZGUuYXR0cnMudHlwZSkge1xuICAgICAgICAgIGxpbmtfbm9kZV8udHlwZSA9IGNvZGUuYXR0cnMudHlwZTtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmtfbm9kZV8pO1xuICAgICAgfSBlbHNlIGlmIChjb2RlLnR5cGUgPT09IFwiaHRtbFwiKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoX2h0bWxUb0VsZW1lbnQoY29kZS5jb250ZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBcInVuc3VwcG9ydGVkIGNvZGUgdHlwZS5cIjtcbiAgICAgIH1cbiAgICAgIHBhcmVudC5wb3N0TWVzc2FnZSh7IHR5cGU6IFwiZXhlY3V0ZWRcIiB9LCB0aGlzLmNvbmZpZy50YXJnZXRfb3JpZ2luKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiZmFpbGVkIHRvIGV4ZWN1dGUgc2NyaXB0czogXCIsIGNvZGUsIGUpO1xuICAgICAgcGFyZW50LnBvc3RNZXNzYWdlKFxuICAgICAgICB7IHR5cGU6IFwiZXhlY3V0ZWRcIiwgZXJyb3I6IGUuc3RhY2sgfHwgU3RyaW5nKGUpIH0sXG4gICAgICAgIHRoaXMuY29uZmlnLnRhcmdldF9vcmlnaW5cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHVwSWZyYW1lKGNvbmZpZykge1xuICBjb25maWcgPSBjb25maWcgfHwge307XG4gIGNvbmZpZy5kZWRpY2F0ZWRfdGhyZWFkID0gZmFsc2U7XG4gIGNvbmZpZy5sYW5nID0gXCJqYXZhc2NyaXB0XCI7XG4gIGNvbmZpZy5hcGlfdmVyc2lvbiA9IEFQSV9WRVJTSU9OO1xuICBjb25zdCBjb25uID0gbmV3IENvbm5lY3Rpb24oY29uZmlnKTtcbiAgY29ubmVjdFJQQyhjb25uLCBjb25maWcpO1xuICBjb25uLmNvbm5lY3QoKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQXpKQTtBQTJKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/pluginIframe.js\n");

/***/ }),

/***/ "./src/pluginWebPython.js":
/*!********************************!*\
  !*** ./src/pluginWebPython.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return setupWebPython; });\n/* harmony import */ var _pluginCore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pluginCore.js */ \"./src/pluginCore.js\");\n/* harmony import */ var _rpc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rpc.js */ \"./src/rpc.js\");\n/* harmony import */ var _pluginIframe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pluginIframe */ \"./src/pluginIframe.js\");\n/**\n * Contains the routines loaded by the plugin iframe under web-browser\n * in case when worker failed to initialize\n *\n * Initializes the web environment version of the platform-dependent\n * connection object for the plugin site\n */\n\n\n // Create a new, plain <span> element\n\nfunction _htmlToElement(html) {\n  var template = document.createElement(\"template\");\n  html = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = html;\n  return template.content.firstChild;\n}\n\nconst _importScript = function (url) {\n  //url is URL of external file, implementationCode is the code\n  //to be called from the file, location is the location to\n  //insert the <script> element\n  return new Promise((resolve, reject) => {\n    var scriptTag = document.createElement(\"script\");\n    scriptTag.src = url;\n    scriptTag.onload = resolve;\n\n    scriptTag.onreadystatechange = function () {\n      if (this.readyState === \"loaded\" || this.readyState === \"complete\") {\n        resolve();\n      }\n    };\n\n    scriptTag.onerror = reject;\n    document.head.appendChild(scriptTag);\n  });\n}; // support importScripts outside web worker\n\n\nasync function importScripts() {\n  var args = Array.prototype.slice.call(arguments),\n      len = args.length,\n      i = 0;\n\n  for (; i < len; i++) {\n    await _importScript(args[i]);\n  }\n}\n\nconst startup_script = `\nfrom js import api\nimport sys\nfrom types import ModuleType\nm = ModuleType(\"imjoy\")\nsys.modules[m.__name__] = m\nm.__file__ = m.__name__ + \".py\"\nm.api = api\n`;\nlet _export_plugin_api = null;\n\nconst execute_python_code = function (code) {\n  try {\n    if (!_export_plugin_api) {\n      _export_plugin_api = window.api.export;\n\n      window.api.export = function (p) {\n        if (typeof p === \"object\") {\n          const _api = {};\n\n          for (let k in p) {\n            if (!k.startsWith(\"_\")) {\n              _api[k] = p[k];\n            }\n          }\n\n          _export_plugin_api(_api);\n        } else if (typeof p === \"function\") {\n          const _api = {};\n          const getattr = window.pyodide.pyimport(\"getattr\");\n          const hasattr = window.pyodide.pyimport(\"hasattr\");\n\n          for (let k of Object.getOwnPropertyNames(p)) {\n            if (!k.startsWith(\"_\") && hasattr(p, k)) {\n              const func = getattr(p, k);\n\n              _api[k] = function () {\n                return func(...Array.prototype.slice.call(arguments));\n              };\n            }\n          }\n\n          _export_plugin_api(_api);\n        } else {\n          throw \"unsupported api export\";\n        }\n      };\n    }\n\n    window.pyodide.runPython(startup_script);\n    window.pyodide.runPython(code.content);\n  } catch (e) {\n    throw e;\n  }\n};\n\nfunction setupPyodide() {\n  return new Promise((resolve, reject) => {\n    window.languagePluginUrl = \"https://static.imjoy.io/pyodide/\";\n    importScripts(\"https://static.imjoy.io/pyodide/pyodide.js\").then(() => {\n      // hack for matplotlib etc.\n      window.iodide = {\n        output: {\n          element: function element(type) {\n            const div = document.createElement(type);\n            const output = document.getElementById(\"output\") || document.body;\n            output.appendChild(div);\n            return div;\n          }\n        }\n      };\n      window.languagePluginLoader.then(() => {\n        // pyodide is now ready to use...\n        console.log(window.pyodide.runPython(\"import sys\\nsys.version\"));\n        resolve();\n      }).catch(reject);\n    });\n  });\n} // connection object for the RPC constructor\n\n\nclass Connection extends _pluginIframe__WEBPACK_IMPORTED_MODULE_2__[\"Connection\"] {\n  constructor(config) {\n    super(config);\n  }\n\n  async execute(code) {\n    if (code.type === \"requirements\") {\n      if (code.requirements) {\n        code.requirements = typeof code.requirements === \"string\" ? [code.requirements] : code.requirements;\n\n        if (Array.isArray(code.requirements)) {\n          const python_packages = [];\n\n          for (var i = 0; i < code.requirements.length; i++) {\n            if (code.requirements[i].toLowerCase().endsWith(\".css\") || code.requirements[i].startsWith(\"css:\")) {\n              if (code.requirements[i].startsWith(\"css:\")) {\n                code.requirements[i] = code.requirements[i].slice(4);\n              }\n\n              link_node = document.createElement(\"link\");\n              link_node.rel = \"stylesheet\";\n              link_node.href = code.requirements[i];\n              document.head.appendChild(link_node);\n            } else if ( // code.requirements[i].toLowerCase().endsWith(\".js\") ||\n            code.requirements[i].startsWith(\"js:\")) {\n              if (code.requirements[i].startsWith(\"js:\")) {\n                code.requirements[i] = code.requirements[i].slice(3);\n              }\n\n              await importScripts(code.requirements[i]);\n            } else if (code.requirements[i].startsWith(\"cache:\")) {//ignore cache\n            } else if (code.requirements[i].toLowerCase().endsWith(\".js\") || code.requirements[i].startsWith(\"package:\")) {\n              if (code.requirements[i].startsWith(\"package:\")) {\n                code.requirements[i] = code.requirements[i].slice(8);\n              }\n\n              python_packages.push(code.requirements[i]);\n            } else if (code.requirements[i].startsWith(\"http:\") || code.requirements[i].startsWith(\"https:\")) {\n              console.log(\"Unprocessed requirements url: \" + code.requirements[i]);\n            } else {\n              python_packages.push(code.requirements[i]);\n            }\n          }\n\n          await window.pyodide.loadPackage(python_packages);\n        } else {\n          throw \"unsupported requirements definition\";\n        }\n      }\n    } else if (code.type === \"script\") {\n      if (code.src) {\n        var script_node = document.createElement(\"script\");\n        script_node.setAttribute(\"type\", code.attrs.type);\n        script_node.setAttribute(\"src\", code.src);\n        document.head.appendChild(script_node);\n      } else {\n        if (code.content && code.lang === \"python\") {\n          execute_python_code(code);\n        } else if (code.content && code.lang === \"javascript\") {\n          try {\n            eval(code.content);\n          } catch (e) {\n            console.error(e.message, e.stack);\n            throw e;\n          }\n        } else {\n          const node = document.createElement(\"script\");\n          node.setAttribute(\"type\", code.attrs.type);\n          node.appendChild(document.createTextNode(code.content));\n          document.body.appendChild(node);\n        }\n      }\n    } else if (code.type === \"style\") {\n      const style_node = document.createElement(\"style\");\n\n      if (code.src) {\n        style_node.src = code.src;\n      }\n\n      style_node.innerHTML = code.content;\n      document.head.appendChild(style_node);\n    } else if (code.type === \"link\") {\n      const link_node = document.createElement(\"link\");\n\n      if (code.rel) {\n        link_node.rel = code.rel;\n      }\n\n      if (code.href) {\n        link_node.href = code.href;\n      }\n\n      if (code.attrs && code.attrs.type) {\n        link_node.type = code.attrs.type;\n      }\n\n      document.head.appendChild(link_node);\n    } else if (code.type === \"html\") {\n      document.body.appendChild(_htmlToElement(code.content));\n    } else {\n      throw \"unsupported code type.\";\n    }\n  }\n\n}\n\nfunction setupWebPython(config) {\n  config = config || {};\n  config.debug = true;\n  config.dedicated_thread = false;\n  config.lang = \"python\";\n  config.api_version = _rpc_js__WEBPACK_IMPORTED_MODULE_1__[\"API_VERSION\"];\n  const conn = new Connection(config);\n  setupPyodide().then(() => {\n    Object(_pluginCore_js__WEBPACK_IMPORTED_MODULE_0__[\"connectRPC\"])(conn, config);\n    conn.connect();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pluginWebPython.js\n");

/***/ }),

/***/ "./src/rpc.js":
/*!********************!*\
  !*** ./src/rpc.js ***!
  \********************/
/*! exports provided: API_VERSION, RPC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"API_VERSION\", function() { return API_VERSION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RPC\", function() { return RPC; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/**\n * Contains the RPC object used both by the application\n * site, and by each plugin\n */\n\nconst API_VERSION = \"0.2.3\";\nconst ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\n\nfunction _appendBuffer(buffer1, buffer2) {\n  const tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\nfunction indexObject(obj, is) {\n  if (typeof is == \"string\") return indexObject(obj, is.split(\".\"));else if (is.length == 0) return obj;else return indexObject(obj[is[0]], is.slice(1));\n}\n/**\n * RPC object represents a single site in the\n * communication protocol between the application and the plugin\n *\n * @param {Object} connection a special object allowing to send\n * and receive messages from the opposite site (basically it\n * should only provide send() and onMessage() methods)\n */\n\n\nclass RPC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"MessageEmitter\"] {\n  constructor(connection, config, codecs) {\n    super(config && config.debug);\n    this._connection = connection;\n    this.config = config || {};\n    this._codecs = codecs || {};\n    this._object_store = {};\n    this._method_weakmap = new WeakMap();\n    this._object_weakmap = new WeakMap();\n    this._local_api = null; // make sure there is an execute function\n\n    const name = this.config.name;\n\n    this._connection.execute = this._connection.execute || function () {\n      throw new Error(`connection.execute not implemented (in \"${name}\")`);\n    };\n\n    this._store = new ReferenceStore();\n    this._method_refs = new ReferenceStore();\n\n    this._method_refs.onReady(() => {\n      this._fire(\"remoteIdle\");\n    });\n\n    this._method_refs.onBusy(() => {\n      this._fire(\"remoteBusy\");\n    });\n\n    this._setupMessageHanlders();\n  }\n\n  init() {\n    this._connection.emit({\n      type: \"initialized\",\n      config: this.config,\n      peer_id: this._connection.peer_id\n    });\n  }\n  /**\n   * Set a handler to be called when received a responce from the\n   * remote site reporting that the previously provided interface\n   * has been successfully set as remote for that site\n   *\n   * @param {Function} handler\n   */\n\n\n  getRemoteCallStack() {\n    return this._method_refs.getStack();\n  }\n  /**\n   * @returns {Object} set of remote interface methods\n   */\n\n\n  getRemote() {\n    return this._remote_interface;\n  }\n  /**\n   * Sets the interface of this site making it available to the\n   * remote site by sending a message with a set of methods names\n   *\n   * @param {Object} _interface to set\n   */\n\n\n  setInterface(_interface, config) {\n    config = config || {};\n    this.config.name = config.name || this.config.name;\n    this.config.description = config.description || this.config.description;\n\n    if (this.config.forwarding_functions) {\n      for (let func_name of this.config.forwarding_functions) {\n        const _remote = this._remote_interface;\n\n        if (_remote[func_name]) {\n          if (_interface.constructor === Object) {\n            if (!_interface[func_name]) {\n              _interface[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          } else if (_interface.constructor.constructor === Function) {\n            if (!_interface.constructor.prototype[func_name]) {\n              _interface.constructor.prototype[func_name] = (...args) => {\n                _remote[func_name](...args);\n              };\n            }\n          }\n        }\n      }\n    }\n\n    this._local_api = _interface;\n\n    this._fire(\"interfaceAvailable\");\n  }\n  /**\n   * Sends the actual interface to the remote site upon it was\n   * updated or by a special request of the remote site\n   */\n\n\n  sendInterface() {\n    if (!this._local_api) {\n      throw new Error(\"interface is not set.\");\n    }\n\n    this._encode(this._local_api, true).then(api => {\n      this._connection.emit({\n        type: \"setInterface\",\n        api: api\n      });\n    });\n  }\n\n  _disposeObject(objectId) {\n    if (this._object_store[objectId]) {\n      delete this._object_store[objectId];\n    } else {\n      throw new Error(`Object (id=${objectId}) not found.`);\n    }\n  }\n\n  disposeObject(obj) {\n    return new Promise((resolve, reject) => {\n      if (this._object_weakmap.has(obj)) {\n        const objectId = this._object_weakmap.get(obj);\n\n        this._connection.once(\"disposed\", data => {\n          if (data.error) reject(new Error(data.error));else resolve();\n        });\n\n        this._connection.emit({\n          type: \"disposeObject\",\n          object_id: objectId\n        });\n      } else {\n        throw new Error(\"Invalid object\");\n      }\n    });\n  }\n  /**\n   * Handles a message from the remote site\n   */\n  // var callback_reg = new RegExp(\"onupdate|run$\")\n\n\n  _setupMessageHanlders() {\n    this._connection.on(\"init\", this.init);\n\n    this._connection.on(\"execute\", data => {\n      Promise.resolve(this._connection.execute(data.code)).then(() => {\n        this._connection.emit({\n          type: \"executed\"\n        });\n      }).catch(e => {\n        console.error(e);\n\n        this._connection.emit({\n          type: \"executed\",\n          error: String(e)\n        });\n      });\n    });\n\n    this._connection.on(\"method\", async data => {\n      let resolve, reject, method, args, result;\n\n      try {\n        if (data.promise) {\n          [resolve, reject] = await this._unwrap(data.promise, false);\n        }\n\n        const _interface = this._object_store[data.object_id];\n        method = indexObject(_interface, data.name);\n        args = await this._unwrap(data.args, true);\n\n        if (data.promise) {\n          result = method.apply(_interface, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === \"AsyncFunction\") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          method.apply(_interface, args);\n        }\n      } catch (err) {\n        console.error(this.config.name, err);\n\n        if (reject) {\n          reject(err);\n        }\n      }\n    });\n\n    this._connection.on(\"callback\", async data => {\n      let resolve, reject, method, args, result;\n\n      try {\n        if (data.promise) {\n          [resolve, reject] = await this._unwrap(data.promise, false);\n        }\n\n        if (data.promise) {\n          method = this._store.fetch(data.id);\n          args = await this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error(\"Callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\");\n          }\n\n          result = method.apply(null, args);\n\n          if (result instanceof Promise || method.constructor && method.constructor.name === \"AsyncFunction\") {\n            result.then(resolve).catch(reject);\n          } else {\n            resolve(result);\n          }\n        } else {\n          method = this._store.fetch(data.id);\n          args = await this._unwrap(data.args, true);\n\n          if (!method) {\n            throw new Error(\"Please notice that callback function can only called once, if you want to call a function for multiple times, please make it as a plugin api function. See https://imjoy.io/docs for more details.\");\n          }\n\n          method.apply(null, args);\n        }\n      } catch (err) {\n        console.error(this.config.name, err);\n\n        if (reject) {\n          reject(err);\n        }\n      }\n    });\n\n    this._connection.on(\"disposeObject\", data => {\n      try {\n        this._disposeObject(data.object_id);\n\n        this._connection.emit({\n          type: \"disposed\"\n        });\n      } catch (e) {\n        console.error(e);\n\n        this._connection.emit({\n          type: \"disposed\",\n          error: String(e)\n        });\n      }\n    });\n\n    this._connection.on(\"setInterface\", data => {\n      this._setRemoteInterface(data.api);\n    });\n\n    this._connection.on(\"getInterface\", () => {\n      this._fire(\"getInterface\");\n\n      if (this._local_api) {\n        this.sendInterface();\n      } else {\n        this.once(\"interfaceAvailable\", () => {\n          this.sendInterface();\n        });\n      }\n    });\n\n    this._connection.on(\"interfaceSetAsRemote\", () => {\n      this._fire(\"interfaceSetAsRemote\");\n    });\n\n    this._connection.on(\"disconnect\", () => {\n      this._fire(\"beforeDisconnect\");\n\n      this._connection.disconnect();\n\n      this._fire(\"disconnected\");\n    });\n  }\n  /**\n   * Sends a requests to the remote site asking it to provide its\n   * current interface\n   */\n\n\n  requestRemote() {\n    this._connection.emit({\n      type: \"getInterface\"\n    });\n  }\n\n  _ndarray(typedArray, shape, dtype) {\n    var _dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][typedArray.constructor.name];\n\n    if (dtype && dtype !== _dtype) {\n      throw \"dtype doesn't match the type of the array: \" + _dtype + \" != \" + dtype;\n    }\n\n    shape = shape || [typedArray.length];\n    return {\n      _rtype: \"ndarray\",\n      _rvalue: typedArray.buffer,\n      _rshape: shape,\n      _rdtype: _dtype\n    };\n  }\n  /**\n   * Sets the new remote interface provided by the other site\n   *\n   * @param {Array} names list of function names\n   */\n\n\n  _setRemoteInterface(api) {\n    this._decode(api).then(intf => {\n      this._remote_interface = intf;\n\n      this._fire(\"remoteReady\");\n\n      this._reportRemoteSet();\n    });\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * method. When the generated function is called, it will send the\n   * corresponding message to the remote site asking it to execute\n   * the particular method of its interface\n   *\n   * @param {String} name of the remote method\n   *\n   * @returns {Function} wrapped remote method\n   */\n\n\n  _genRemoteMethod(targetId, name, objectId) {\n    var me = this;\n\n    var remoteMethod = function () {\n      return new Promise(async (resolve, reject) => {\n        let id = null;\n\n        try {\n          id = me._method_refs.put(objectId ? objectId + \"/\" + name : name);\n\n          var wrapped_resolve = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return resolve.apply(this, arguments);\n          };\n\n          var wrapped_reject = function () {\n            if (id !== null) me._method_refs.fetch(id);\n            return reject.apply(this, arguments);\n          };\n\n          const encodedPromise = await me._wrap([wrapped_resolve, wrapped_reject]); // store the key id for removing them from the reference store together\n\n          wrapped_resolve.__promise_pair = encodedPromise[1]._rvalue;\n          wrapped_reject.__promise_pair = encodedPromise[0]._rvalue;\n          var args = Array.prototype.slice.call(arguments);\n\n          if (name === \"register\" || name === \"export\" || name === \"on\") {\n            args = await me._wrap(args, true);\n          } else {\n            args = await me._wrap(args);\n          }\n\n          var transferables = args.__transferables__;\n          if (transferables) delete args.__transferables__;\n\n          me._connection.emit({\n            type: \"method\",\n            target_id: targetId,\n            name: name,\n            object_id: objectId,\n            args: args,\n            promise: encodedPromise\n          }, transferables);\n        } catch (e) {\n          if (id) me._method_refs.fetch(id);\n          reject(`Failed to exectue remote method (interface: ${objectId || me.id}, method: ${name}), error: ${e}`);\n        }\n      });\n    };\n\n    remoteMethod.__remote_method = true;\n    return remoteMethod;\n  }\n  /**\n   * Sends a responce reporting that interface just provided by the\n   * remote site was successfully set by this site as remote\n   */\n\n\n  _reportRemoteSet() {\n    this._connection.emit({\n      type: \"interfaceSetAsRemote\"\n    });\n  }\n  /**\n   * Prepares the provided set of remote method arguments for\n   * sending to the remote site, replaces all the callbacks with\n   * identifiers\n   *\n   * @param {Array} args to wrap\n   *\n   * @returns {Array} wrapped arguments\n   */\n\n\n  async _encode(aObject, asInterface, objectId) {\n    const aType = typeof aObject;\n\n    if (aType === \"number\" || aType === \"string\" || aType === \"boolean\" || aObject === null || aObject === undefined || aObject instanceof ArrayBuffer) {\n      return aObject;\n    }\n\n    let bObject;\n\n    if (typeof aObject === \"function\") {\n      if (asInterface) {\n        if (!objectId) throw new Error(\"objectId is not specified.\");\n        bObject = {\n          _rtype: \"interface\",\n          _rtarget_id: this._connection.peer_id,\n          _rintf: objectId,\n          _rvalue: asInterface\n        };\n\n        this._method_weakmap.set(aObject, bObject);\n      } else if (this._method_weakmap.has(aObject)) {\n        bObject = this._method_weakmap.get(aObject);\n      } else {\n        const cid = this._store.put(aObject);\n\n        bObject = {\n          _rtype: \"callback\",\n          _rtarget_id: this._connection.peer_id,\n          _rname: aObject.constructor && aObject.constructor.name || cid,\n          _rvalue: cid\n        };\n      }\n\n      return bObject;\n    } // skip if already encoded\n\n\n    if (aObject.constructor instanceof Object && aObject._rtype) {\n      // make sure the interface functions are encoded\n      if (aObject._rintf) {\n        const temp = aObject._rtype;\n        delete aObject._rtype;\n        bObject = await this._encode(aObject, asInterface, objectId);\n        bObject._rtype = temp;\n      } else {\n        bObject = aObject;\n      }\n\n      return bObject;\n    }\n\n    const transferables = [];\n    const _transfer = aObject._transfer;\n    const isarray = Array.isArray(aObject);\n\n    for (let tp of Object.keys(this._codecs)) {\n      const codec = this._codecs[tp];\n\n      if (codec.encoder && aObject instanceof codec.type) {\n        // TODO: what if multiple encoders found\n        const encodedObj = await Promise.resolve(codec.encoder(aObject));\n        if (encodedObj && !encodedObj._rtype) encodedObj._rtype = codec.name; // encode the functions in the interface object\n\n        if (encodedObj && encodedObj._rintf) {\n          const temp = encodedObj._rtype;\n          delete encodedObj._rtype;\n          encodedObj = await this._encode(encodedObj, asInterface, objectId);\n          encodedObj._rtype = temp;\n        }\n\n        bObject = encodedObj;\n        return bObject;\n      }\n    }\n\n    if (\n    /*global tf*/\n    typeof tf !== \"undefined\" && tf.Tensor && aObject instanceof tf.Tensor) {\n      const v_buffer = aObject.dataSync();\n\n      if (aObject._transfer || _transfer) {\n        transferables.push(v_buffer.buffer);\n        delete aObject._transfer;\n      }\n\n      bObject = {\n        _rtype: \"ndarray\",\n        _rvalue: v_buffer.buffer,\n        _rshape: aObject.shape,\n        _rdtype: aObject.dtype\n      };\n    } else if (\n    /*global nj*/\n    typeof nj !== \"undefined\" && nj.NdArray && aObject instanceof nj.NdArray) {\n      var dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][aObject.selection.data.constructor.name];\n\n      if (aObject._transfer || _transfer) {\n        transferables.push(aObject.selection.data.buffer);\n        delete aObject._transfer;\n      }\n\n      bObject = {\n        _rtype: \"ndarray\",\n        _rvalue: aObject.selection.data.buffer,\n        _rshape: aObject.shape,\n        _rdtype: dtype\n      };\n    } else if (aObject instanceof Error) {\n      console.error(aObject);\n      bObject = {\n        _rtype: \"error\",\n        _rvalue: aObject.toString()\n      };\n    } else if (typeof File !== \"undefined\" && aObject instanceof File) {\n      bObject = {\n        _rtype: \"file\",\n        _rvalue: aObject,\n        _rpath: aObject._path || aObject.webkitRelativePath\n      };\n    } // send objects supported by structure clone algorithm\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n    else if (aObject !== Object(aObject) || aObject instanceof Boolean || aObject instanceof String || aObject instanceof Date || aObject instanceof RegExp || aObject instanceof ImageData || typeof FileList !== \"undefined\" && aObject instanceof FileList) {\n        bObject = aObject; // TODO: avoid object such as DynamicPlugin instance.\n      } else if (typeof File !== \"undefined\" && aObject instanceof File) {\n        bObject = {\n          _rtype: \"file\",\n          _rname: aObject.name,\n          _rmime: aObject.type,\n          _rvalue: aObject,\n          _rpath: aObject._path || aObject.webkitRelativePath\n        };\n      } else if (aObject instanceof Blob) {\n        bObject = {\n          _rtype: \"blob\",\n          _rvalue: aObject\n        };\n      } else if (aObject instanceof ArrayBufferView) {\n        if (aObject._transfer || _transfer) {\n          transferables.push(aObject.buffer);\n          delete aObject._transfer;\n        }\n\n        const dtype = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"typedArrayToDtype\"][aObject.constructor.name];\n        bObject = {\n          _rtype: \"typedarray\",\n          _rvalue: aObject.buffer,\n          _rdtype: dtype\n        };\n      } else if (aObject instanceof DataView) {\n        if (aObject._transfer || _transfer) {\n          transferables.push(aObject.buffer);\n          delete aObject._transfer;\n        }\n\n        bObject = {\n          _rtype: \"memoryview\",\n          _rvalue: aObject.buffer\n        };\n      } else if (aObject instanceof Set) {\n        bObject = {\n          _rtype: \"set\",\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\n        };\n      } else if (aObject instanceof Map) {\n        bObject = {\n          _rtype: \"orderedmap\",\n          _rvalue: await this._encode(Array.from(aObject), asInterface)\n        };\n      } else if (aObject.constructor instanceof Object || Array.isArray(aObject)) {\n        bObject = isarray ? [] : {};\n        let keys; // an object/array\n\n        if (aObject.constructor === Object || Array.isArray(aObject)) {\n          keys = Object.keys(aObject);\n        } // a class\n        else if (aObject.constructor === Function) {\n            throw new Error(\"Please instantiate the class before exportting it.\");\n          } // instance of a class\n          else if (aObject.constructor.constructor === Function) {\n              keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject)); // TODO: use a proxy object to represent the actual object\n              // always encode class instance as interface\n\n              asInterface = true;\n            } else {\n              throw Error(\"Unsupported interface type\");\n            } // encode interfaces\n\n\n        if (aObject._rintf || asInterface) {\n          if (!objectId) {\n            objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"randId\"])();\n            this._object_store[objectId] = aObject;\n          }\n\n          for (let k of keys) {\n            if (k === \"constructor\") continue;\n\n            if (k.startsWith(\"_\")) {\n              continue;\n            }\n\n            bObject[k] = await this._encode(aObject[k], typeof asInterface === \"string\" ? asInterface + \".\" + k : k, objectId);\n          } // object id for dispose the object remotely\n\n\n          bObject._rintf = objectId; // remove interface when closed\n\n          if (aObject.on && typeof aObject.on === \"function\") {\n            aObject.on(\"close\", () => {\n              delete this._object_store[objectId];\n            });\n          }\n        } else {\n          for (let k of keys) {\n            if ([\"hasOwnProperty\", \"constructor\"].includes(k)) continue;\n            bObject[k] = await this._encode(aObject[k]);\n          }\n        } // for example, browserFS object\n\n      } else if (typeof aObject === \"object\") {\n        const keys = Object.getOwnPropertyNames(Object.getPrototypeOf(aObject)).concat(Object.keys(aObject));\n        const objectId = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"randId\"])();\n\n        for (let k of keys) {\n          if ([\"hasOwnProperty\", \"constructor\"].includes(k)) continue; // encode as interface\n\n          bObject[k] = await this._encode(aObject[k], k, bObject);\n        } // object id, used for dispose the object\n\n\n        bObject._rintf = objectId;\n      } else {\n        throw \"imjoy-rpc: Unsupported data type:\" + aObject;\n      }\n\n    if (transferables.length > 0) {\n      bObject.__transferables__ = transferables;\n    }\n\n    if (!bObject) {\n      throw new Error(\"Failed to encode object\");\n    }\n\n    return bObject;\n  }\n\n  async _decode(aObject, withPromise) {\n    if (!aObject) {\n      return aObject;\n    }\n\n    var bObject, v, k;\n\n    if (aObject[\"_rtype\"]) {\n      if (this._codecs[aObject._rtype] && this._codecs[aObject._rtype].decoder) {\n        if (aObject._rintf) {\n          const temp = aObject._rtype;\n          delete aObject._rtype;\n          aObject = await this._decode(aObject, withPromise);\n          aObject._rtype = temp;\n        }\n\n        bObject = await Promise.resolve(this._codecs[aObject._rtype].decoder(aObject));\n      } else if (aObject._rtype === \"callback\") {\n        bObject = this._genRemoteCallback(aObject._rtarget_id, aObject._rvalue, withPromise);\n      } else if (aObject._rtype === \"interface\") {\n        bObject = this._genRemoteMethod(aObject._rtarget_id, aObject._rvalue, aObject._rintf);\n      } else if (aObject._rtype === \"ndarray\") {\n        /*global nj tf*/\n        //create build array/tensor if used in the plugin\n        if (typeof nj !== \"undefined\" && nj.array) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          bObject = nj.array(new Uint8(aObject._rvalue), aObject._rdtype).reshape(aObject._rshape);\n        } else if (typeof tf !== \"undefined\" && tf.Tensor) {\n          if (Array.isArray(aObject._rvalue)) {\n            aObject._rvalue = aObject._rvalue.reduce(_appendBuffer);\n          }\n\n          const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dtypeToTypedArray\"][aObject._rdtype]);\n          bObject = tf.tensor(new arraytype(aObject._rvalue), aObject._rshape, aObject._rdtype);\n        } else {\n          //keep it as regular if transfered to the main app\n          bObject = aObject;\n        }\n      } else if (aObject._rtype === \"error\") {\n        bObject = new Error(aObject._rvalue);\n      } else if (aObject._rtype === \"file\") {\n        if (aObject._rvalue instanceof File) {\n          bObject = aObject._rvalue; //patch _path\n\n          bObject._path = aObject._rpath;\n        } else {\n          bObject = new File([aObject._rvalue], aObject._rname, {\n            type: aObject._rmime\n          });\n          bObject._path = aObject._rpath;\n        }\n      } else if (aObject._rtype === \"typedarray\") {\n        const arraytype = eval(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"dtypeToTypedArray\"][aObject._rdtype]);\n        if (!arraytype) throw new Error(\"unsupported dtype: \" + aObject._rdtype);\n        bObject = new arraytype(aObject._rvalue);\n      } else if (aObject._rtype === \"memoryview\") {\n        bObject = new DataView(aObject._rvalue);\n      } else if (aObject._rtype === \"blob\") {\n        if (aObject._rvalue instanceof Blob) {\n          bObject = aObject._rvalue;\n        } else {\n          bObject = new Blob([aObject._rvalue], {\n            type: aObject._rmime\n          });\n        }\n      } else if (aObject._rtype === \"orderedmap\") {\n        bObject = new Map((await this._decode(aObject._rvalue, withPromise)));\n      } else if (aObject._rtype === \"set\") {\n        bObject = new Set((await this._decode(aObject._rvalue, withPromise)));\n      } else {\n        // make sure all the interface functions are decoded\n        if (aObject._rintf) {\n          const temp = aObject._rtype;\n          delete aObject._rtype;\n          aObject = await this._decode(aObject, withPromise);\n          aObject._rtype = temp;\n        }\n\n        bObject = aObject;\n      }\n    } else if (aObject.constructor === Object || Array.isArray(aObject)) {\n      var isarray = Array.isArray(aObject);\n      bObject = isarray ? [] : {};\n\n      for (k in aObject) {\n        if (isarray || aObject.hasOwnProperty(k)) {\n          v = aObject[k];\n          bObject[k] = await this._decode(v, withPromise);\n        }\n      }\n    } else {\n      bObject = aObject;\n    }\n\n    if (bObject === undefined) {\n      throw new Error(\"Failed to decode object\");\n    } // store the object id for dispose\n\n\n    if (aObject._rintf) {\n      this._object_weakmap.set(bObject, aObject._rintf);\n    }\n\n    return bObject;\n  }\n\n  async _wrap(args, asInterface) {\n    var wrapped = await this._encode(args, asInterface);\n    return wrapped;\n  }\n  /**\n   * Unwraps the set of arguments delivered from the remote site,\n   * replaces all callback identifiers with a function which will\n   * initiate sending that callback identifier back to other site\n   *\n   * @param {Object} args to unwrap\n   *\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Array} unwrapped args\n   */\n\n\n  async _unwrap(args, withPromise) {\n    var result = await this._decode(args, withPromise);\n    return result;\n  }\n  /**\n   * Generates the wrapped function corresponding to a single remote\n   * callback. When the generated function is called, it will send\n   * the corresponding message to the remote site asking it to\n   * execute the particular callback previously saved during a call\n   * by the remote site a method from the interface of this site\n   *\n   * @param {Number} id of the remote callback to execute\n   * @param {Number} argNum argument index of the callback\n   * @param {Boolean} withPromise is true means this the callback should contain a promise\n   *\n   * @returns {Function} wrapped remote callback\n   */\n\n\n  _genRemoteCallback(targetId, cid, withPromise) {\n    var me = this;\n    var remoteCallback;\n\n    if (withPromise) {\n      remoteCallback = function () {\n        return new Promise(async (resolve, reject) => {\n          var args = await me._wrap(Array.prototype.slice.call(arguments));\n          var transferables = args.__transferables__;\n          if (transferables) delete args.__transferables__;\n          const encodedPromise = await me._wrap([resolve, reject]); // store the key id for removing them from the reference store together\n\n          resolve.__promise_pair = encodedPromise[1]._rvalue;\n          reject.__promise_pair = encodedPromise[0]._rvalue;\n\n          try {\n            me._connection.emit({\n              type: \"callback\",\n              target_id: targetId,\n              id: cid,\n              args: args,\n              promise: encodedPromise\n            }, transferables);\n          } catch (e) {\n            reject(`Failed to exectue remote callback ( id: ${cid}).`);\n          }\n        });\n      };\n\n      return remoteCallback;\n    } else {\n      remoteCallback = async function () {\n        var args = await me._wrap(Array.prototype.slice.call(arguments));\n        var transferables = args.__transferables__;\n        if (transferables) delete args.__transferables__;\n        return me._connection.emit({\n          type: \"callback\",\n          target_id: targetId,\n          id: cid,\n          args: args\n        }, transferables);\n      };\n\n      return remoteCallback;\n    }\n  }\n  /**\n   * Sends the notification message and breaks the connection\n   */\n\n\n  disconnect() {\n    this._connection.emit({\n      type: \"disconnect\"\n    });\n\n    setTimeout(() => {\n      this._connection.disconnect();\n    }, 2000);\n  }\n\n}\n/**\n * ReferenceStore is a special object which stores other objects\n * and provides the references (number) instead. This reference\n * may then be sent over a json-based communication channel (IPC\n * to another Node.js process or a message to the Worker). Other\n * site may then provide the reference in the responce message\n * implying the given object should be activated.\n *\n * Primary usage for the ReferenceStore is a storage for the\n * callbacks, which therefore makes it possible to initiate a\n * callback execution by the opposite site (which normally cannot\n * directly execute functions over the communication channel).\n *\n * Each stored object can only be fetched once and is not\n * available for the second time. Each stored object must be\n * fetched, since otherwise it will remain stored forever and\n * consume memory.\n *\n * Stored object indeces are simply the numbers, which are however\n * released along with the objects, and are later reused again (in\n * order to postpone the overflow, which should not likely happen,\n * but anyway).\n */\n\nclass ReferenceStore {\n  constructor() {\n    this._store = {}; // stored object\n\n    this._indices = [0]; // smallest available indices\n\n    this._readyHandler = function () {};\n\n    this._busyHandler = function () {};\n\n    this._readyHandler();\n  }\n  /**\n   * call handler when the store is empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onReady(readyHandler) {\n    this._readyHandler = readyHandler || function () {};\n  }\n  /**\n   * call handler when the store is not empty\n   *\n   * @param {FUNCTION} id of a handler\n   */\n\n\n  onBusy(busyHandler) {\n    this._busyHandler = busyHandler || function () {};\n  }\n  /**\n   * get the length of the store\n   *\n   */\n\n\n  getStack() {\n    return Object.keys(this._store).length;\n  }\n  /**\n   * @function _genId() generates the new reference id\n   *\n   * @returns {Number} smallest available id and reserves it\n   */\n\n\n  _genId() {\n    var id;\n\n    if (this._indices.length === 1) {\n      id = this._indices[0]++;\n    } else {\n      id = this._indices.shift();\n    }\n\n    return id;\n  }\n  /**\n   * Releases the given reference id so that it will be available by\n   * another object stored\n   *\n   * @param {Number} id to release\n   */\n\n\n  _releaseId(id) {\n    for (var i = 0; i < this._indices.length; i++) {\n      if (id < this._indices[i]) {\n        this._indices.splice(i, 0, id);\n\n        break;\n      }\n    } // cleaning-up the sequence tail\n\n\n    for (i = this._indices.length - 1; i >= 0; i--) {\n      if (this._indices[i] - 1 === this._indices[i - 1]) {\n        this._indices.pop();\n      } else {\n        break;\n      }\n    }\n  }\n  /**\n   * Stores the given object and returns the refernce id instead\n   *\n   * @param {Object} obj to store\n   *\n   * @returns {Number} reference id of the stored object\n   */\n\n\n  put(obj) {\n    if (this._busyHandler && Object.keys(this._store).length === 0) {\n      this._busyHandler();\n    }\n\n    var id = this._genId();\n\n    this._store[id] = obj;\n    return id;\n  }\n  /**\n   * Retrieves previously stored object and releases its reference\n   *\n   * @param {Number} id of an object to retrieve\n   */\n\n\n  fetch(id) {\n    var obj = this._store[id];\n\n    if (obj && !obj.__remote_method) {\n      delete this._store[id];\n\n      this._releaseId(id);\n\n      if (this._readyHandler && Object.keys(this._store).length === 0) {\n        this._readyHandler();\n      }\n    }\n\n    if (obj && obj.__promise_pair) {\n      this.fetch(obj.__promise_pair);\n    }\n\n    return obj;\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/rpc.js\n");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: randId, dtypeToTypedArray, typedArrayToDtype, cacheRequirements, setupServiceWorker, urlJoin, MessageEmitter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"randId\", function() { return randId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dtypeToTypedArray\", function() { return dtypeToTypedArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"typedArrayToDtype\", function() { return typedArrayToDtype; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cacheRequirements\", function() { return cacheRequirements; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setupServiceWorker\", function() { return setupServiceWorker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"urlJoin\", function() { return urlJoin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MessageEmitter\", function() { return MessageEmitter; });\nfunction randId() {\n  return Math.random().toString(36).substr(2, 10) + new Date().getTime();\n}\nconst dtypeToTypedArray = {\n  int8: \"Int8Array\",\n  int16: \"Int16Array\",\n  int32: \"Int32Array\",\n  uint8: \"Uint8Array\",\n  uint16: \"Uint16Array\",\n  uint32: \"Uint32Array\",\n  float32: \"Float32Array\",\n  float64: \"Float64Array\",\n  array: \"Array\"\n};\nconst typedArrayToDtype = {\n  Int8Array: \"int8\",\n  Int16Array: \"int16\",\n  Int32Array: \"int32\",\n  Uint8Array: \"uint8\",\n  Uint16Array: \"uint16\",\n  Uint32Array: \"uint32\",\n  Float32Array: \"float32\",\n  Float64Array: \"float64\",\n  Array: \"array\"\n};\n\nfunction cacheUrlInServiceWorker(url) {\n  return new Promise(function (resolve, reject) {\n    const message = {\n      command: \"add\",\n      url: url\n    };\n\n    if (!navigator.serviceWorker || !navigator.serviceWorker.register) {\n      reject(\"Service worker is not supported.\");\n      return;\n    }\n\n    const messageChannel = new MessageChannel();\n\n    messageChannel.port1.onmessage = function (event) {\n      if (event.data && event.data.error) {\n        reject(event.data.error);\n      } else {\n        resolve(event.data && event.data.result);\n      }\n    };\n\n    if (navigator.serviceWorker && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage(message, [messageChannel.port2]);\n    } else {\n      reject(\"Service worker controller is not available\");\n    }\n  });\n}\n\nasync function cacheRequirements(requirements) {\n  if (!Array.isArray(requirements)) {\n    requirementsm.code.requirements = [requirements];\n  }\n\n  if (requirements && requirements.length > 0) {\n    for (let req of requirements) {\n      //remove prefix\n      if (req.startsWith(\"js:\")) req = req.slice(3);\n      if (req.startsWith(\"css:\")) req = req.slice(4);\n      if (req.startsWith(\"cache:\")) req = req.slice(6);\n      if (!req.startsWith(\"http\")) continue;\n      await cacheUrlInServiceWorker(req).catch(e => {\n        console.error(e);\n      });\n    }\n  }\n}\nfunction setupServiceWorker(baseUrl, targetOrigin, cacheCallback) {\n  // register service worker for offline access\n  if (\"serviceWorker\" in navigator) {\n    baseUrl = baseUrl || \"/\";\n    navigator.serviceWorker.register(baseUrl + \"plugin-service-worker.js\").then(function (registration) {\n      // Registration was successful\n      console.log(\"ServiceWorker registration successful with scope: \", registration.scope);\n    }, function (err) {\n      // registration failed :(\n      console.log(\"ServiceWorker registration failed: \", err);\n    });\n    targetOrigin = targetOrigin || \"*\";\n    cacheCallback = cacheCallback || cacheRequirements;\n\n    if (cacheCallback && typeof cacheCallback !== \"function\") {\n      throw new Error(\"config.cache_requirements must be a function\");\n    }\n\n    window.addEventListener(\"message\", function (e) {\n      if (targetOrigin === \"*\" || e.origin === targetOrigin) {\n        const m = e.data;\n\n        if (m.type === \"cacheRequirements\") {\n          cacheCallback(m.requirements);\n        }\n      }\n    });\n  }\n} //#Source https://bit.ly/2neWfJ2\n\nfunction urlJoin(...args) {\n  return args.join(\"/\").replace(/[\\/]+/g, \"/\").replace(/^(.+):\\//, \"$1://\").replace(/^file:/, \"file:/\").replace(/\\/(\\?|&|#[^!])/g, \"$1\").replace(/\\?/g, \"&\").replace(\"&\", \"?\");\n}\nclass MessageEmitter {\n  constructor(debug) {\n    this._event_handlers = {};\n    this._once_handlers = {};\n    this._debug = debug;\n  }\n\n  emit() {\n    throw new Error(\"emit is not implemented\");\n  }\n\n  on(event, handler) {\n    if (!this._event_handlers[event]) {\n      this._event_handlers[event] = [];\n    }\n\n    this._event_handlers[event].push(handler);\n  }\n\n  once(event, handler) {\n    handler.___event_run_once = true;\n    this.on(event, handler);\n  }\n\n  off(event, handler) {\n    if (!event && !handler) {\n      // remove all events handlers\n      this._event_handlers = {};\n    } else if (event && !handler) {\n      // remove all hanlders for the event\n      if (this._event_handlers[event]) this._event_handlers[event] = [];\n    } else {\n      // remove a specific handler\n      if (this._event_handlers[event]) {\n        const idx = this._event_handlers[event].indexOf(handler);\n\n        if (idx >= 0) {\n          this._event_handlers[event].splice(idx, 1);\n        }\n      }\n    }\n  }\n\n  _fire(event, data) {\n    if (this._event_handlers[event]) {\n      var i = this._event_handlers[event].length;\n\n      while (i--) {\n        const handler = this._event_handlers[event][i];\n\n        try {\n          handler(data);\n        } catch (e) {\n          console.error(e);\n        } finally {\n          if (handler.___event_run_once) {\n            this._event_handlers[event].splice(i, 1);\n          }\n        }\n      }\n    } else {\n      if (this._debug) {\n        console.warn(\"unhandled event\", event, data);\n      }\n    }\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils.js\n");

/***/ })

/******/ });
});